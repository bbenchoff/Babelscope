================================================================================
COMPLETE CHIP-8 SORTING ROM ANALYSIS
ROM: LONGPARTIAL_B0928D01_V2-V7_L6_DES_C13660_2f961508.ch8
Analysis Date: 2025-07-06 21:11:34
================================================================================

=== SORTING ROM ANALYSIS: LONGPARTIAL_B0928D01_V2-V7_L6_DES_C13660_2f961508.ch8 ===

🔍 SORTING AUTHENTICITY ASSESSMENT:
  ❌ CLASSIFICATION: UNCERTAIN (Confidence: 10.0%)
  Evidence for genuine sorting:
    ✓ Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ⚠️  Dominated by random generation: 103 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [165, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8→165, V2: 6→9, V3: 1→8, V5: 2→6
  ✓ Correct initial test pattern detected
  Achievement cycle: 13660


================================================================================
COMPLETE INSTRUCTION DISASSEMBLY
================================================================================

Sorting Achievement: [9, 8, 7, 6, 5, 4] (descending)
Registers V2-V7 sorted at cycle 13660

INSTRUCTION LISTING:
ADDRESS  OPCODE  MNEMONIC OPERANDS         DESCRIPTION                                      REGISTERS
------------------------------------------------------------------------------------------------------------------------
>>> $200    $4630   SNE      V6, #30         Skip next instruction if V6 != $30            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $202    $D2F2   DRW      V2, VF, #2      Draw 2-byte sprite at (V2, VF), VF = collision W:[15] R:[2, 15]
    $204    $0983   NOP      $0983           No operation (ignored by CUDA kernel)         
    $206    $FA88   UNKNOWN  $FA88           Unknown Fxxx instruction (crashes in CUDA)    
    $208    $DF33   DRW      VF, V3, #3      Draw 3-byte sprite at (VF, V3), VF = collision W:[15] R:[3, 15]
    $20A    $919D   UNKNOWN  $919D           Unknown 9xxx instruction (crashes in CUDA)    
    $20C    $AA75   LD       I, $A75         Load $A75 into I register                     
    $20E    $1EAE   JP       $EAE            Jump to address $EAE                          
    $210    $1FC7   JP       $FC7            Jump to address $FC7                          
>>> $212    $C744   RND      V7, #44         V7 = random() AND $44                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $214    $5D62   UNKNOWN  $5D62           Unknown 5xxx instruction (crashes in CUDA)    
    $216    $E5BD   UNKNOWN  $E5BD           Unknown Exxx instruction (crashes in CUDA)    
    $218    $AC99   LD       I, $C99         Load $C99 into I register                     
    $21A    $079F   NOP      $079F           No operation (ignored by CUDA kernel)         
    $21C    $1C58   JP       $C58            Jump to address $C58                          
    $21E    $5EF0   SE       VE, VF          Skip next instruction if VE == VF             R:[14, 15]
    $220    $A228   LD       I, $228         Load $228 into I register                     
    $222    $9DFC   UNKNOWN  $9DFC           Unknown 9xxx instruction (crashes in CUDA)    
    $224    $2D5F   CALL     $D5F            Call subroutine at $D5F                       
    $226    $B583   JP       V0, $583        Jump to $583 + V0                             R:[0]
    $228    $4DA9   SNE      VD, #A9         Skip next instruction if VD != $A9            R:[13]
>>> $22A    $36AB   SE       V6, #AB         Skip next instruction if V6 == $AB            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $22C    $5779   UNKNOWN  $5779           Unknown 5xxx instruction (crashes in CUDA)    
    $22E    $B537   JP       V0, $537        Jump to $537 + V0                             R:[0]
    $230    $F740   UNKNOWN  $F740           Unknown Fxxx instruction (crashes in CUDA)    
    $232    $EC3B   UNKNOWN  $EC3B           Unknown Exxx instruction (crashes in CUDA)    
    $234    $5DEB   UNKNOWN  $5DEB           Unknown 5xxx instruction (crashes in CUDA)    
    $236    $E791   UNKNOWN  $E791           Unknown Exxx instruction (crashes in CUDA)    
>>> $238    $4798   SNE      V7, #98         Skip next instruction if V7 != $98            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $23A    $57B9   UNKNOWN  $57B9           Unknown 5xxx instruction (crashes in CUDA)    
    $23C    $B9F0   JP       V0, $9F0        Jump to $9F0 + V0                             R:[0]
    $23E    $2978   CALL     $978            Call subroutine at $978                       
    $240    $8BFC   UNKNOWN  $8BFC           Unknown 8xxx instruction (crashes in CUDA)    
    $242    $D2E0   DRW      V2, VE, #0      Draw 0-byte sprite at (V2, VE), VF = collision W:[15] R:[2, 14]
    $244    $F44C   UNKNOWN  $F44C           Unknown Fxxx instruction (crashes in CUDA)    
    $246    $AFE1   LD       I, $FE1         Load $FE1 into I register                     
    $248    $E7B5   UNKNOWN  $E7B5           Unknown Exxx instruction (crashes in CUDA)    
>>> $24A    $37F2   SE       V7, #F2         Skip next instruction if V7 == $F2            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $24C    $A44A   LD       I, $44A         Load $44A into I register                     
>>> $24E    $92E0   SNE      V2, VE          Skip next instruction if V2 != VE             R:[2, 14]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $250    $AB99   LD       I, $B99         Load $B99 into I register                     
    $252    $3A7A   SE       VA, #7A         Skip next instruction if VA == $7A            R:[10]
    $254    $1557   JP       $557            Jump to address $557                          
    $256    $A224   LD       I, $224         Load $224 into I register                     
>>> $258    $42BC   SNE      V2, #BC         Skip next instruction if V2 != $BC            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $25A    $FA35   UNKNOWN  $FA35           Unknown Fxxx instruction (crashes in CUDA)    
    $25C    $94A1   UNKNOWN  $94A1           Unknown 9xxx instruction (crashes in CUDA)    
    $25E    $6F12   LD       VF, #12         Load $12 into VF                              W:[15]
    $260    $2B04   CALL     $B04            Call subroutine at $B04                       
    $262    $B452   JP       V0, $452        Jump to $452 + V0                             R:[0]
    $264    $5980   SE       V9, V8          Skip next instruction if V9 == V8             R:[8, 9]
    $266    $191C   JP       $91C            Jump to address $91C                          
    $268    $8CE2   AND      VC, VE          VC = VC AND VE, VF = 0                        W:[12, 15] R:[12, 14]
    $26A    $DDAE   DRW      VD, VA, #E      Draw 14-byte sprite at (VD, VA), VF = collision W:[15] R:[10, 13]
    $26C    $D9D3   DRW      V9, VD, #3      Draw 3-byte sprite at (V9, VD), VF = collision W:[15] R:[9, 13]
    $26E    $0DF7   NOP      $0DF7           No operation (ignored by CUDA kernel)         
    $270    $CD1A   RND      VD, #1A         VD = random() AND $1A                         W:[13]
    $272    $06B4   NOP      $06B4           No operation (ignored by CUDA kernel)         
    $274    $82C8   UNKNOWN  $82C8           Unknown 8xxx instruction (crashes in CUDA)    
    $276    $79DF   ADD      V9, #DF         Add $DF to V9 (V9 = (V9 + $DF) & 0xFF)        W:[9] R:[9]
    $278    $5004   UNKNOWN  $5004           Unknown 5xxx instruction (crashes in CUDA)    
    $27A    $3D71   SE       VD, #71         Skip next instruction if VD == $71            R:[13]
    $27C    $DA1A   DRW      VA, V1, #A      Draw 10-byte sprite at (VA, V1), VF = collision W:[15] R:[1, 10]
    $27E    $DEF3   DRW      VE, VF, #3      Draw 3-byte sprite at (VE, VF), VF = collision W:[15] R:[14, 15]
    $280    $872F   UNKNOWN  $872F           Unknown 8xxx instruction (crashes in CUDA)    
    $282    $5D78   UNKNOWN  $5D78           Unknown 5xxx instruction (crashes in CUDA)    
    $284    $2C1E   CALL     $C1E            Call subroutine at $C1E                       
    $286    $F59D   UNKNOWN  $F59D           Unknown Fxxx instruction (crashes in CUDA)    
    $288    $AD9C   LD       I, $D9C         Load $D9C into I register                     
    $28A    $05D7   NOP      $05D7           No operation (ignored by CUDA kernel)         
    $28C    $2F95   CALL     $F95            Call subroutine at $F95                       
    $28E    $E92D   UNKNOWN  $E92D           Unknown Exxx instruction (crashes in CUDA)    
    $290    $F282   UNKNOWN  $F282           Unknown Fxxx instruction (crashes in CUDA)    
    $292    $F60B   UNKNOWN  $F60B           Unknown Fxxx instruction (crashes in CUDA)    
    $294    $5C27   UNKNOWN  $5C27           Unknown 5xxx instruction (crashes in CUDA)    
>>> $296    $4554   SNE      V5, #54         Skip next instruction if V5 != $54            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $298    $CBAA   RND      VB, #AA         VB = random() AND $AA                         W:[11]
    $29A    $C033   RND      V0, #33         V0 = random() AND $33                         W:[0]
    $29C    $03B2   NOP      $03B2           No operation (ignored by CUDA kernel)         
    $29E    $9ECD   UNKNOWN  $9ECD           Unknown 9xxx instruction (crashes in CUDA)    
    $2A0    $3985   SE       V9, #85         Skip next instruction if V9 == $85            R:[9]
    $2A2    $5F27   UNKNOWN  $5F27           Unknown 5xxx instruction (crashes in CUDA)    
    $2A4    $B129   JP       V0, $129        Jump to $129 + V0                             R:[0]
    $2A6    $D066   DRW      V0, V6, #6      Draw 6-byte sprite at (V0, V6), VF = collision W:[15] R:[0, 6]
    $2A8    $EA19   UNKNOWN  $EA19           Unknown Exxx instruction (crashes in CUDA)    
    $2AA    $5E9B   UNKNOWN  $5E9B           Unknown 5xxx instruction (crashes in CUDA)    
    $2AC    $5D71   UNKNOWN  $5D71           Unknown 5xxx instruction (crashes in CUDA)    
    $2AE    $DB6D   DRW      VB, V6, #D      Draw 13-byte sprite at (VB, V6), VF = collision W:[15] R:[6, 11]
    $2B0    $3C2D   SE       VC, #2D         Skip next instruction if VC == $2D            R:[12]
    $2B2    $B4BC   JP       V0, $4BC        Jump to $4BC + V0                             R:[0]
    $2B4    $2BCF   CALL     $BCF            Call subroutine at $BCF                       
    $2B6    $128D   JP       $28D            Jump to address $28D                          
    $2B8    $5819   UNKNOWN  $5819           Unknown 5xxx instruction (crashes in CUDA)    
    $2BA    $1F0E   JP       $F0E            Jump to address $F0E                          
    $2BC    $5D49   UNKNOWN  $5D49           Unknown 5xxx instruction (crashes in CUDA)    
    $2BE    $79FD   ADD      V9, #FD         Add $FD to V9 (V9 = (V9 + $FD) & 0xFF)        W:[9] R:[9]
    $2C0    $23F9   CALL     $3F9            Call subroutine at $3F9                       
>>> $2C2    $8E52   AND      VE, V5          VE = VE AND V5, VF = 0                        W:[14, 15] R:[5, 14]
          ^-- SORTING RELATED: Logical operation on V[5] (sets VF=0 in CUDA)
    $2C4    $A903   LD       I, $903         Load $903 into I register                     
    $2C6    $4C36   SNE      VC, #36         Skip next instruction if VC != $36            R:[12]
    $2C8    $D17B   DRW      V1, V7, #B      Draw 11-byte sprite at (V1, V7), VF = collision W:[15] R:[1, 7]
    $2CA    $F543   UNKNOWN  $F543           Unknown Fxxx instruction (crashes in CUDA)    
>>> $2CC    $7711   ADD      V7, #11         Add $11 to V7 (V7 = (V7 + $11) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $2CE    $0175   NOP      $0175           No operation (ignored by CUDA kernel)         
    $2D0    $DB09   DRW      VB, V0, #9      Draw 9-byte sprite at (VB, V0), VF = collision W:[15] R:[0, 11]
    $2D2    $0AC2   NOP      $0AC2           No operation (ignored by CUDA kernel)         
    $2D4    $4F2E   SNE      VF, #2E         Skip next instruction if VF != $2E            R:[15]
    $2D6    $3F30   SE       VF, #30         Skip next instruction if VF == $30            R:[15]
    $2D8    $B159   JP       V0, $159        Jump to $159 + V0                             R:[0]
>>> $2DA    $766B   ADD      V6, #6B         Add $6B to V6 (V6 = (V6 + $6B) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $2DC    $C810   RND      V8, #10         V8 = random() AND $10                         W:[8]
    $2DE    $EAA7   UNKNOWN  $EAA7           Unknown Exxx instruction (crashes in CUDA)    
    $2E0    $5383   UNKNOWN  $5383           Unknown 5xxx instruction (crashes in CUDA)    
>>> $2E2    $3781   SE       V7, #81         Skip next instruction if V7 == $81            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
>>> $2E4    $7282   ADD      V2, #82         Add $82 to V2 (V2 = (V2 + $82) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $2E6    $2EF2   CALL     $EF2            Call subroutine at $EF2                       
    $2E8    $89BD   UNKNOWN  $89BD           Unknown 8xxx instruction (crashes in CUDA)    
>>> $2EA    $7326   ADD      V3, #26         Add $26 to V3 (V3 = (V3 + $26) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $2EC    $D068   DRW      V0, V6, #8      Draw 8-byte sprite at (V0, V6), VF = collision W:[15] R:[0, 6]
    $2EE    $6F6E   LD       VF, #6E         Load $6E into VF                              W:[15]
    $2F0    $7F5D   ADD      VF, #5D         Add $5D to VF (VF = (VF + $5D) & 0xFF)        W:[15] R:[15]
    $2F2    $B58A   JP       V0, $58A        Jump to $58A + V0                             R:[0]
    $2F4    $12D7   JP       $2D7            Jump to address $2D7                          
    $2F6    $CB3F   RND      VB, #3F         VB = random() AND $3F                         W:[11]
>>> $2F8    $C38D   RND      V3, #8D         V3 = random() AND $8D                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $2FA    $D689   DRW      V6, V8, #9      Draw 9-byte sprite at (V6, V8), VF = collision W:[15] R:[6, 8]
>>> $2FC    $4384   SNE      V3, #84         Skip next instruction if V3 != $84            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $2FE    $9259   UNKNOWN  $9259           Unknown 9xxx instruction (crashes in CUDA)    
    $300    $56CB   UNKNOWN  $56CB           Unknown 5xxx instruction (crashes in CUDA)    
    $302    $A3CB   LD       I, $3CB         Load $3CB into I register                     
    $304    $0CF6   NOP      $0CF6           No operation (ignored by CUDA kernel)         
    $306    $5ABC   UNKNOWN  $5ABC           Unknown 5xxx instruction (crashes in CUDA)    
    $308    $D0C8   DRW      V0, VC, #8      Draw 8-byte sprite at (V0, VC), VF = collision W:[15] R:[0, 12]
>>> $30A    $3256   SE       V2, #56         Skip next instruction if V2 == $56            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
>>> $30C    $8030   LD       V0, V3          Load V3 into V0                               W:[0] R:[3]
          ^-- SORTING RELATED: Register transfer involving V[3]
    $30E    $E315   UNKNOWN  $E315           Unknown Exxx instruction (crashes in CUDA)    
    $310    $A384   LD       I, $384         Load $384 into I register                     
    $312    $24F5   CALL     $4F5            Call subroutine at $4F5                       
    $314    $D1B2   DRW      V1, VB, #2      Draw 2-byte sprite at (V1, VB), VF = collision W:[15] R:[1, 11]
    $316    $3A2B   SE       VA, #2B         Skip next instruction if VA == $2B            R:[10]
    $318    $7EC2   ADD      VE, #C2         Add $C2 to VE (VE = (VE + $C2) & 0xFF)        W:[14] R:[14]
    $31A    $D195   DRW      V1, V9, #5      Draw 5-byte sprite at (V1, V9), VF = collision W:[15] R:[1, 9]
    $31C    $9712   UNKNOWN  $9712           Unknown 9xxx instruction (crashes in CUDA)    
    $31E    $9DD5   UNKNOWN  $9DD5           Unknown 9xxx instruction (crashes in CUDA)    
    $320    $EEB1   UNKNOWN  $EEB1           Unknown Exxx instruction (crashes in CUDA)    
    $322    $99BD   UNKNOWN  $99BD           Unknown 9xxx instruction (crashes in CUDA)    
    $324    $51F1   UNKNOWN  $51F1           Unknown 5xxx instruction (crashes in CUDA)    
    $326    $2BA0   CALL     $BA0            Call subroutine at $BA0                       
    $328    $ABEA   LD       I, $BEA         Load $BEA into I register                     
>>> $32A    $C57F   RND      V5, #7F         V5 = random() AND $7F                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $32C    $8A19   UNKNOWN  $8A19           Unknown 8xxx instruction (crashes in CUDA)    
    $32E    $E96C   UNKNOWN  $E96C           Unknown Exxx instruction (crashes in CUDA)    
    $330    $CE38   RND      VE, #38         VE = random() AND $38                         W:[14]
    $332    $02BD   NOP      $02BD           No operation (ignored by CUDA kernel)         
    $334    $8768   UNKNOWN  $8768           Unknown 8xxx instruction (crashes in CUDA)    
    $336    $BAF2   JP       V0, $AF2        Jump to $AF2 + V0                             R:[0]
    $338    $0D29   NOP      $0D29           No operation (ignored by CUDA kernel)         
    $33A    $A2D7   LD       I, $2D7         Load $2D7 into I register                     
    $33C    $D330   DRW      V3, V3, #0      Draw 0-byte sprite at (V3, V3), VF = collision W:[15] R:[3]
    $33E    $96EC   UNKNOWN  $96EC           Unknown 9xxx instruction (crashes in CUDA)    
    $340    $BDDB   JP       V0, $DDB        Jump to $DDB + V0                             R:[0]
    $342    $2A8A   CALL     $A8A            Call subroutine at $A8A                       
    $344    $B4A1   JP       V0, $4A1        Jump to $4A1 + V0                             R:[0]
    $346    $D73D   DRW      V7, V3, #D      Draw 13-byte sprite at (V7, V3), VF = collision W:[15] R:[3, 7]
    $348    $1EC4   JP       $EC4            Jump to address $EC4                          
    $34A    $0CFA   NOP      $0CFA           No operation (ignored by CUDA kernel)         
    $34C    $E32A   UNKNOWN  $E32A           Unknown Exxx instruction (crashes in CUDA)    
    $34E    $CA5F   RND      VA, #5F         VA = random() AND $5F                         W:[10]
    $350    $00A9   NOP      $00A9           No operation (ignored by CUDA kernel)         
    $352    $A1CD   LD       I, $1CD         Load $1CD into I register                     
>>> $354    $7205   ADD      V2, #05         Add $05 to V2 (V2 = (V2 + $05) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $356    $9D00   SNE      VD, V0          Skip next instruction if VD != V0             R:[0, 13]
>>> $358    $5E50   SE       VE, V5          Skip next instruction if VE == V5             R:[5, 14]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $35A    $690D   LD       V9, #0D         Load $0D into V9                              W:[9]
    $35C    $2055   CALL     $055            Call subroutine at $055                       
    $35E    $814D   UNKNOWN  $814D           Unknown 8xxx instruction (crashes in CUDA)    
    $360    $4A95   SNE      VA, #95         Skip next instruction if VA != $95            R:[10]
    $362    $0DB9   NOP      $0DB9           No operation (ignored by CUDA kernel)         
    $364    $FC5A   UNKNOWN  $FC5A           Unknown Fxxx instruction (crashes in CUDA)    
    $366    $8CFF   UNKNOWN  $8CFF           Unknown 8xxx instruction (crashes in CUDA)    
    $368    $A991   LD       I, $991         Load $991 into I register                     
    $36A    $A1E5   LD       I, $1E5         Load $1E5 into I register                     
    $36C    $3E6F   SE       VE, #6F         Skip next instruction if VE == $6F            R:[14]
    $36E    $0317   NOP      $0317           No operation (ignored by CUDA kernel)         
    $370    $7F1A   ADD      VF, #1A         Add $1A to VF (VF = (VF + $1A) & 0xFF)        W:[15] R:[15]
    $372    $E206   UNKNOWN  $E206           Unknown Exxx instruction (crashes in CUDA)    
    $374    $88F3   XOR      V8, VF          V8 = V8 XOR VF, VF = 0                        W:[8, 15] R:[8, 15]
    $376    $6DDF   LD       VD, #DF         Load $DF into VD                              W:[13]
    $378    $4A78   SNE      VA, #78         Skip next instruction if VA != $78            R:[10]
>>> $37A    $6201   LD       V2, #01         Load $01 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $37C    $20E7   CALL     $0E7            Call subroutine at $0E7                       
    $37E    $2569   CALL     $569            Call subroutine at $569                       
    $380    $1B7E   JP       $B7E            Jump to address $B7E                          
    $382    $14D7   JP       $4D7            Jump to address $4D7                          
    $384    $D44C   DRW      V4, V4, #C      Draw 12-byte sprite at (V4, V4), VF = collision W:[15] R:[4]
>>> $386    $6567   LD       V5, #67         Load $67 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $388    $0D75   NOP      $0D75           No operation (ignored by CUDA kernel)         
>>> $38A    $9A30   SNE      VA, V3          Skip next instruction if VA != V3             R:[3, 10]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $38C    $BDFA   JP       V0, $DFA        Jump to $DFA + V0                             R:[0]
    $38E    $5F74   UNKNOWN  $5F74           Unknown 5xxx instruction (crashes in CUDA)    
    $390    $EB82   UNKNOWN  $EB82           Unknown Exxx instruction (crashes in CUDA)    
    $392    $B6AE   JP       V0, $6AE        Jump to $6AE + V0                             R:[0]
    $394    $8C82   AND      VC, V8          VC = VC AND V8, VF = 0                        W:[12, 15] R:[8, 12]
    $396    $007C   NOP      $007C           No operation (ignored by CUDA kernel)         
    $398    $31AC   SE       V1, #AC         Skip next instruction if V1 == $AC            R:[1]
>>> $39A    $4468   SNE      V4, #68         Skip next instruction if V4 != $68            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $39C    $7FE9   ADD      VF, #E9         Add $E9 to VF (VF = (VF + $E9) & 0xFF)        W:[15] R:[15]
    $39E    $A161   LD       I, $161         Load $161 into I register                     
>>> $3A0    $74F0   ADD      V4, #F0         Add $F0 to V4 (V4 = (V4 + $F0) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $3A2    $A2D4   LD       I, $2D4         Load $2D4 into I register                     
    $3A4    $1B3D   JP       $B3D            Jump to address $B3D                          
    $3A6    $2D55   CALL     $D55            Call subroutine at $D55                       
>>> $3A8    $8557   SUBN     V5, V5          V5 = (V5 - V5) & 0xFF, VF = NOT borrow        W:[5, 15] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $3AA    $EB9A   UNKNOWN  $EB9A           Unknown Exxx instruction (crashes in CUDA)    
    $3AC    $2B3E   CALL     $B3E            Call subroutine at $B3E                       
    $3AE    $5253   UNKNOWN  $5253           Unknown 5xxx instruction (crashes in CUDA)    
    $3B0    $02CD   NOP      $02CD           No operation (ignored by CUDA kernel)         
    $3B2    $EBB9   UNKNOWN  $EBB9           Unknown Exxx instruction (crashes in CUDA)    
    $3B4    $15E2   JP       $5E2            Jump to address $5E2                          
    $3B6    $5D4A   UNKNOWN  $5D4A           Unknown 5xxx instruction (crashes in CUDA)    
    $3B8    $0AF3   NOP      $0AF3           No operation (ignored by CUDA kernel)         
    $3BA    $EA58   UNKNOWN  $EA58           Unknown Exxx instruction (crashes in CUDA)    
    $3BC    $183C   JP       $83C            Jump to address $83C                          
>>> $3BE    $C429   RND      V4, #29         V4 = random() AND $29                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
>>> $3C0    $7241   ADD      V2, #41         Add $41 to V2 (V2 = (V2 + $41) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $3C2    $BCC8   JP       V0, $CC8        Jump to $CC8 + V0                             R:[0]
>>> $3C4    $320B   SE       V2, #0B         Skip next instruction if V2 == $0B            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $3C6    $A9D9   LD       I, $9D9         Load $9D9 into I register                     
    $3C8    $D016   DRW      V0, V1, #6      Draw 6-byte sprite at (V0, V1), VF = collision W:[15] R:[0, 1]
    $3CA    $6B22   LD       VB, #22         Load $22 into VB                              W:[11]
>>> $3CC    $43C7   SNE      V3, #C7         Skip next instruction if V3 != $C7            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $3CE    $4DB7   SNE      VD, #B7         Skip next instruction if VD != $B7            R:[13]
    $3D0    $4F26   SNE      VF, #26         Skip next instruction if VF != $26            R:[15]
    $3D2    $BD05   JP       V0, $D05        Jump to $D05 + V0                             R:[0]
    $3D4    $FD1E   ADD      I, VD           I = (I + VD) & 0xFFFF                         R:[13]
>>> $3D6    $C41E   RND      V4, #1E         V4 = random() AND $1E                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $3D8    $BF29   JP       V0, $F29        Jump to $F29 + V0                             R:[0]
    $3DA    $6E08   LD       VE, #08         Load $08 into VE                              W:[14]
    $3DC    $2E95   CALL     $E95            Call subroutine at $E95                       
    $3DE    $E9AF   UNKNOWN  $E9AF           Unknown Exxx instruction (crashes in CUDA)    
    $3E0    $92F1   UNKNOWN  $92F1           Unknown 9xxx instruction (crashes in CUDA)    
    $3E2    $071D   NOP      $071D           No operation (ignored by CUDA kernel)         
    $3E4    $6CF0   LD       VC, #F0         Load $F0 into VC                              W:[12]
>>> $3E6    $97E0   SNE      V7, VE          Skip next instruction if V7 != VE             R:[7, 14]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $3E8    $06B2   NOP      $06B2           No operation (ignored by CUDA kernel)         
    $3EA    $1BB8   JP       $BB8            Jump to address $BB8                          
    $3EC    $2C48   CALL     $C48            Call subroutine at $C48                       
    $3EE    $5A24   UNKNOWN  $5A24           Unknown 5xxx instruction (crashes in CUDA)    
    $3F0    $9191   UNKNOWN  $9191           Unknown 9xxx instruction (crashes in CUDA)    
    $3F2    $418C   SNE      V1, #8C         Skip next instruction if V1 != $8C            R:[1]
>>> $3F4    $3796   SE       V7, #96         Skip next instruction if V7 == $96            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $3F6    $1EAC   JP       $EAC            Jump to address $EAC                          
    $3F8    $ED10   UNKNOWN  $ED10           Unknown Exxx instruction (crashes in CUDA)    
    $3FA    $C8C1   RND      V8, #C1         V8 = random() AND $C1                         W:[8]
    $3FC    $4F70   SNE      VF, #70         Skip next instruction if VF != $70            R:[15]
    $3FE    $E15F   UNKNOWN  $E15F           Unknown Exxx instruction (crashes in CUDA)    
    $400    $0245   NOP      $0245           No operation (ignored by CUDA kernel)         
    $402    $59A7   UNKNOWN  $59A7           Unknown 5xxx instruction (crashes in CUDA)    
    $404    $B262   JP       V0, $262        Jump to $262 + V0                             R:[0]
>>> $406    $86C6   SHR      V6              V6 = V6 >> 1, VF = LSB                        W:[6, 15] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $408    $C181   RND      V1, #81         V1 = random() AND $81                         W:[1]
    $40A    $4A89   SNE      VA, #89         Skip next instruction if VA != $89            R:[10]
    $40C    $0437   NOP      $0437           No operation (ignored by CUDA kernel)         
    $40E    $EBCB   UNKNOWN  $EBCB           Unknown Exxx instruction (crashes in CUDA)    
    $410    $1F54   JP       $F54            Jump to address $F54                          
    $412    $99C3   UNKNOWN  $99C3           Unknown 9xxx instruction (crashes in CUDA)    
    $414    $B742   JP       V0, $742        Jump to $742 + V0                             R:[0]
    $416    $F3AC   UNKNOWN  $F3AC           Unknown Fxxx instruction (crashes in CUDA)    
    $418    $4C89   SNE      VC, #89         Skip next instruction if VC != $89            R:[12]
    $41A    $412F   SNE      V1, #2F         Skip next instruction if V1 != $2F            R:[1]
    $41C    $1FAC   JP       $FAC            Jump to address $FAC                          
    $41E    $D0EB   DRW      V0, VE, #B      Draw 11-byte sprite at (V0, VE), VF = collision W:[15] R:[0, 14]
    $420    $31A6   SE       V1, #A6         Skip next instruction if V1 == $A6            R:[1]
    $422    $53B4   UNKNOWN  $53B4           Unknown 5xxx instruction (crashes in CUDA)    
    $424    $8FFA   UNKNOWN  $8FFA           Unknown 8xxx instruction (crashes in CUDA)    
    $426    $E8AC   UNKNOWN  $E8AC           Unknown Exxx instruction (crashes in CUDA)    
    $428    $AFF3   LD       I, $FF3         Load $FF3 into I register                     
    $42A    $B91D   JP       V0, $91D        Jump to $91D + V0                             R:[0]
    $42C    $60BD   LD       V0, #BD         Load $BD into V0                              W:[0]
    $42E    $05CA   NOP      $05CA           No operation (ignored by CUDA kernel)         
    $430    $A98B   LD       I, $98B         Load $98B into I register                     
    $432    $B101   JP       V0, $101        Jump to $101 + V0                             R:[0]
    $434    $9255   UNKNOWN  $9255           Unknown 9xxx instruction (crashes in CUDA)    
    $436    $0CBE   NOP      $0CBE           No operation (ignored by CUDA kernel)         
    $438    $9A57   UNKNOWN  $9A57           Unknown 9xxx instruction (crashes in CUDA)    
    $43A    $AD7A   LD       I, $D7A         Load $D7A into I register                     
    $43C    $AEFF   LD       I, $EFF         Load $EFF into I register                     
    $43E    $D51F   DRW      V5, V1, #F      Draw 15-byte sprite at (V5, V1), VF = collision W:[15] R:[1, 5]
    $440    $0D70   NOP      $0D70           No operation (ignored by CUDA kernel)         
    $442    $1955   JP       $955            Jump to address $955                          
    $444    $CB29   RND      VB, #29         VB = random() AND $29                         W:[11]
    $446    $28C5   CALL     $8C5            Call subroutine at $8C5                       
    $448    $F224   UNKNOWN  $F224           Unknown Fxxx instruction (crashes in CUDA)    
    $44A    $2C4F   CALL     $C4F            Call subroutine at $C4F                       
>>> $44C    $32ED   SE       V2, #ED         Skip next instruction if V2 == $ED            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $44E    $AB17   LD       I, $B17         Load $B17 into I register                     
    $450    $7EEC   ADD      VE, #EC         Add $EC to VE (VE = (VE + $EC) & 0xFF)        W:[14] R:[14]
    $452    $F959   UNKNOWN  $F959           Unknown Fxxx instruction (crashes in CUDA)    
    $454    $7BED   ADD      VB, #ED         Add $ED to VB (VB = (VB + $ED) & 0xFF)        W:[11] R:[11]
>>> $456    $63FC   LD       V3, #FC         Load $FC into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $458    $CF89   RND      VF, #89         VF = random() AND $89                         W:[15]
    $45A    $D807   DRW      V8, V0, #7      Draw 7-byte sprite at (V8, V0), VF = collision W:[15] R:[0, 8]
    $45C    $9BDF   UNKNOWN  $9BDF           Unknown 9xxx instruction (crashes in CUDA)    
    $45E    $912B   UNKNOWN  $912B           Unknown 9xxx instruction (crashes in CUDA)    
    $460    $7CEE   ADD      VC, #EE         Add $EE to VC (VC = (VC + $EE) & 0xFF)        W:[12] R:[12]
    $462    $90AA   UNKNOWN  $90AA           Unknown 9xxx instruction (crashes in CUDA)    
    $464    $DB2F   DRW      VB, V2, #F      Draw 15-byte sprite at (VB, V2), VF = collision W:[15] R:[2, 11]
    $466    $6BB6   LD       VB, #B6         Load $B6 into VB                              W:[11]
>>> $468    $333D   SE       V3, #3D         Skip next instruction if V3 == $3D            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $46A    $A80F   LD       I, $80F         Load $80F into I register                     
>>> $46C    $825E   SHL      V2              V2 = (V2 << 1) & 0xFF, VF = MSB               W:[2, 15] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $46E    $E1A0   UNKNOWN  $E1A0           Unknown Exxx instruction (crashes in CUDA)    
    $470    $2BB2   CALL     $BB2            Call subroutine at $BB2                       
    $472    $5C03   UNKNOWN  $5C03           Unknown 5xxx instruction (crashes in CUDA)    
    $474    $7EF2   ADD      VE, #F2         Add $F2 to VE (VE = (VE + $F2) & 0xFF)        W:[14] R:[14]
    $476    $D26D   DRW      V2, V6, #D      Draw 13-byte sprite at (V2, V6), VF = collision W:[15] R:[2, 6]
    $478    $D587   DRW      V5, V8, #7      Draw 7-byte sprite at (V5, V8), VF = collision W:[15] R:[5, 8]
>>> $47A    $3479   SE       V4, #79         Skip next instruction if V4 == $79            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $47C    $A76B   LD       I, $76B         Load $76B into I register                     
    $47E    $5A9C   UNKNOWN  $5A9C           Unknown 5xxx instruction (crashes in CUDA)    
    $480    $D511   DRW      V5, V1, #1      Draw 1-byte sprite at (V5, V1), VF = collision W:[15] R:[1, 5]
    $482    $FF39   UNKNOWN  $FF39           Unknown Fxxx instruction (crashes in CUDA)    
    $484    $82AD   UNKNOWN  $82AD           Unknown 8xxx instruction (crashes in CUDA)    
    $486    $784B   ADD      V8, #4B         Add $4B to V8 (V8 = (V8 + $4B) & 0xFF)        W:[8] R:[8]
    $488    $1A53   JP       $A53            Jump to address $A53                          
    $48A    $3F1F   SE       VF, #1F         Skip next instruction if VF == $1F            R:[15]
    $48C    $E741   UNKNOWN  $E741           Unknown Exxx instruction (crashes in CUDA)    
    $48E    $DA30   DRW      VA, V3, #0      Draw 0-byte sprite at (VA, V3), VF = collision W:[15] R:[3, 10]
    $490    $3FFA   SE       VF, #FA         Skip next instruction if VF == $FA            R:[15]
    $492    $D5F3   DRW      V5, VF, #3      Draw 3-byte sprite at (V5, VF), VF = collision W:[15] R:[5, 15]
>>> $494    $35D1   SE       V5, #D1         Skip next instruction if V5 == $D1            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
>>> $496    $C65E   RND      V6, #5E         V6 = random() AND $5E                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $498    $15CB   JP       $5CB            Jump to address $5CB                          
    $49A    $B873   JP       V0, $873        Jump to $873 + V0                             R:[0]
    $49C    $7008   ADD      V0, #08         Add $08 to V0 (V0 = (V0 + $08) & 0xFF)        W:[0] R:[0]
    $49E    $22FD   CALL     $2FD            Call subroutine at $2FD                       
    $4A0    $150C   JP       $50C            Jump to address $50C                          
    $4A2    $6B5E   LD       VB, #5E         Load $5E into VB                              W:[11]
>>> $4A4    $6581   LD       V5, #81         Load $81 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $4A6    $5E46   UNKNOWN  $5E46           Unknown 5xxx instruction (crashes in CUDA)    
    $4A8    $0D56   NOP      $0D56           No operation (ignored by CUDA kernel)         
    $4AA    $1B89   JP       $B89            Jump to address $B89                          
    $4AC    $2897   CALL     $897            Call subroutine at $897                       
    $4AE    $EC11   UNKNOWN  $EC11           Unknown Exxx instruction (crashes in CUDA)    
    $4B0    $B88D   JP       V0, $88D        Jump to $88D + V0                             R:[0]
    $4B2    $96F7   UNKNOWN  $96F7           Unknown 9xxx instruction (crashes in CUDA)    
    $4B4    $4C84   SNE      VC, #84         Skip next instruction if VC != $84            R:[12]
>>> $4B6    $C31E   RND      V3, #1E         V3 = random() AND $1E                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $4B8    $158D   JP       $58D            Jump to address $58D                          
    $4BA    $5E89   UNKNOWN  $5E89           Unknown 5xxx instruction (crashes in CUDA)    
    $4BC    $BD5B   JP       V0, $D5B        Jump to $D5B + V0                             R:[0]
    $4BE    $B9CD   JP       V0, $9CD        Jump to $9CD + V0                             R:[0]
    $4C0    $49F0   SNE      V9, #F0         Skip next instruction if V9 != $F0            R:[9]
    $4C2    $FCEA   UNKNOWN  $FCEA           Unknown Fxxx instruction (crashes in CUDA)    
    $4C4    $4B72   SNE      VB, #72         Skip next instruction if VB != $72            R:[11]
    $4C6    $1DD8   JP       $DD8            Jump to address $DD8                          
    $4C8    $D786   DRW      V7, V8, #6      Draw 6-byte sprite at (V7, V8), VF = collision W:[15] R:[7, 8]
    $4CA    $4080   SNE      V0, #80         Skip next instruction if V0 != $80            R:[0]
    $4CC    $87EF   UNKNOWN  $87EF           Unknown 8xxx instruction (crashes in CUDA)    
    $4CE    $867A   UNKNOWN  $867A           Unknown 8xxx instruction (crashes in CUDA)    
    $4D0    $FCDA   UNKNOWN  $FCDA           Unknown Fxxx instruction (crashes in CUDA)    
>>> $4D2    $330B   SE       V3, #0B         Skip next instruction if V3 == $0B            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $4D4    $97F4   UNKNOWN  $97F4           Unknown 9xxx instruction (crashes in CUDA)    
>>> $4D6    $76B8   ADD      V6, #B8         Add $B8 to V6 (V6 = (V6 + $B8) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $4D8    $53D2   UNKNOWN  $53D2           Unknown 5xxx instruction (crashes in CUDA)    
    $4DA    $029E   NOP      $029E           No operation (ignored by CUDA kernel)         
>>> $4DC    $63A1   LD       V3, #A1         Load $A1 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $4DE    $AC84   LD       I, $C84         Load $C84 into I register                     
    $4E0    $0CFF   NOP      $0CFF           No operation (ignored by CUDA kernel)         
    $4E2    $3CDB   SE       VC, #DB         Skip next instruction if VC == $DB            R:[12]
    $4E4    $A837   LD       I, $837         Load $837 into I register                     
    $4E6    $058A   NOP      $058A           No operation (ignored by CUDA kernel)         
    $4E8    $B675   JP       V0, $675        Jump to $675 + V0                             R:[0]
>>> $4EA    $6761   LD       V7, #61         Load $61 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $4EC    $0D2D   NOP      $0D2D           No operation (ignored by CUDA kernel)         
    $4EE    $91A6   UNKNOWN  $91A6           Unknown 9xxx instruction (crashes in CUDA)    
    $4F0    $6DDE   LD       VD, #DE         Load $DE into VD                              W:[13]
    $4F2    $55C1   UNKNOWN  $55C1           Unknown 5xxx instruction (crashes in CUDA)    
    $4F4    $E4F5   UNKNOWN  $E4F5           Unknown Exxx instruction (crashes in CUDA)    
    $4F6    $828D   UNKNOWN  $828D           Unknown 8xxx instruction (crashes in CUDA)    
    $4F8    $BC45   JP       V0, $C45        Jump to $C45 + V0                             R:[0]
>>> $4FA    $72F1   ADD      V2, #F1         Add $F1 to V2 (V2 = (V2 + $F1) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $4FC    $4049   SNE      V0, #49         Skip next instruction if V0 != $49            R:[0]
    $4FE    $28BC   CALL     $8BC            Call subroutine at $8BC                       
    $500    $5DB1   UNKNOWN  $5DB1           Unknown 5xxx instruction (crashes in CUDA)    
    $502    $4E5B   SNE      VE, #5B         Skip next instruction if VE != $5B            R:[14]
    $504    $A4C4   LD       I, $4C4         Load $4C4 into I register                     
    $506    $D974   DRW      V9, V7, #4      Draw 4-byte sprite at (V9, V7), VF = collision W:[15] R:[7, 9]
    $508    $82CA   UNKNOWN  $82CA           Unknown 8xxx instruction (crashes in CUDA)    
>>> $50A    $870E   SHL      V7              V7 = (V7 << 1) & 0xFF, VF = MSB               W:[7, 15] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $50C    $6070   LD       V0, #70         Load $70 into V0                              W:[0]
    $50E    $A474   LD       I, $474         Load $474 into I register                     
    $510    $605C   LD       V0, #5C         Load $5C into V0                              W:[0]
    $512    $E5B9   UNKNOWN  $E5B9           Unknown Exxx instruction (crashes in CUDA)    
    $514    $EE4E   UNKNOWN  $EE4E           Unknown Exxx instruction (crashes in CUDA)    
    $516    $E541   UNKNOWN  $E541           Unknown Exxx instruction (crashes in CUDA)    
    $518    $9BDA   UNKNOWN  $9BDA           Unknown 9xxx instruction (crashes in CUDA)    
    $51A    $0EE9   NOP      $0EE9           No operation (ignored by CUDA kernel)         
    $51C    $F6EF   UNKNOWN  $F6EF           Unknown Fxxx instruction (crashes in CUDA)    
    $51E    $9C8E   UNKNOWN  $9C8E           Unknown 9xxx instruction (crashes in CUDA)    
    $520    $FE81   UNKNOWN  $FE81           Unknown Fxxx instruction (crashes in CUDA)    
    $522    $1186   JP       $186            Jump to address $186                          
    $524    $B385   JP       V0, $385        Jump to $385 + V0                             R:[0]
    $526    $57B7   UNKNOWN  $57B7           Unknown 5xxx instruction (crashes in CUDA)    
    $528    $0307   NOP      $0307           No operation (ignored by CUDA kernel)         
    $52A    $A3B1   LD       I, $3B1         Load $3B1 into I register                     
>>> $52C    $77E0   ADD      V7, #E0         Add $E0 to V7 (V7 = (V7 + $E0) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $52E    $202B   CALL     $02B            Call subroutine at $02B                       
    $530    $A55A   LD       I, $55A         Load $55A into I register                     
    $532    $5DBC   UNKNOWN  $5DBC           Unknown 5xxx instruction (crashes in CUDA)    
    $534    $D8E1   DRW      V8, VE, #1      Draw 1-byte sprite at (V8, VE), VF = collision W:[15] R:[8, 14]
    $536    $B947   JP       V0, $947        Jump to $947 + V0                             R:[0]
    $538    $82A8   UNKNOWN  $82A8           Unknown 8xxx instruction (crashes in CUDA)    
    $53A    $6D5D   LD       VD, #5D         Load $5D into VD                              W:[13]
    $53C    $2BFE   CALL     $BFE            Call subroutine at $BFE                       
    $53E    $0CFF   NOP      $0CFF           No operation (ignored by CUDA kernel)         
    $540    $C00C   RND      V0, #0C         V0 = random() AND $0C                         W:[0]
>>> $542    $3359   SE       V3, #59         Skip next instruction if V3 == $59            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $544    $6A41   LD       VA, #41         Load $41 into VA                              W:[10]
    $546    $AB87   LD       I, $B87         Load $B87 into I register                     
>>> $548    $C2DB   RND      V2, #DB         V2 = random() AND $DB                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $54A    $DC91   DRW      VC, V9, #1      Draw 1-byte sprite at (VC, V9), VF = collision W:[15] R:[9, 12]
    $54C    $2BDC   CALL     $BDC            Call subroutine at $BDC                       
    $54E    $CD6E   RND      VD, #6E         VD = random() AND $6E                         W:[13]
    $550    $94F4   UNKNOWN  $94F4           Unknown 9xxx instruction (crashes in CUDA)    
>>> $552    $4499   SNE      V4, #99         Skip next instruction if V4 != $99            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
>>> $554    $75BD   ADD      V5, #BD         Add $BD to V5 (V5 = (V5 + $BD) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $556    $DD8D   DRW      VD, V8, #D      Draw 13-byte sprite at (VD, V8), VF = collision W:[15] R:[8, 13]
    $558    $BF71   JP       V0, $F71        Jump to $F71 + V0                             R:[0]
    $55A    $A8F9   LD       I, $8F9         Load $8F9 into I register                     
    $55C    $B28D   JP       V0, $28D        Jump to $28D + V0                             R:[0]
    $55E    $2984   CALL     $984            Call subroutine at $984                       
>>> $560    $466F   SNE      V6, #6F         Skip next instruction if V6 != $6F            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $562    $95DA   UNKNOWN  $95DA           Unknown 9xxx instruction (crashes in CUDA)    
    $564    $FEA8   UNKNOWN  $FEA8           Unknown Fxxx instruction (crashes in CUDA)    
    $566    $850F   UNKNOWN  $850F           Unknown 8xxx instruction (crashes in CUDA)    
    $568    $0772   NOP      $0772           No operation (ignored by CUDA kernel)         
    $56A    $833C   UNKNOWN  $833C           Unknown 8xxx instruction (crashes in CUDA)    
>>> $56C    $4736   SNE      V7, #36         Skip next instruction if V7 != $36            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
>>> $56E    $3460   SE       V4, #60         Skip next instruction if V4 == $60            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $570    $6D97   LD       VD, #97         Load $97 into VD                              W:[13]
    $572    $1676   JP       $676            Jump to address $676                          
    $574    $F081   UNKNOWN  $F081           Unknown Fxxx instruction (crashes in CUDA)    
    $576    $3A0C   SE       VA, #0C         Skip next instruction if VA == $0C            R:[10]
>>> $578    $460B   SNE      V6, #0B         Skip next instruction if V6 != $0B            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $57A    $39B8   SE       V9, #B8         Skip next instruction if V9 == $B8            R:[9]
>>> $57C    $C5E4   RND      V5, #E4         V5 = random() AND $E4                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $57E    $8FB3   XOR      VF, VB          VF = VF XOR VB, VF = 0                        W:[15] R:[11, 15]
    $580    $BB2B   JP       V0, $B2B        Jump to $B2B + V0                             R:[0]
    $582    $6AD3   LD       VA, #D3         Load $D3 into VA                              W:[10]
    $584    $D480   DRW      V4, V8, #0      Draw 0-byte sprite at (V4, V8), VF = collision W:[15] R:[4, 8]
    $586    $D7DA   DRW      V7, VD, #A      Draw 10-byte sprite at (V7, VD), VF = collision W:[15] R:[7, 13]
    $588    $9A49   UNKNOWN  $9A49           Unknown 9xxx instruction (crashes in CUDA)    
    $58A    $1F2F   JP       $F2F            Jump to address $F2F                          
>>> $58C    $7497   ADD      V4, #97         Add $97 to V4 (V4 = (V4 + $97) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $58E    $6C79   LD       VC, #79         Load $79 into VC                              W:[12]
    $590    $F523   UNKNOWN  $F523           Unknown Fxxx instruction (crashes in CUDA)    
    $592    $99C7   UNKNOWN  $99C7           Unknown 9xxx instruction (crashes in CUDA)    
    $594    $3EF2   SE       VE, #F2         Skip next instruction if VE == $F2            R:[14]
    $596    $4FB2   SNE      VF, #B2         Skip next instruction if VF != $B2            R:[15]
>>> $598    $83C4   ADD      V3, VC          V3 = (V3 + VC) & 0xFF, VF = carry             W:[3, 15] R:[3, 12]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $59A    $E488   UNKNOWN  $E488           Unknown Exxx instruction (crashes in CUDA)    
    $59C    $E886   UNKNOWN  $E886           Unknown Exxx instruction (crashes in CUDA)    
    $59E    $CBCE   RND      VB, #CE         VB = random() AND $CE                         W:[11]
    $5A0    $09D7   NOP      $09D7           No operation (ignored by CUDA kernel)         
    $5A2    $12F4   JP       $2F4            Jump to address $2F4                          
    $5A4    $0588   NOP      $0588           No operation (ignored by CUDA kernel)         
    $5A6    $6044   LD       V0, #44         Load $44 into V0                              W:[0]
    $5A8    $9A80   SNE      VA, V8          Skip next instruction if VA != V8             R:[8, 10]
    $5AA    $B355   JP       V0, $355        Jump to $355 + V0                             R:[0]
    $5AC    $825F   UNKNOWN  $825F           Unknown 8xxx instruction (crashes in CUDA)    
    $5AE    $E518   UNKNOWN  $E518           Unknown Exxx instruction (crashes in CUDA)    
    $5B0    $D048   DRW      V0, V4, #8      Draw 8-byte sprite at (V0, V4), VF = collision W:[15] R:[0, 4]
    $5B2    $0365   NOP      $0365           No operation (ignored by CUDA kernel)         
    $5B4    $93B3   UNKNOWN  $93B3           Unknown 9xxx instruction (crashes in CUDA)    
    $5B6    $AD92   LD       I, $D92         Load $D92 into I register                     
    $5B8    $1588   JP       $588            Jump to address $588                          
    $5BA    $19A0   JP       $9A0            Jump to address $9A0                          
>>> $5BC    $8045   SUB      V0, V4          V0 = (V0 - V4) & 0xFF, VF = NOT borrow        W:[0, 15] R:[0, 4]
          ^-- SORTING RELATED: Arithmetic on sorted registers V[4]
    $5BE    $BFB1   JP       V0, $FB1        Jump to $FB1 + V0                             R:[0]
    $5C0    $2931   CALL     $931            Call subroutine at $931                       
>>> $5C2    $861E   SHL      V6              V6 = (V6 << 1) & 0xFF, VF = MSB               W:[6, 15] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $5C4    $D179   DRW      V1, V7, #9      Draw 9-byte sprite at (V1, V7), VF = collision W:[15] R:[1, 7]
    $5C6    $9804   UNKNOWN  $9804           Unknown 9xxx instruction (crashes in CUDA)    
    $5C8    $A64A   LD       I, $64A         Load $64A into I register                     
    $5CA    $0911   NOP      $0911           No operation (ignored by CUDA kernel)         
    $5CC    $1AC7   JP       $AC7            Jump to address $AC7                          
    $5CE    $23BD   CALL     $3BD            Call subroutine at $3BD                       
    $5D0    $8A6B   UNKNOWN  $8A6B           Unknown 8xxx instruction (crashes in CUDA)    
    $5D2    $0A40   NOP      $0A40           No operation (ignored by CUDA kernel)         
    $5D4    $2387   CALL     $387            Call subroutine at $387                       
    $5D6    $27DF   CALL     $7DF            Call subroutine at $7DF                       
>>> $5D8    $76CA   ADD      V6, #CA         Add $CA to V6 (V6 = (V6 + $CA) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $5DA    $0B47   NOP      $0B47           No operation (ignored by CUDA kernel)         
    $5DC    $6045   LD       V0, #45         Load $45 into V0                              W:[0]
    $5DE    $A07D   LD       I, $07D         Load $07D into I register                     
    $5E0    $9005   UNKNOWN  $9005           Unknown 9xxx instruction (crashes in CUDA)    
    $5E2    $3891   SE       V8, #91         Skip next instruction if V8 == $91            R:[8]
    $5E4    $247C   CALL     $47C            Call subroutine at $47C                       
    $5E6    $CC3C   RND      VC, #3C         VC = random() AND $3C                         W:[12]
    $5E8    $F64E   UNKNOWN  $F64E           Unknown Fxxx instruction (crashes in CUDA)    
    $5EA    $9BCE   UNKNOWN  $9BCE           Unknown 9xxx instruction (crashes in CUDA)    
>>> $5EC    $7692   ADD      V6, #92         Add $92 to V6 (V6 = (V6 + $92) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $5EE    $5FA7   UNKNOWN  $5FA7           Unknown 5xxx instruction (crashes in CUDA)    
    $5F0    $6894   LD       V8, #94         Load $94 into V8                              W:[8]
    $5F2    $0D48   NOP      $0D48           No operation (ignored by CUDA kernel)         
    $5F4    $8DB7   SUBN     VD, VB          VD = (VB - VD) & 0xFF, VF = NOT borrow        W:[13, 15] R:[11, 13]
    $5F6    $5948   UNKNOWN  $5948           Unknown 5xxx instruction (crashes in CUDA)    
    $5F8    $AE3B   LD       I, $E3B         Load $E3B into I register                     
    $5FA    $190C   JP       $90C            Jump to address $90C                          
    $5FC    $B5AA   JP       V0, $5AA        Jump to $5AA + V0                             R:[0]
    $5FE    $165F   JP       $65F            Jump to address $65F                          
    $600    $7DCC   ADD      VD, #CC         Add $CC to VD (VD = (VD + $CC) & 0xFF)        W:[13] R:[13]
    $602    $B489   JP       V0, $489        Jump to $489 + V0                             R:[0]
    $604    $CB98   RND      VB, #98         VB = random() AND $98                         W:[11]
    $606    $DED4   DRW      VE, VD, #4      Draw 4-byte sprite at (VE, VD), VF = collision W:[15] R:[13, 14]
    $608    $5B42   UNKNOWN  $5B42           Unknown 5xxx instruction (crashes in CUDA)    
    $60A    $AA5E   LD       I, $A5E         Load $A5E into I register                     
    $60C    $D046   DRW      V0, V4, #6      Draw 6-byte sprite at (V0, V4), VF = collision W:[15] R:[0, 4]
    $60E    $B4C6   JP       V0, $4C6        Jump to $4C6 + V0                             R:[0]
    $610    $FC6D   UNKNOWN  $FC6D           Unknown Fxxx instruction (crashes in CUDA)    
    $612    $B0E3   JP       V0, $0E3        Jump to $0E3 + V0                             R:[0]
    $614    $A423   LD       I, $423         Load $423 into I register                     
    $616    $AB81   LD       I, $B81         Load $B81 into I register                     
    $618    $579C   UNKNOWN  $579C           Unknown 5xxx instruction (crashes in CUDA)    
    $61A    $4BA2   SNE      VB, #A2         Skip next instruction if VB != $A2            R:[11]
    $61C    $306E   SE       V0, #6E         Skip next instruction if V0 == $6E            R:[0]
>>> $61E    $452C   SNE      V5, #2C         Skip next instruction if V5 != $2C            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $620    $3C79   SE       VC, #79         Skip next instruction if VC == $79            R:[12]
    $622    $5B53   UNKNOWN  $5B53           Unknown 5xxx instruction (crashes in CUDA)    
    $624    $4B07   SNE      VB, #07         Skip next instruction if VB != $07            R:[11]
    $626    $9BF1   UNKNOWN  $9BF1           Unknown 9xxx instruction (crashes in CUDA)    
    $628    $4198   SNE      V1, #98         Skip next instruction if V1 != $98            R:[1]
    $62A    $601C   LD       V0, #1C         Load $1C into V0                              W:[0]
    $62C    $6BC4   LD       VB, #C4         Load $C4 into VB                              W:[11]
    $62E    $2F13   CALL     $F13            Call subroutine at $F13                       
    $630    $0B3C   NOP      $0B3C           No operation (ignored by CUDA kernel)         
    $632    $B285   JP       V0, $285        Jump to $285 + V0                             R:[0]
    $634    $D9A8   DRW      V9, VA, #8      Draw 8-byte sprite at (V9, VA), VF = collision W:[15] R:[9, 10]
>>> $636    $4429   SNE      V4, #29         Skip next instruction if V4 != $29            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
>>> $638    $44BE   SNE      V4, #BE         Skip next instruction if V4 != $BE            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $63A    $BE13   JP       V0, $E13        Jump to $E13 + V0                             R:[0]
    $63C    $A0A5   LD       I, $0A5         Load $0A5 into I register                     
    $63E    $2351   CALL     $351            Call subroutine at $351                       
    $640    $E35E   UNKNOWN  $E35E           Unknown Exxx instruction (crashes in CUDA)    
>>> $642    $6546   LD       V5, #46         Load $46 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $644    $BF9D   JP       V0, $F9D        Jump to $F9D + V0                             R:[0]
    $646    $5404   UNKNOWN  $5404           Unknown 5xxx instruction (crashes in CUDA)    
    $648    $81CE   SHL      V1              V1 = (V1 << 1) & 0xFF, VF = MSB               W:[1, 15] R:[1]
    $64A    $FC2A   UNKNOWN  $FC2A           Unknown Fxxx instruction (crashes in CUDA)    
>>> $64C    $4666   SNE      V6, #66         Skip next instruction if V6 != $66            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $64E    $6BE0   LD       VB, #E0         Load $E0 into VB                              W:[11]
    $650    $51F7   UNKNOWN  $51F7           Unknown 5xxx instruction (crashes in CUDA)    
    $652    $EFAD   UNKNOWN  $EFAD           Unknown Exxx instruction (crashes in CUDA)    
>>> $654    $465B   SNE      V6, #5B         Skip next instruction if V6 != $5B            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $656    $B012   JP       V0, $012        Jump to $012 + V0                             R:[0]
>>> $658    $C438   RND      V4, #38         V4 = random() AND $38                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $65A    $D9AE   DRW      V9, VA, #E      Draw 14-byte sprite at (V9, VA), VF = collision W:[15] R:[9, 10]
>>> $65C    $3716   SE       V7, #16         Skip next instruction if V7 == $16            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $65E    $E9C0   UNKNOWN  $E9C0           Unknown Exxx instruction (crashes in CUDA)    
    $660    $80BE   SHL      V0              V0 = (V0 << 1) & 0xFF, VF = MSB               W:[0, 15] R:[0]
    $662    $DA7A   DRW      VA, V7, #A      Draw 10-byte sprite at (VA, V7), VF = collision W:[15] R:[7, 10]
>>> $664    $C71E   RND      V7, #1E         V7 = random() AND $1E                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
>>> $666    $34F5   SE       V4, #F5         Skip next instruction if V4 == $F5            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $668    $A8AD   LD       I, $8AD         Load $8AD into I register                     
    $66A    $A342   LD       I, $342         Load $342 into I register                     
    $66C    $DDFE   DRW      VD, VF, #E      Draw 14-byte sprite at (VD, VF), VF = collision W:[15] R:[13, 15]
    $66E    $2C98   CALL     $C98            Call subroutine at $C98                       
    $670    $DB23   DRW      VB, V2, #3      Draw 3-byte sprite at (VB, V2), VF = collision W:[15] R:[2, 11]
    $672    $1803   JP       $803            Jump to address $803                          
    $674    $71B0   ADD      V1, #B0         Add $B0 to V1 (V1 = (V1 + $B0) & 0xFF)        W:[1] R:[1]
    $676    $2BF8   CALL     $BF8            Call subroutine at $BF8                       
    $678    $0171   NOP      $0171           No operation (ignored by CUDA kernel)         
    $67A    $4840   SNE      V8, #40         Skip next instruction if V8 != $40            R:[8]
    $67C    $7FDD   ADD      VF, #DD         Add $DD to VF (VF = (VF + $DD) & 0xFF)        W:[15] R:[15]
    $67E    $92EF   UNKNOWN  $92EF           Unknown 9xxx instruction (crashes in CUDA)    
    $680    $3B65   SE       VB, #65         Skip next instruction if VB == $65            R:[11]
    $682    $6DF1   LD       VD, #F1         Load $F1 into VD                              W:[13]
    $684    $E321   UNKNOWN  $E321           Unknown Exxx instruction (crashes in CUDA)    
    $686    $9CA8   UNKNOWN  $9CA8           Unknown 9xxx instruction (crashes in CUDA)    
    $688    $30CB   SE       V0, #CB         Skip next instruction if V0 == $CB            R:[0]
>>> $68A    $7536   ADD      V5, #36         Add $36 to V5 (V5 = (V5 + $36) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $68C    $9FC6   UNKNOWN  $9FC6           Unknown 9xxx instruction (crashes in CUDA)    
    $68E    $EC60   UNKNOWN  $EC60           Unknown Exxx instruction (crashes in CUDA)    
    $690    $815D   UNKNOWN  $815D           Unknown 8xxx instruction (crashes in CUDA)    
>>> $692    $63A6   LD       V3, #A6         Load $A6 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $694    $6012   LD       V0, #12         Load $12 into V0                              W:[0]
    $696    $E1C0   UNKNOWN  $E1C0           Unknown Exxx instruction (crashes in CUDA)    
    $698    $F1AD   UNKNOWN  $F1AD           Unknown Fxxx instruction (crashes in CUDA)    
    $69A    $03E0   NOP      $03E0           No operation (ignored by CUDA kernel)         
    $69C    $7DD5   ADD      VD, #D5         Add $D5 to VD (VD = (VD + $D5) & 0xFF)        W:[13] R:[13]
    $69E    $DD2E   DRW      VD, V2, #E      Draw 14-byte sprite at (VD, V2), VF = collision W:[15] R:[2, 13]
>>> $6A0    $3463   SE       V4, #63         Skip next instruction if V4 == $63            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $6A2    $F92C   UNKNOWN  $F92C           Unknown Fxxx instruction (crashes in CUDA)    
    $6A4    $CADE   RND      VA, #DE         VA = random() AND $DE                         W:[10]
    $6A6    $0BB4   NOP      $0BB4           No operation (ignored by CUDA kernel)         
>>> $6A8    $73D8   ADD      V3, #D8         Add $D8 to V3 (V3 = (V3 + $D8) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $6AA    $435B   SNE      V3, #5B         Skip next instruction if V3 != $5B            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
>>> $6AC    $831E   SHL      V3              V3 = (V3 << 1) & 0xFF, VF = MSB               W:[3, 15] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $6AE    $C695   RND      V6, #95         V6 = random() AND $95                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $6B0    $05AF   NOP      $05AF           No operation (ignored by CUDA kernel)         
    $6B2    $A6A5   LD       I, $6A5         Load $6A5 into I register                     
>>> $6B4    $37B3   SE       V7, #B3         Skip next instruction if V7 == $B3            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $6B6    $8EF7   SUBN     VE, VF          VE = (VF - VE) & 0xFF, VF = NOT borrow        W:[14, 15] R:[14, 15]
    $6B8    $A8B1   LD       I, $8B1         Load $8B1 into I register                     
    $6BA    $4D88   SNE      VD, #88         Skip next instruction if VD != $88            R:[13]
    $6BC    $7B7F   ADD      VB, #7F         Add $7F to VB (VB = (VB + $7F) & 0xFF)        W:[11] R:[11]
>>> $6BE    $C5BD   RND      V5, #BD         V5 = random() AND $BD                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $6C0    $5B93   UNKNOWN  $5B93           Unknown 5xxx instruction (crashes in CUDA)    
    $6C2    $D8EC   DRW      V8, VE, #C      Draw 12-byte sprite at (V8, VE), VF = collision W:[15] R:[8, 14]
    $6C4    $D823   DRW      V8, V2, #3      Draw 3-byte sprite at (V8, V2), VF = collision W:[15] R:[2, 8]
>>> $6C6    $648A   LD       V4, #8A         Load $8A into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $6C8    $114C   JP       $14C            Jump to address $14C                          
    $6CA    $0B40   NOP      $0B40           No operation (ignored by CUDA kernel)         
    $6CC    $25B8   CALL     $5B8            Call subroutine at $5B8                       
>>> $6CE    $62CA   LD       V2, #CA         Load $CA into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $6D0    $5587   UNKNOWN  $5587           Unknown 5xxx instruction (crashes in CUDA)    
>>> $6D2    $7458   ADD      V4, #58         Add $58 to V4 (V4 = (V4 + $58) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
>>> $6D4    $66A9   LD       V6, #A9         Load $A9 into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $6D6    $247F   CALL     $47F            Call subroutine at $47F                       
    $6D8    $99EC   UNKNOWN  $99EC           Unknown 9xxx instruction (crashes in CUDA)    
    $6DA    $0E22   NOP      $0E22           No operation (ignored by CUDA kernel)         
    $6DC    $A13E   LD       I, $13E         Load $13E into I register                     
>>> $6DE    $673E   LD       V7, #3E         Load $3E into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $6E0    $5637   UNKNOWN  $5637           Unknown 5xxx instruction (crashes in CUDA)    
    $6E2    $F1A8   UNKNOWN  $F1A8           Unknown Fxxx instruction (crashes in CUDA)    
    $6E4    $ACFB   LD       I, $CFB         Load $CFB into I register                     
    $6E6    $DB8E   DRW      VB, V8, #E      Draw 14-byte sprite at (VB, V8), VF = collision W:[15] R:[8, 11]
>>> $6E8    $4703   SNE      V7, #03         Skip next instruction if V7 != $03            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $6EA    $88D5   SUB      V8, VD          V8 = (V8 - VD) & 0xFF, VF = NOT borrow        W:[8, 15] R:[8, 13]
    $6EC    $2AAA   CALL     $AAA            Call subroutine at $AAA                       
    $6EE    $5672   UNKNOWN  $5672           Unknown 5xxx instruction (crashes in CUDA)    
    $6F0    $24C3   CALL     $4C3            Call subroutine at $4C3                       
    $6F2    $1CAA   JP       $CAA            Jump to address $CAA                          
    $6F4    $9CCD   UNKNOWN  $9CCD           Unknown 9xxx instruction (crashes in CUDA)    
    $6F6    $8E13   XOR      VE, V1          VE = VE XOR V1, VF = 0                        W:[14, 15] R:[1, 14]
    $6F8    $0556   NOP      $0556           No operation (ignored by CUDA kernel)         
    $6FA    $275E   CALL     $75E            Call subroutine at $75E                       
    $6FC    $0ACB   NOP      $0ACB           No operation (ignored by CUDA kernel)         
    $6FE    $395E   SE       V9, #5E         Skip next instruction if V9 == $5E            R:[9]
    $700    $790A   ADD      V9, #0A         Add $0A to V9 (V9 = (V9 + $0A) & 0xFF)        W:[9] R:[9]
>>> $702    $446A   SNE      V4, #6A         Skip next instruction if V4 != $6A            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $704    $0678   NOP      $0678           No operation (ignored by CUDA kernel)         
>>> $706    $8611   OR       V6, V1          V6 = V6 OR V1, VF = 0                         W:[6, 15] R:[1, 6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $708    $50DC   UNKNOWN  $50DC           Unknown 5xxx instruction (crashes in CUDA)    
    $70A    $B622   JP       V0, $622        Jump to $622 + V0                             R:[0]
    $70C    $89A6   SHR      V9              V9 = V9 >> 1, VF = LSB                        W:[9, 15] R:[9]
    $70E    $5965   UNKNOWN  $5965           Unknown 5xxx instruction (crashes in CUDA)    
    $710    $56F2   UNKNOWN  $56F2           Unknown 5xxx instruction (crashes in CUDA)    
>>> $712    $765D   ADD      V6, #5D         Add $5D to V6 (V6 = (V6 + $5D) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $714    $9CF2   UNKNOWN  $9CF2           Unknown 9xxx instruction (crashes in CUDA)    
    $716    $8288   UNKNOWN  $8288           Unknown 8xxx instruction (crashes in CUDA)    
    $718    $4ABB   SNE      VA, #BB         Skip next instruction if VA != $BB            R:[10]
    $71A    $5683   UNKNOWN  $5683           Unknown 5xxx instruction (crashes in CUDA)    
    $71C    $C107   RND      V1, #07         V1 = random() AND $07                         W:[1]
    $71E    $8D0F   UNKNOWN  $8D0F           Unknown 8xxx instruction (crashes in CUDA)    
    $720    $1306   JP       $306            Jump to address $306                          
    $722    $894E   SHL      V9              V9 = (V9 << 1) & 0xFF, VF = MSB               W:[9, 15] R:[9]
    $724    $3823   SE       V8, #23         Skip next instruction if V8 == $23            R:[8]
    $726    $9417   UNKNOWN  $9417           Unknown 9xxx instruction (crashes in CUDA)    
    $728    $4ACB   SNE      VA, #CB         Skip next instruction if VA != $CB            R:[10]
>>> $72A    $8761   OR       V7, V6          V7 = V7 OR V6, VF = 0                         W:[7, 15] R:[6, 7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $72C    $9BE0   SNE      VB, VE          Skip next instruction if VB != VE             R:[11, 14]
    $72E    $5D25   UNKNOWN  $5D25           Unknown 5xxx instruction (crashes in CUDA)    
>>> $730    $7344   ADD      V3, #44         Add $44 to V3 (V3 = (V3 + $44) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $732    $5AEF   UNKNOWN  $5AEF           Unknown 5xxx instruction (crashes in CUDA)    
    $734    $310E   SE       V1, #0E         Skip next instruction if V1 == $0E            R:[1]
    $736    $7C29   ADD      VC, #29         Add $29 to VC (VC = (VC + $29) & 0xFF)        W:[12] R:[12]
    $738    $9A6C   UNKNOWN  $9A6C           Unknown 9xxx instruction (crashes in CUDA)    
    $73A    $0E2A   NOP      $0E2A           No operation (ignored by CUDA kernel)         
    $73C    $AD9C   LD       I, $D9C         Load $D9C into I register                     
>>> $73E    $656C   LD       V5, #6C         Load $6C into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $740    $2EE1   CALL     $EE1            Call subroutine at $EE1                       
    $742    $D942   DRW      V9, V4, #2      Draw 2-byte sprite at (V9, V4), VF = collision W:[15] R:[4, 9]
>>> $744    $64BE   LD       V4, #BE         Load $BE into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $746    $52F9   UNKNOWN  $52F9           Unknown 5xxx instruction (crashes in CUDA)    
    $748    $79BF   ADD      V9, #BF         Add $BF to V9 (V9 = (V9 + $BF) & 0xFF)        W:[9] R:[9]
>>> $74A    $46D8   SNE      V6, #D8         Skip next instruction if V6 != $D8            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $74C    $B3FB   JP       V0, $3FB        Jump to $3FB + V0                             R:[0]
    $74E    $BFE1   JP       V0, $FE1        Jump to $FE1 + V0                             R:[0]
    $750    $B812   JP       V0, $812        Jump to $812 + V0                             R:[0]
    $752    $10E0   JP       $0E0            Jump to address $0E0                          
    $754    $7053   ADD      V0, #53         Add $53 to V0 (V0 = (V0 + $53) & 0xFF)        W:[0] R:[0]
    $756    $1576   JP       $576            Jump to address $576                          
    $758    $D028   DRW      V0, V2, #8      Draw 8-byte sprite at (V0, V2), VF = collision W:[15] R:[0, 2]
    $75A    $12FF   JP       $2FF            Jump to address $2FF                          
    $75C    $6E05   LD       VE, #05         Load $05 into VE                              W:[14]
    $75E    $1297   JP       $297            Jump to address $297                          
>>> $760    $33CF   SE       V3, #CF         Skip next instruction if V3 == $CF            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $762    $CF8B   RND      VF, #8B         VF = random() AND $8B                         W:[15]
    $764    $4BFA   SNE      VB, #FA         Skip next instruction if VB != $FA            R:[11]
    $766    $4B9D   SNE      VB, #9D         Skip next instruction if VB != $9D            R:[11]
    $768    $0462   NOP      $0462           No operation (ignored by CUDA kernel)         
    $76A    $A03D   LD       I, $03D         Load $03D into I register                     
    $76C    $DA77   DRW      VA, V7, #7      Draw 7-byte sprite at (VA, V7), VF = collision W:[15] R:[7, 10]
    $76E    $DF1D   DRW      VF, V1, #D      Draw 13-byte sprite at (VF, V1), VF = collision W:[15] R:[1, 15]
    $770    $A86B   LD       I, $86B         Load $86B into I register                     
>>> $772    $66EA   LD       V6, #EA         Load $EA into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $774    $E0FE   UNKNOWN  $E0FE           Unknown Exxx instruction (crashes in CUDA)    
>>> $776    $C48C   RND      V4, #8C         V4 = random() AND $8C                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $778    $A18D   LD       I, $18D         Load $18D into I register                     
>>> $77A    $C728   RND      V7, #28         V7 = random() AND $28                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $77C    $273D   CALL     $73D            Call subroutine at $73D                       
>>> $77E    $33DC   SE       V3, #DC         Skip next instruction if V3 == $DC            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
>>> $780    $8412   AND      V4, V1          V4 = V4 AND V1, VF = 0                        W:[4, 15] R:[1, 4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $782    $7A5A   ADD      VA, #5A         Add $5A to VA (VA = (VA + $5A) & 0xFF)        W:[10] R:[10]
    $784    $FCA8   UNKNOWN  $FCA8           Unknown Fxxx instruction (crashes in CUDA)    
    $786    $9592   UNKNOWN  $9592           Unknown 9xxx instruction (crashes in CUDA)    
    $788    $5E86   UNKNOWN  $5E86           Unknown 5xxx instruction (crashes in CUDA)    
>>> $78A    $84E0   LD       V4, VE          Load VE into V4                               W:[4] R:[14]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $78C    $80DC   UNKNOWN  $80DC           Unknown 8xxx instruction (crashes in CUDA)    
    $78E    $7093   ADD      V0, #93         Add $93 to V0 (V0 = (V0 + $93) & 0xFF)        W:[0] R:[0]
>>> $790    $62A9   LD       V2, #A9         Load $A9 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $792    $597F   UNKNOWN  $597F           Unknown 5xxx instruction (crashes in CUDA)    
    $794    $BFFC   JP       V0, $FFC        Jump to $FFC + V0                             R:[0]
>>> $796    $634D   LD       V3, #4D         Load $4D into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $798    $B94D   JP       V0, $94D        Jump to $94D + V0                             R:[0]
    $79A    $0794   NOP      $0794           No operation (ignored by CUDA kernel)         
    $79C    $7C36   ADD      VC, #36         Add $36 to VC (VC = (VC + $36) & 0xFF)        W:[12] R:[12]
    $79E    $AC8F   LD       I, $C8F         Load $C8F into I register                     
    $7A0    $4EAA   SNE      VE, #AA         Skip next instruction if VE != $AA            R:[14]
    $7A2    $9627   UNKNOWN  $9627           Unknown 9xxx instruction (crashes in CUDA)    
    $7A4    $B2FB   JP       V0, $2FB        Jump to $2FB + V0                             R:[0]
    $7A6    $5415   UNKNOWN  $5415           Unknown 5xxx instruction (crashes in CUDA)    
    $7A8    $D4DE   DRW      V4, VD, #E      Draw 14-byte sprite at (V4, VD), VF = collision W:[15] R:[4, 13]
    $7AA    $3B66   SE       VB, #66         Skip next instruction if VB == $66            R:[11]
    $7AC    $7912   ADD      V9, #12         Add $12 to V9 (V9 = (V9 + $12) & 0xFF)        W:[9] R:[9]
    $7AE    $D436   DRW      V4, V3, #6      Draw 6-byte sprite at (V4, V3), VF = collision W:[15] R:[3, 4]
>>> $7B0    $C763   RND      V7, #63         V7 = random() AND $63                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $7B2    $9D88   UNKNOWN  $9D88           Unknown 9xxx instruction (crashes in CUDA)    
    $7B4    $BF94   JP       V0, $F94        Jump to $F94 + V0                             R:[0]
    $7B6    $17CB   JP       $7CB            Jump to address $7CB                          
    $7B8    $D7A6   DRW      V7, VA, #6      Draw 6-byte sprite at (V7, VA), VF = collision W:[15] R:[7, 10]
    $7BA    $5B95   UNKNOWN  $5B95           Unknown 5xxx instruction (crashes in CUDA)    
    $7BC    $BF47   JP       V0, $F47        Jump to $F47 + V0                             R:[0]
    $7BE    $587F   UNKNOWN  $587F           Unknown 5xxx instruction (crashes in CUDA)    
    $7C0    $0C51   NOP      $0C51           No operation (ignored by CUDA kernel)         
    $7C2    $8A95   SUB      VA, V9          VA = (VA - V9) & 0xFF, VF = NOT borrow        W:[10, 15] R:[9, 10]
    $7C4    $5753   UNKNOWN  $5753           Unknown 5xxx instruction (crashes in CUDA)    
>>> $7C6    $43F6   SNE      V3, #F6         Skip next instruction if V3 != $F6            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $7C8    $0679   NOP      $0679           No operation (ignored by CUDA kernel)         
    $7CA    $AA7F   LD       I, $A7F         Load $A7F into I register                     
    $7CC    $03B2   NOP      $03B2           No operation (ignored by CUDA kernel)         
    $7CE    $A61A   LD       I, $61A         Load $61A into I register                     
    $7D0    $CA6E   RND      VA, #6E         VA = random() AND $6E                         W:[10]
    $7D2    $DF42   DRW      VF, V4, #2      Draw 2-byte sprite at (VF, V4), VF = collision W:[15] R:[4, 15]
    $7D4    $08AB   NOP      $08AB           No operation (ignored by CUDA kernel)         
    $7D6    $5AA9   UNKNOWN  $5AA9           Unknown 5xxx instruction (crashes in CUDA)    
    $7D8    $105A   JP       $05A            Jump to address $05A                          
    $7DA    $5C7B   UNKNOWN  $5C7B           Unknown 5xxx instruction (crashes in CUDA)    
    $7DC    $B4AF   JP       V0, $4AF        Jump to $4AF + V0                             R:[0]
    $7DE    $276A   CALL     $76A            Call subroutine at $76A                       
    $7E0    $50FC   UNKNOWN  $50FC           Unknown 5xxx instruction (crashes in CUDA)    
    $7E2    $1A91   JP       $A91            Jump to address $A91                          
    $7E4    $7E01   ADD      VE, #01         Add $01 to VE (VE = (VE + $01) & 0xFF)        W:[14] R:[14]
    $7E6    $6A7E   LD       VA, #7E         Load $7E into VA                              W:[10]
    $7E8    $79A5   ADD      V9, #A5         Add $A5 to V9 (V9 = (V9 + $A5) & 0xFF)        W:[9] R:[9]
    $7EA    $C0AD   RND      V0, #AD         V0 = random() AND $AD                         W:[0]
    $7EC    $CE74   RND      VE, #74         VE = random() AND $74                         W:[14]
>>> $7EE    $3567   SE       V5, #67         Skip next instruction if V5 == $67            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $7F0    $3D2F   SE       VD, #2F         Skip next instruction if VD == $2F            R:[13]
    $7F2    $3874   SE       V8, #74         Skip next instruction if V8 == $74            R:[8]
    $7F4    $9E72   UNKNOWN  $9E72           Unknown 9xxx instruction (crashes in CUDA)    
    $7F6    $49F4   SNE      V9, #F4         Skip next instruction if V9 != $F4            R:[9]
>>> $7F8    $3463   SE       V4, #63         Skip next instruction if V4 == $63            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $7FA    $EE3B   UNKNOWN  $EE3B           Unknown Exxx instruction (crashes in CUDA)    
    $7FC    $BBAC   JP       V0, $BAC        Jump to $BAC + V0                             R:[0]
    $7FE    $A6BD   LD       I, $6BD         Load $6BD into I register                     
>>> $800    $34EC   SE       V4, #EC         Skip next instruction if V4 == $EC            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $802    $E894   UNKNOWN  $E894           Unknown Exxx instruction (crashes in CUDA)    
    $804    $FE16   UNKNOWN  $FE16           Unknown Fxxx instruction (crashes in CUDA)    
>>> $806    $6212   LD       V2, #12         Load $12 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $808    $B762   JP       V0, $762        Jump to $762 + V0                             R:[0]
    $80A    $3970   SE       V9, #70         Skip next instruction if V9 == $70            R:[9]
    $80C    $27A0   CALL     $7A0            Call subroutine at $7A0                       
>>> $80E    $67C1   LD       V7, #C1         Load $C1 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $810    $97B6   UNKNOWN  $97B6           Unknown 9xxx instruction (crashes in CUDA)    
>>> $812    $3481   SE       V4, #81         Skip next instruction if V4 == $81            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $814    $3D27   SE       VD, #27         Skip next instruction if VD == $27            R:[13]
    $816    $611A   LD       V1, #1A         Load $1A into V1                              W:[1]
    $818    $E2E6   UNKNOWN  $E2E6           Unknown Exxx instruction (crashes in CUDA)    
>>> $81A    $C6D1   RND      V6, #D1         V6 = random() AND $D1                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $81C    $4FB4   SNE      VF, #B4         Skip next instruction if VF != $B4            R:[15]
    $81E    $2247   CALL     $247            Call subroutine at $247                       
    $820    $F8D2   UNKNOWN  $F8D2           Unknown Fxxx instruction (crashes in CUDA)    
    $822    $ABA5   LD       I, $BA5         Load $BA5 into I register                     
    $824    $FE71   UNKNOWN  $FE71           Unknown Fxxx instruction (crashes in CUDA)    
    $826    $073C   NOP      $073C           No operation (ignored by CUDA kernel)         
    $828    $22E5   CALL     $2E5            Call subroutine at $2E5                       
    $82A    $69ED   LD       V9, #ED         Load $ED into V9                              W:[9]
    $82C    $9B02   UNKNOWN  $9B02           Unknown 9xxx instruction (crashes in CUDA)    
    $82E    $7F24   ADD      VF, #24         Add $24 to VF (VF = (VF + $24) & 0xFF)        W:[15] R:[15]
    $830    $56CB   UNKNOWN  $56CB           Unknown 5xxx instruction (crashes in CUDA)    
    $832    $8C59   UNKNOWN  $8C59           Unknown 8xxx instruction (crashes in CUDA)    
    $834    $31A7   SE       V1, #A7         Skip next instruction if V1 == $A7            R:[1]
    $836    $E2D6   UNKNOWN  $E2D6           Unknown Exxx instruction (crashes in CUDA)    
    $838    $58F7   UNKNOWN  $58F7           Unknown 5xxx instruction (crashes in CUDA)    
    $83A    $5DBC   UNKNOWN  $5DBC           Unknown 5xxx instruction (crashes in CUDA)    
    $83C    $15E5   JP       $5E5            Jump to address $5E5                          
    $83E    $7E3D   ADD      VE, #3D         Add $3D to VE (VE = (VE + $3D) & 0xFF)        W:[14] R:[14]
    $840    $9D07   UNKNOWN  $9D07           Unknown 9xxx instruction (crashes in CUDA)    
    $842    $E554   UNKNOWN  $E554           Unknown Exxx instruction (crashes in CUDA)    
    $844    $BEED   JP       V0, $EED        Jump to $EED + V0                             R:[0]
    $846    $F267   UNKNOWN  $F267           Unknown Fxxx instruction (crashes in CUDA)    
>>> $848    $6710   LD       V7, #10         Load $10 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $84A    $9448   UNKNOWN  $9448           Unknown 9xxx instruction (crashes in CUDA)    
>>> $84C    $646C   LD       V4, #6C         Load $6C into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $84E    $3B05   SE       VB, #05         Skip next instruction if VB == $05            R:[11]
    $850    $B0B8   JP       V0, $0B8        Jump to $0B8 + V0                             R:[0]
    $852    $E85C   UNKNOWN  $E85C           Unknown Exxx instruction (crashes in CUDA)    
    $854    $1C90   JP       $C90            Jump to address $C90                          
    $856    $D77A   DRW      V7, V7, #A      Draw 10-byte sprite at (V7, V7), VF = collision W:[15] R:[7]
    $858    $3CB0   SE       VC, #B0         Skip next instruction if VC == $B0            R:[12]
    $85A    $6EF5   LD       VE, #F5         Load $F5 into VE                              W:[14]
    $85C    $CCEC   RND      VC, #EC         VC = random() AND $EC                         W:[12]
    $85E    $4E55   SNE      VE, #55         Skip next instruction if VE != $55            R:[14]
    $860    $C1F1   RND      V1, #F1         V1 = random() AND $F1                         W:[1]
    $862    $39BA   SE       V9, #BA         Skip next instruction if V9 == $BA            R:[9]
    $864    $A665   LD       I, $665         Load $665 into I register                     
    $866    $FF4C   UNKNOWN  $FF4C           Unknown Fxxx instruction (crashes in CUDA)    
>>> $868    $36FA   SE       V6, #FA         Skip next instruction if V6 == $FA            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $86A    $4BCA   SNE      VB, #CA         Skip next instruction if VB != $CA            R:[11]
    $86C    $F4BD   UNKNOWN  $F4BD           Unknown Fxxx instruction (crashes in CUDA)    
    $86E    $9B51   UNKNOWN  $9B51           Unknown 9xxx instruction (crashes in CUDA)    
    $870    $1078   JP       $078            Jump to address $078                          
    $872    $89E7   SUBN     V9, VE          V9 = (VE - V9) & 0xFF, VF = NOT borrow        W:[9, 15] R:[9, 14]
>>> $874    $67C8   LD       V7, #C8         Load $C8 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $876    $5CD1   UNKNOWN  $5CD1           Unknown 5xxx instruction (crashes in CUDA)    
    $878    $4CD4   SNE      VC, #D4         Skip next instruction if VC != $D4            R:[12]
    $87A    $6156   LD       V1, #56         Load $56 into V1                              W:[1]
    $87C    $996B   UNKNOWN  $996B           Unknown 9xxx instruction (crashes in CUDA)    
    $87E    $F7B3   UNKNOWN  $F7B3           Unknown Fxxx instruction (crashes in CUDA)    
    $880    $F71B   UNKNOWN  $F71B           Unknown Fxxx instruction (crashes in CUDA)    
    $882    $AAD7   LD       I, $AD7         Load $AD7 into I register                     
    $884    $09F2   NOP      $09F2           No operation (ignored by CUDA kernel)         
    $886    $829F   UNKNOWN  $829F           Unknown 8xxx instruction (crashes in CUDA)    
>>> $888    $C645   RND      V6, #45         V6 = random() AND $45                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $88A    $E60C   UNKNOWN  $E60C           Unknown Exxx instruction (crashes in CUDA)    
    $88C    $EE89   UNKNOWN  $EE89           Unknown Exxx instruction (crashes in CUDA)    
    $88E    $6FD8   LD       VF, #D8         Load $D8 into VF                              W:[15]
    $890    $AF8E   LD       I, $F8E         Load $F8E into I register                     
>>> $892    $C79D   RND      V7, #9D         V7 = random() AND $9D                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
>>> $894    $C60A   RND      V6, #0A         V6 = random() AND $0A                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $896    $12DC   JP       $2DC            Jump to address $2DC                          
    $898    $1C15   JP       $C15            Jump to address $C15                          
    $89A    $F6A3   UNKNOWN  $F6A3           Unknown Fxxx instruction (crashes in CUDA)    
    $89C    $31E8   SE       V1, #E8         Skip next instruction if V1 == $E8            R:[1]
    $89E    $6CD0   LD       VC, #D0         Load $D0 into VC                              W:[12]
    $8A0    $12E8   JP       $2E8            Jump to address $2E8                          
>>> $8A2    $8470   LD       V4, V7          Load V7 into V4                               W:[4] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $8A4    $CC45   RND      VC, #45         VC = random() AND $45                         W:[12]
>>> $8A6    $65D8   LD       V5, #D8         Load $D8 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $8A8    $D59C   DRW      V5, V9, #C      Draw 12-byte sprite at (V5, V9), VF = collision W:[15] R:[5, 9]
    $8AA    $EBD7   UNKNOWN  $EBD7           Unknown Exxx instruction (crashes in CUDA)    
    $8AC    $8A38   UNKNOWN  $8A38           Unknown 8xxx instruction (crashes in CUDA)    
    $8AE    $1516   JP       $516            Jump to address $516                          
    $8B0    $FA89   UNKNOWN  $FA89           Unknown Fxxx instruction (crashes in CUDA)    
    $8B2    $5F35   UNKNOWN  $5F35           Unknown 5xxx instruction (crashes in CUDA)    
    $8B4    $F19D   UNKNOWN  $F19D           Unknown Fxxx instruction (crashes in CUDA)    
    $8B6    $7EA3   ADD      VE, #A3         Add $A3 to VE (VE = (VE + $A3) & 0xFF)        W:[14] R:[14]
    $8B8    $D97F   DRW      V9, V7, #F      Draw 15-byte sprite at (V9, V7), VF = collision W:[15] R:[7, 9]
    $8BA    $5A25   UNKNOWN  $5A25           Unknown 5xxx instruction (crashes in CUDA)    
    $8BC    $3E7D   SE       VE, #7D         Skip next instruction if VE == $7D            R:[14]
>>> $8BE    $4456   SNE      V4, #56         Skip next instruction if V4 != $56            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $8C0    $3C25   SE       VC, #25         Skip next instruction if VC == $25            R:[12]
    $8C2    $A5FB   LD       I, $5FB         Load $5FB into I register                     
    $8C4    $31E7   SE       V1, #E7         Skip next instruction if V1 == $E7            R:[1]
    $8C6    $8E00   LD       VE, V0          Load V0 into VE                               W:[14] R:[0]
    $8C8    $EB48   UNKNOWN  $EB48           Unknown Exxx instruction (crashes in CUDA)    
    $8CA    $19AC   JP       $9AC            Jump to address $9AC                          
    $8CC    $AAEB   LD       I, $AEB         Load $AEB into I register                     
>>> $8CE    $321C   SE       V2, #1C         Skip next instruction if V2 == $1C            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $8D0    $7C20   ADD      VC, #20         Add $20 to VC (VC = (VC + $20) & 0xFF)        W:[12] R:[12]
    $8D2    $6CD3   LD       VC, #D3         Load $D3 into VC                              W:[12]
    $8D4    $D9B5   DRW      V9, VB, #5      Draw 5-byte sprite at (V9, VB), VF = collision W:[15] R:[9, 11]
>>> $8D6    $6229   LD       V2, #29         Load $29 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $8D8    $F8A4   UNKNOWN  $F8A4           Unknown Fxxx instruction (crashes in CUDA)    
    $8DA    $AA27   LD       I, $A27         Load $A27 into I register                     
    $8DC    $3E18   SE       VE, #18         Skip next instruction if VE == $18            R:[14]
    $8DE    $B19E   JP       V0, $19E        Jump to $19E + V0                             R:[0]
    $8E0    $0384   NOP      $0384           No operation (ignored by CUDA kernel)         
>>> $8E2    $8131   OR       V1, V3          V1 = V1 OR V3, VF = 0                         W:[1, 15] R:[1, 3]
          ^-- SORTING RELATED: Logical operation on V[3] (sets VF=0 in CUDA)
    $8E4    $E5F6   UNKNOWN  $E5F6           Unknown Exxx instruction (crashes in CUDA)    
    $8E6    $FB64   UNKNOWN  $FB64           Unknown Fxxx instruction (crashes in CUDA)    
    $8E8    $4A45   SNE      VA, #45         Skip next instruction if VA != $45            R:[10]
    $8EA    $A3DA   LD       I, $3DA         Load $3DA into I register                     
    $8EC    $5E89   UNKNOWN  $5E89           Unknown 5xxx instruction (crashes in CUDA)    
>>> $8EE    $357B   SE       V5, #7B         Skip next instruction if V5 == $7B            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $8F0    $C9B1   RND      V9, #B1         V9 = random() AND $B1                         W:[9]
    $8F2    $7CEC   ADD      VC, #EC         Add $EC to VC (VC = (VC + $EC) & 0xFF)        W:[12] R:[12]
    $8F4    $DBA2   DRW      VB, VA, #2      Draw 2-byte sprite at (VB, VA), VF = collision W:[15] R:[10, 11]
    $8F6    $5815   UNKNOWN  $5815           Unknown 5xxx instruction (crashes in CUDA)    
    $8F8    $D204   DRW      V2, V0, #4      Draw 4-byte sprite at (V2, V0), VF = collision W:[15] R:[0, 2]
    $8FA    $6920   LD       V9, #20         Load $20 into V9                              W:[9]
    $8FC    $3D42   SE       VD, #42         Skip next instruction if VD == $42            R:[13]
>>> $8FE    $6777   LD       V7, #77         Load $77 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $900    $2D5F   CALL     $D5F            Call subroutine at $D5F                       
    $902    $ED14   UNKNOWN  $ED14           Unknown Exxx instruction (crashes in CUDA)    
>>> $904    $83C1   OR       V3, VC          V3 = V3 OR VC, VF = 0                         W:[3, 15] R:[3, 12]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $906    $013B   NOP      $013B           No operation (ignored by CUDA kernel)         
    $908    $554B   UNKNOWN  $554B           Unknown 5xxx instruction (crashes in CUDA)    
    $90A    $7EA9   ADD      VE, #A9         Add $A9 to VE (VE = (VE + $A9) & 0xFF)        W:[14] R:[14]
    $90C    $F684   UNKNOWN  $F684           Unknown Fxxx instruction (crashes in CUDA)    
    $90E    $EFCF   UNKNOWN  $EFCF           Unknown Exxx instruction (crashes in CUDA)    
>>> $910    $3515   SE       V5, #15         Skip next instruction if V5 == $15            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $912    $3C7F   SE       VC, #7F         Skip next instruction if VC == $7F            R:[12]
    $914    $DC41   DRW      VC, V4, #1      Draw 1-byte sprite at (VC, V4), VF = collision W:[15] R:[4, 12]
    $916    $51E7   UNKNOWN  $51E7           Unknown 5xxx instruction (crashes in CUDA)    
    $918    $00E9   NOP      $00E9           No operation (ignored by CUDA kernel)         
    $91A    $B84A   JP       V0, $84A        Jump to $84A + V0                             R:[0]
    $91C    $68B4   LD       V8, #B4         Load $B4 into V8                              W:[8]
    $91E    $8628   UNKNOWN  $8628           Unknown 8xxx instruction (crashes in CUDA)    
    $920    $2D65   CALL     $D65            Call subroutine at $D65                       
    $922    $69C3   LD       V9, #C3         Load $C3 into V9                              W:[9]
    $924    $97F1   UNKNOWN  $97F1           Unknown 9xxx instruction (crashes in CUDA)    
    $926    $2132   CALL     $132            Call subroutine at $132                       
>>> $928    $8E40   LD       VE, V4          Load V4 into VE                               W:[14] R:[4]
          ^-- SORTING RELATED: Register transfer involving V[4]
    $92A    $E208   UNKNOWN  $E208           Unknown Exxx instruction (crashes in CUDA)    
    $92C    $A25E   LD       I, $25E         Load $25E into I register                     
    $92E    $DA8A   DRW      VA, V8, #A      Draw 10-byte sprite at (VA, V8), VF = collision W:[15] R:[8, 10]
    $930    $0CE8   NOP      $0CE8           No operation (ignored by CUDA kernel)         
    $932    $30D2   SE       V0, #D2         Skip next instruction if V0 == $D2            R:[0]
    $934    $6D89   LD       VD, #89         Load $89 into VD                              W:[13]
    $936    $10BC   JP       $0BC            Jump to address $0BC                          
>>> $938    $84F0   LD       V4, VF          Load VF into V4                               W:[4] R:[15]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $93A    $935C   UNKNOWN  $935C           Unknown 9xxx instruction (crashes in CUDA)    
    $93C    $051C   NOP      $051C           No operation (ignored by CUDA kernel)         
>>> $93E    $324F   SE       V2, #4F         Skip next instruction if V2 == $4F            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $940    $38E6   SE       V8, #E6         Skip next instruction if V8 == $E6            R:[8]
    $942    $0E48   NOP      $0E48           No operation (ignored by CUDA kernel)         
    $944    $DADB   DRW      VA, VD, #B      Draw 11-byte sprite at (VA, VD), VF = collision W:[15] R:[10, 13]
    $946    $6D84   LD       VD, #84         Load $84 into VD                              W:[13]
    $948    $1477   JP       $477            Jump to address $477                          
    $94A    $9268   UNKNOWN  $9268           Unknown 9xxx instruction (crashes in CUDA)    
    $94C    $FC61   UNKNOWN  $FC61           Unknown Fxxx instruction (crashes in CUDA)    
    $94E    $D2DC   DRW      V2, VD, #C      Draw 12-byte sprite at (V2, VD), VF = collision W:[15] R:[2, 13]
    $950    $D794   DRW      V7, V9, #4      Draw 4-byte sprite at (V7, V9), VF = collision W:[15] R:[7, 9]
    $952    $FCA5   UNKNOWN  $FCA5           Unknown Fxxx instruction (crashes in CUDA)    
    $954    $50BA   UNKNOWN  $50BA           Unknown 5xxx instruction (crashes in CUDA)    
    $956    $868B   UNKNOWN  $868B           Unknown 8xxx instruction (crashes in CUDA)    
    $958    $AF94   LD       I, $F94         Load $F94 into I register                     
    $95A    $38CC   SE       V8, #CC         Skip next instruction if V8 == $CC            R:[8]
    $95C    $4114   SNE      V1, #14         Skip next instruction if V1 != $14            R:[1]
    $95E    $5285   UNKNOWN  $5285           Unknown 5xxx instruction (crashes in CUDA)    
    $960    $E7E9   UNKNOWN  $E7E9           Unknown Exxx instruction (crashes in CUDA)    
    $962    $E59A   UNKNOWN  $E59A           Unknown Exxx instruction (crashes in CUDA)    
>>> $964    $C3D6   RND      V3, #D6         V3 = random() AND $D6                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $966    $0562   NOP      $0562           No operation (ignored by CUDA kernel)         
>>> $968    $C537   RND      V5, #37         V5 = random() AND $37                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $96A    $A0C6   LD       I, $0C6         Load $0C6 into I register                     
    $96C    $7D49   ADD      VD, #49         Add $49 to VD (VD = (VD + $49) & 0xFF)        W:[13] R:[13]
    $96E    $F08F   UNKNOWN  $F08F           Unknown Fxxx instruction (crashes in CUDA)    
    $970    $A92B   LD       I, $92B         Load $92B into I register                     
>>> $972    $441C   SNE      V4, #1C         Skip next instruction if V4 != $1C            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
>>> $974    $7703   ADD      V7, #03         Add $03 to V7 (V7 = (V7 + $03) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $976    $5F7F   UNKNOWN  $5F7F           Unknown 5xxx instruction (crashes in CUDA)    
    $978    $1D77   JP       $D77            Jump to address $D77                          
    $97A    $CBC2   RND      VB, #C2         VB = random() AND $C2                         W:[11]
    $97C    $A954   LD       I, $954         Load $954 into I register                     
    $97E    $9AA8   UNKNOWN  $9AA8           Unknown 9xxx instruction (crashes in CUDA)    
    $980    $E306   UNKNOWN  $E306           Unknown Exxx instruction (crashes in CUDA)    
    $982    $88E4   ADD      V8, VE          V8 = (V8 + VE) & 0xFF, VF = carry             W:[8, 15] R:[8, 14]
    $984    $7B97   ADD      VB, #97         Add $97 to VB (VB = (VB + $97) & 0xFF)        W:[11] R:[11]
    $986    $D9AA   DRW      V9, VA, #A      Draw 10-byte sprite at (V9, VA), VF = collision W:[15] R:[9, 10]
    $988    $CFF6   RND      VF, #F6         VF = random() AND $F6                         W:[15]
    $98A    $0479   NOP      $0479           No operation (ignored by CUDA kernel)         
    $98C    $89F7   SUBN     V9, VF          V9 = (VF - V9) & 0xFF, VF = NOT borrow        W:[9, 15] R:[9, 15]
>>> $98E    $C75F   RND      V7, #5F         V7 = random() AND $5F                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $990    $7072   ADD      V0, #72         Add $72 to V0 (V0 = (V0 + $72) & 0xFF)        W:[0] R:[0]
    $992    $6803   LD       V8, #03         Load $03 into V8                              W:[8]
>>> $994    $4770   SNE      V7, #70         Skip next instruction if V7 != $70            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $996    $1ACE   JP       $ACE            Jump to address $ACE                          
    $998    $55A7   UNKNOWN  $55A7           Unknown 5xxx instruction (crashes in CUDA)    
    $99A    $0837   NOP      $0837           No operation (ignored by CUDA kernel)         
    $99C    $E1EA   UNKNOWN  $E1EA           Unknown Exxx instruction (crashes in CUDA)    
    $99E    $D238   DRW      V2, V3, #8      Draw 8-byte sprite at (V2, V3), VF = collision W:[15] R:[2, 3]
    $9A0    $B2DE   JP       V0, $2DE        Jump to $2DE + V0                             R:[0]
    $9A2    $8B68   UNKNOWN  $8B68           Unknown 8xxx instruction (crashes in CUDA)    
    $9A4    $2360   CALL     $360            Call subroutine at $360                       
    $9A6    $DB8D   DRW      VB, V8, #D      Draw 13-byte sprite at (VB, V8), VF = collision W:[15] R:[8, 11]
    $9A8    $05F6   NOP      $05F6           No operation (ignored by CUDA kernel)         
    $9AA    $1CA7   JP       $CA7            Jump to address $CA7                          
    $9AC    $FD2F   UNKNOWN  $FD2F           Unknown Fxxx instruction (crashes in CUDA)    
    $9AE    $A88A   LD       I, $88A         Load $88A into I register                     
    $9B0    $C916   RND      V9, #16         V9 = random() AND $16                         W:[9]
    $9B2    $4E24   SNE      VE, #24         Skip next instruction if VE != $24            R:[14]
    $9B4    $92C9   UNKNOWN  $92C9           Unknown 9xxx instruction (crashes in CUDA)    
    $9B6    $E4CF   UNKNOWN  $E4CF           Unknown Exxx instruction (crashes in CUDA)    
>>> $9B8    $4774   SNE      V7, #74         Skip next instruction if V7 != $74            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
>>> $9BA    $C2A0   RND      V2, #A0         V2 = random() AND $A0                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $9BC    $D7AF   DRW      V7, VA, #F      Draw 15-byte sprite at (V7, VA), VF = collision W:[15] R:[7, 10]
    $9BE    $EA3C   UNKNOWN  $EA3C           Unknown Exxx instruction (crashes in CUDA)    
    $9C0    $E7D8   UNKNOWN  $E7D8           Unknown Exxx instruction (crashes in CUDA)    
    $9C2    $70B2   ADD      V0, #B2         Add $B2 to V0 (V0 = (V0 + $B2) & 0xFF)        W:[0] R:[0]
    $9C4    $DD69   DRW      VD, V6, #9      Draw 9-byte sprite at (VD, V6), VF = collision W:[15] R:[6, 13]
    $9C6    $BAC7   JP       V0, $AC7        Jump to $AC7 + V0                             R:[0]
    $9C8    $7AA4   ADD      VA, #A4         Add $A4 to VA (VA = (VA + $A4) & 0xFF)        W:[10] R:[10]
    $9CA    $5305   UNKNOWN  $5305           Unknown 5xxx instruction (crashes in CUDA)    
    $9CC    $A787   LD       I, $787         Load $787 into I register                     
    $9CE    $F82D   UNKNOWN  $F82D           Unknown Fxxx instruction (crashes in CUDA)    
    $9D0    $E2E7   UNKNOWN  $E2E7           Unknown Exxx instruction (crashes in CUDA)    
    $9D2    $20D9   CALL     $0D9            Call subroutine at $0D9                       
    $9D4    $B55A   JP       V0, $55A        Jump to $55A + V0                             R:[0]
    $9D6    $D21F   DRW      V2, V1, #F      Draw 15-byte sprite at (V2, V1), VF = collision W:[15] R:[1, 2]
    $9D8    $1B24   JP       $B24            Jump to address $B24                          
    $9DA    $E953   UNKNOWN  $E953           Unknown Exxx instruction (crashes in CUDA)    
    $9DC    $042E   NOP      $042E           No operation (ignored by CUDA kernel)         
    $9DE    $CCF2   RND      VC, #F2         VC = random() AND $F2                         W:[12]
>>> $9E0    $3533   SE       V5, #33         Skip next instruction if V5 == $33            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $9E2    $D611   DRW      V6, V1, #1      Draw 1-byte sprite at (V6, V1), VF = collision W:[15] R:[1, 6]
    $9E4    $824D   UNKNOWN  $824D           Unknown 8xxx instruction (crashes in CUDA)    
    $9E6    $EBA4   UNKNOWN  $EBA4           Unknown Exxx instruction (crashes in CUDA)    
>>> $9E8    $83FE   SHL      V3              V3 = (V3 << 1) & 0xFF, VF = MSB               W:[3, 15] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $9EA    $B9E5   JP       V0, $9E5        Jump to $9E5 + V0                             R:[0]
    $9EC    $05E5   NOP      $05E5           No operation (ignored by CUDA kernel)         
    $9EE    $6AD8   LD       VA, #D8         Load $D8 into VA                              W:[10]
    $9F0    $153C   JP       $53C            Jump to address $53C                          
    $9F2    $E9FB   UNKNOWN  $E9FB           Unknown Exxx instruction (crashes in CUDA)    
    $9F4    $EA14   UNKNOWN  $EA14           Unknown Exxx instruction (crashes in CUDA)    
    $9F6    $F035   UNKNOWN  $F035           Unknown Fxxx instruction (crashes in CUDA)    
    $9F8    $A34C   LD       I, $34C         Load $34C into I register                     
    $9FA    $BE8A   JP       V0, $E8A        Jump to $E8A + V0                             R:[0]
    $9FC    $70AF   ADD      V0, #AF         Add $AF to V0 (V0 = (V0 + $AF) & 0xFF)        W:[0] R:[0]
>>> $9FE    $4718   SNE      V7, #18         Skip next instruction if V7 != $18            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $A00    $DDC5   DRW      VD, VC, #5      Draw 5-byte sprite at (VD, VC), VF = collision W:[15] R:[12, 13]
    $A02    $5FE5   UNKNOWN  $5FE5           Unknown 5xxx instruction (crashes in CUDA)    
    $A04    $1B1D   JP       $B1D            Jump to address $B1D                          
    $A06    $284D   CALL     $84D            Call subroutine at $84D                       
    $A08    $0A97   NOP      $0A97           No operation (ignored by CUDA kernel)         
    $A0A    $0C5E   NOP      $0C5E           No operation (ignored by CUDA kernel)         
>>> $A0C    $47E3   SNE      V7, #E3         Skip next instruction if V7 != $E3            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $A0E    $BAD3   JP       V0, $AD3        Jump to $AD3 + V0                             R:[0]
    $A10    $A2BF   LD       I, $2BF         Load $2BF into I register                     
>>> $A12    $7480   ADD      V4, #80         Add $80 to V4 (V4 = (V4 + $80) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $A14    $0E50   NOP      $0E50           No operation (ignored by CUDA kernel)         
    $A16    $CE46   RND      VE, #46         VE = random() AND $46                         W:[14]
    $A18    $27B5   CALL     $7B5            Call subroutine at $7B5                       
    $A1A    $91C6   UNKNOWN  $91C6           Unknown 9xxx instruction (crashes in CUDA)    
>>> $A1C    $8225   SUB      V2, V2          V2 = (V2 - V2) & 0xFF, VF = NOT borrow        W:[2, 15] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $A1E    $EA5E   UNKNOWN  $EA5E           Unknown Exxx instruction (crashes in CUDA)    
    $A20    $A0F8   LD       I, $0F8         Load $0F8 into I register                     
    $A22    $51AA   UNKNOWN  $51AA           Unknown 5xxx instruction (crashes in CUDA)    
    $A24    $11B0   JP       $1B0            Jump to address $1B0                          
    $A26    $FDF1   UNKNOWN  $FDF1           Unknown Fxxx instruction (crashes in CUDA)    
    $A28    $D4D5   DRW      V4, VD, #5      Draw 5-byte sprite at (V4, VD), VF = collision W:[15] R:[4, 13]
>>> $A2A    $459B   SNE      V5, #9B         Skip next instruction if V5 != $9B            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $A2C    $EE9C   UNKNOWN  $EE9C           Unknown Exxx instruction (crashes in CUDA)    
    $A2E    $F3DB   UNKNOWN  $F3DB           Unknown Fxxx instruction (crashes in CUDA)    
    $A30    $91E1   UNKNOWN  $91E1           Unknown 9xxx instruction (crashes in CUDA)    
    $A32    $055A   NOP      $055A           No operation (ignored by CUDA kernel)         
    $A34    $6A99   LD       VA, #99         Load $99 into VA                              W:[10]
    $A36    $2975   CALL     $975            Call subroutine at $975                       
    $A38    $6C70   LD       VC, #70         Load $70 into VC                              W:[12]
    $A3A    $1F82   JP       $F82            Jump to address $F82                          
    $A3C    $AA7E   LD       I, $A7E         Load $A7E into I register                     
    $A3E    $ACA5   LD       I, $CA5         Load $CA5 into I register                     
    $A40    $9E90   SNE      VE, V9          Skip next instruction if VE != V9             R:[9, 14]
    $A42    $4DC8   SNE      VD, #C8         Skip next instruction if VD != $C8            R:[13]
    $A44    $2B53   CALL     $B53            Call subroutine at $B53                       
    $A46    $EE1C   UNKNOWN  $EE1C           Unknown Exxx instruction (crashes in CUDA)    
    $A48    $F27B   UNKNOWN  $F27B           Unknown Fxxx instruction (crashes in CUDA)    
    $A4A    $B186   JP       V0, $186        Jump to $186 + V0                             R:[0]
>>> $A4C    $5410   SE       V4, V1          Skip next instruction if V4 == V1             R:[1, 4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
>>> $A4E    $3529   SE       V5, #29         Skip next instruction if V5 == $29            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $A50    $60B1   LD       V0, #B1         Load $B1 into V0                              W:[0]
    $A52    $86B9   UNKNOWN  $86B9           Unknown 8xxx instruction (crashes in CUDA)    
    $A54    $9D88   UNKNOWN  $9D88           Unknown 9xxx instruction (crashes in CUDA)    
    $A56    $8998   UNKNOWN  $8998           Unknown 8xxx instruction (crashes in CUDA)    
    $A58    $5FE4   UNKNOWN  $5FE4           Unknown 5xxx instruction (crashes in CUDA)    
    $A5A    $E0B4   UNKNOWN  $E0B4           Unknown Exxx instruction (crashes in CUDA)    
    $A5C    $DC6F   DRW      VC, V6, #F      Draw 15-byte sprite at (VC, V6), VF = collision W:[15] R:[6, 12]
    $A5E    $57DF   UNKNOWN  $57DF           Unknown 5xxx instruction (crashes in CUDA)    
>>> $A60    $C52D   RND      V5, #2D         V5 = random() AND $2D                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $A62    $948C   UNKNOWN  $948C           Unknown 9xxx instruction (crashes in CUDA)    
    $A64    $264F   CALL     $64F            Call subroutine at $64F                       
    $A66    $7C57   ADD      VC, #57         Add $57 to VC (VC = (VC + $57) & 0xFF)        W:[12] R:[12]
    $A68    $0012   NOP      $0012           No operation (ignored by CUDA kernel)         
    $A6A    $A7D7   LD       I, $7D7         Load $7D7 into I register                     
    $A6C    $CE0C   RND      VE, #0C         VE = random() AND $0C                         W:[14]
    $A6E    $51D8   UNKNOWN  $51D8           Unknown 5xxx instruction (crashes in CUDA)    
    $A70    $E680   UNKNOWN  $E680           Unknown Exxx instruction (crashes in CUDA)    
    $A72    $BF15   JP       V0, $F15        Jump to $F15 + V0                             R:[0]
    $A74    $9495   UNKNOWN  $9495           Unknown 9xxx instruction (crashes in CUDA)    
    $A76    $EBE5   UNKNOWN  $EBE5           Unknown Exxx instruction (crashes in CUDA)    
    $A78    $39B2   SE       V9, #B2         Skip next instruction if V9 == $B2            R:[9]
    $A7A    $54C7   UNKNOWN  $54C7           Unknown 5xxx instruction (crashes in CUDA)    
    $A7C    $3975   SE       V9, #75         Skip next instruction if V9 == $75            R:[9]
>>> $A7E    $668C   LD       V6, #8C         Load $8C into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $A80    $A45A   LD       I, $45A         Load $45A into I register                     
    $A82    $21F0   CALL     $1F0            Call subroutine at $1F0                       
    $A84    $9305   UNKNOWN  $9305           Unknown 9xxx instruction (crashes in CUDA)    
    $A86    $F8CB   UNKNOWN  $F8CB           Unknown Fxxx instruction (crashes in CUDA)    
    $A88    $1BA2   JP       $BA2            Jump to address $BA2                          
    $A8A    $EFCD   UNKNOWN  $EFCD           Unknown Exxx instruction (crashes in CUDA)    
    $A8C    $E038   UNKNOWN  $E038           Unknown Exxx instruction (crashes in CUDA)    
>>> $A8E    $C363   RND      V3, #63         V3 = random() AND $63                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $A90    $6F8C   LD       VF, #8C         Load $8C into VF                              W:[15]
    $A92    $D2D2   DRW      V2, VD, #2      Draw 2-byte sprite at (V2, VD), VF = collision W:[15] R:[2, 13]
    $A94    $FB05   UNKNOWN  $FB05           Unknown Fxxx instruction (crashes in CUDA)    
    $A96    $38D2   SE       V8, #D2         Skip next instruction if V8 == $D2            R:[8]
>>> $A98    $367E   SE       V6, #7E         Skip next instruction if V6 == $7E            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $A9A    $0118   NOP      $0118           No operation (ignored by CUDA kernel)         
    $A9C    $D14D   DRW      V1, V4, #D      Draw 13-byte sprite at (V1, V4), VF = collision W:[15] R:[1, 4]
>>> $A9E    $4521   SNE      V5, #21         Skip next instruction if V5 != $21            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $AA0    $A6F6   LD       I, $6F6         Load $6F6 into I register                     
    $AA2    $AA4F   LD       I, $A4F         Load $A4F into I register                     
    $AA4    $B804   JP       V0, $804        Jump to $804 + V0                             R:[0]
    $AA6    $7DCB   ADD      VD, #CB         Add $CB to VD (VD = (VD + $CB) & 0xFF)        W:[13] R:[13]
    $AA8    $939E   UNKNOWN  $939E           Unknown 9xxx instruction (crashes in CUDA)    
    $AAA    $B2B4   JP       V0, $2B4        Jump to $2B4 + V0                             R:[0]
>>> $AAC    $76E6   ADD      V6, #E6         Add $E6 to V6 (V6 = (V6 + $E6) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $AAE    $1FC4   JP       $FC4            Jump to address $FC4                          
    $AB0    $D434   DRW      V4, V3, #4      Draw 4-byte sprite at (V4, V3), VF = collision W:[15] R:[3, 4]
    $AB2    $190F   JP       $90F            Jump to address $90F                          
    $AB4    $D845   DRW      V8, V4, #5      Draw 5-byte sprite at (V8, V4), VF = collision W:[15] R:[4, 8]
    $AB6    $805E   SHL      V0              V0 = (V0 << 1) & 0xFF, VF = MSB               W:[0, 15] R:[0]
    $AB8    $F50C   UNKNOWN  $F50C           Unknown Fxxx instruction (crashes in CUDA)    
    $ABA    $3135   SE       V1, #35         Skip next instruction if V1 == $35            R:[1]
    $ABC    $A0AD   LD       I, $0AD         Load $0AD into I register                     
    $ABE    $9F81   UNKNOWN  $9F81           Unknown 9xxx instruction (crashes in CUDA)    
    $AC0    $690D   LD       V9, #0D         Load $0D into V9                              W:[9]
    $AC2    $E0DC   UNKNOWN  $E0DC           Unknown Exxx instruction (crashes in CUDA)    
    $AC4    $0244   NOP      $0244           No operation (ignored by CUDA kernel)         
    $AC6    $4008   SNE      V0, #08         Skip next instruction if V0 != $08            R:[0]
>>> $AC8    $72C5   ADD      V2, #C5         Add $C5 to V2 (V2 = (V2 + $C5) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $ACA    $3F87   SE       VF, #87         Skip next instruction if VF == $87            R:[15]
    $ACC    $FD66   UNKNOWN  $FD66           Unknown Fxxx instruction (crashes in CUDA)    
    $ACE    $9069   UNKNOWN  $9069           Unknown 9xxx instruction (crashes in CUDA)    
>>> $AD0    $47CF   SNE      V7, #CF         Skip next instruction if V7 != $CF            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $AD2    $B491   JP       V0, $491        Jump to $491 + V0                             R:[0]
    $AD4    $F991   UNKNOWN  $F991           Unknown Fxxx instruction (crashes in CUDA)    
>>> $AD6    $C7A6   RND      V7, #A6         V7 = random() AND $A6                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $AD8    $4FED   SNE      VF, #ED         Skip next instruction if VF != $ED            R:[15]
    $ADA    $613A   LD       V1, #3A         Load $3A into V1                              W:[1]
    $ADC    $AA01   LD       I, $A01         Load $A01 into I register                     
    $ADE    $F8A9   UNKNOWN  $F8A9           Unknown Fxxx instruction (crashes in CUDA)    
>>> $AE0    $C25D   RND      V2, #5D         V2 = random() AND $5D                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $AE2    $75FC   ADD      V5, #FC         Add $FC to V5 (V5 = (V5 + $FC) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $AE4    $395F   SE       V9, #5F         Skip next instruction if V9 == $5F            R:[9]
    $AE6    $2A0F   CALL     $A0F            Call subroutine at $A0F                       
    $AE8    $59E1   UNKNOWN  $59E1           Unknown 5xxx instruction (crashes in CUDA)    
    $AEA    $120E   JP       $20E            Jump to address $20E                          
    $AEC    $C0FE   RND      V0, #FE         V0 = random() AND $FE                         W:[0]
    $AEE    $01F2   NOP      $01F2           No operation (ignored by CUDA kernel)         
    $AF0    $6E95   LD       VE, #95         Load $95 into VE                              W:[14]
    $AF2    $0AD8   NOP      $0AD8           No operation (ignored by CUDA kernel)         
    $AF4    $1093   JP       $093            Jump to address $093                          
    $AF6    $4E2D   SNE      VE, #2D         Skip next instruction if VE != $2D            R:[14]
    $AF8    $0F15   NOP      $0F15           No operation (ignored by CUDA kernel)         
    $AFA    $6942   LD       V9, #42         Load $42 into V9                              W:[9]
    $AFC    $EABB   UNKNOWN  $EABB           Unknown Exxx instruction (crashes in CUDA)    
>>> $AFE    $455C   SNE      V5, #5C         Skip next instruction if V5 != $5C            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $B00    $AE96   LD       I, $E96         Load $E96 into I register                     
    $B02    $0B67   NOP      $0B67           No operation (ignored by CUDA kernel)         
    $B04    $2BE2   CALL     $BE2            Call subroutine at $BE2                       
    $B06    $7CDD   ADD      VC, #DD         Add $DD to VC (VC = (VC + $DD) & 0xFF)        W:[12] R:[12]
    $B08    $DFAB   DRW      VF, VA, #B      Draw 11-byte sprite at (VF, VA), VF = collision W:[15] R:[10, 15]
    $B0A    $D9EB   DRW      V9, VE, #B      Draw 11-byte sprite at (V9, VE), VF = collision W:[15] R:[9, 14]
    $B0C    $54ED   UNKNOWN  $54ED           Unknown 5xxx instruction (crashes in CUDA)    
    $B0E    $14A2   JP       $4A2            Jump to address $4A2                          
>>> $B10    $63FF   LD       V3, #FF         Load $FF into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $B12    $C6D3   RND      V6, #D3         V6 = random() AND $D3                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $B14    $613E   LD       V1, #3E         Load $3E into V1                              W:[1]
    $B16    $9DE1   UNKNOWN  $9DE1           Unknown 9xxx instruction (crashes in CUDA)    
    $B18    $6F26   LD       VF, #26         Load $26 into VF                              W:[15]
    $B1A    $CDE4   RND      VD, #E4         VD = random() AND $E4                         W:[13]
    $B1C    $71DD   ADD      V1, #DD         Add $DD to V1 (V1 = (V1 + $DD) & 0xFF)        W:[1] R:[1]
    $B1E    $9A18   UNKNOWN  $9A18           Unknown 9xxx instruction (crashes in CUDA)    
    $B20    $04A2   NOP      $04A2           No operation (ignored by CUDA kernel)         
    $B22    $2837   CALL     $837            Call subroutine at $837                       
    $B24    $7B51   ADD      VB, #51         Add $51 to VB (VB = (VB + $51) & 0xFF)        W:[11] R:[11]
    $B26    $1826   JP       $826            Jump to address $826                          
    $B28    $8F03   XOR      VF, V0          VF = VF XOR V0, VF = 0                        W:[15] R:[0, 15]
    $B2A    $797A   ADD      V9, #7A         Add $7A to V9 (V9 = (V9 + $7A) & 0xFF)        W:[9] R:[9]
    $B2C    $A47C   LD       I, $47C         Load $47C into I register                     
    $B2E    $2B2B   CALL     $B2B            Call subroutine at $B2B                       
    $B30    $3BD4   SE       VB, #D4         Skip next instruction if VB == $D4            R:[11]
    $B32    $6E00   LD       VE, #00         Load $00 into VE                              W:[14]
    $B34    $D7F7   DRW      V7, VF, #7      Draw 7-byte sprite at (V7, VF), VF = collision W:[15] R:[7, 15]
    $B36    $2DF7   CALL     $DF7            Call subroutine at $DF7                       
    $B38    $683A   LD       V8, #3A         Load $3A into V8                              W:[8]
    $B3A    $3A5F   SE       VA, #5F         Skip next instruction if VA == $5F            R:[10]
    $B3C    $58F5   UNKNOWN  $58F5           Unknown 5xxx instruction (crashes in CUDA)    
    $B3E    $1227   JP       $227            Jump to address $227                          
    $B40    $A2A8   LD       I, $2A8         Load $2A8 into I register                     
    $B42    $AFB7   LD       I, $FB7         Load $FB7 into I register                     
    $B44    $40C2   SNE      V0, #C2         Skip next instruction if V0 != $C2            R:[0]
>>> $B46    $3684   SE       V6, #84         Skip next instruction if V6 == $84            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $B48    $EA33   UNKNOWN  $EA33           Unknown Exxx instruction (crashes in CUDA)    
    $B4A    $89BC   UNKNOWN  $89BC           Unknown 8xxx instruction (crashes in CUDA)    
    $B4C    $DCA6   DRW      VC, VA, #6      Draw 6-byte sprite at (VC, VA), VF = collision W:[15] R:[10, 12]
    $B4E    $0D0D   NOP      $0D0D           No operation (ignored by CUDA kernel)         
    $B50    $2098   CALL     $098            Call subroutine at $098                       
    $B52    $8C01   OR       VC, V0          VC = VC OR V0, VF = 0                         W:[12, 15] R:[0, 12]
    $B54    $4AE6   SNE      VA, #E6         Skip next instruction if VA != $E6            R:[10]
    $B56    $D061   DRW      V0, V6, #1      Draw 1-byte sprite at (V0, V6), VF = collision W:[15] R:[0, 6]
    $B58    $E036   UNKNOWN  $E036           Unknown Exxx instruction (crashes in CUDA)    
    $B5A    $CA0D   RND      VA, #0D         VA = random() AND $0D                         W:[10]
    $B5C    $9B9A   UNKNOWN  $9B9A           Unknown 9xxx instruction (crashes in CUDA)    
>>> $B5E    $47B6   SNE      V7, #B6         Skip next instruction if V7 != $B6            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $B60    $9CE0   SNE      VC, VE          Skip next instruction if VC != VE             R:[12, 14]
    $B62    $2556   CALL     $556            Call subroutine at $556                       
    $B64    $B00F   JP       V0, $00F        Jump to $00F + V0                             R:[0]
    $B66    $6BAE   LD       VB, #AE         Load $AE into VB                              W:[11]
    $B68    $B893   JP       V0, $893        Jump to $893 + V0                             R:[0]
    $B6A    $89CA   UNKNOWN  $89CA           Unknown 8xxx instruction (crashes in CUDA)    
    $B6C    $9771   UNKNOWN  $9771           Unknown 9xxx instruction (crashes in CUDA)    
    $B6E    $EDCB   UNKNOWN  $EDCB           Unknown Exxx instruction (crashes in CUDA)    
    $B70    $9496   UNKNOWN  $9496           Unknown 9xxx instruction (crashes in CUDA)    
    $B72    $069B   NOP      $069B           No operation (ignored by CUDA kernel)         
    $B74    $2F56   CALL     $F56            Call subroutine at $F56                       
>>> $B76    $748C   ADD      V4, #8C         Add $8C to V4 (V4 = (V4 + $8C) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $B78    $4F02   SNE      VF, #02         Skip next instruction if VF != $02            R:[15]
>>> $B7A    $8C35   SUB      VC, V3          VC = (VC - V3) & 0xFF, VF = NOT borrow        W:[12, 15] R:[3, 12]
          ^-- SORTING RELATED: Arithmetic on sorted registers V[3]
    $B7C    $D874   DRW      V8, V7, #4      Draw 4-byte sprite at (V8, V7), VF = collision W:[15] R:[7, 8]
>>> $B7E    $34DE   SE       V4, #DE         Skip next instruction if V4 == $DE            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $B80    $01AE   NOP      $01AE           No operation (ignored by CUDA kernel)         
    $B82    $E9EB   UNKNOWN  $E9EB           Unknown Exxx instruction (crashes in CUDA)    
    $B84    $EF0C   UNKNOWN  $EF0C           Unknown Exxx instruction (crashes in CUDA)    
    $B86    $0F55   NOP      $0F55           No operation (ignored by CUDA kernel)         
    $B88    $B6E1   JP       V0, $6E1        Jump to $6E1 + V0                             R:[0]
    $B8A    $F826   UNKNOWN  $F826           Unknown Fxxx instruction (crashes in CUDA)    
    $B8C    $0481   NOP      $0481           No operation (ignored by CUDA kernel)         
    $B8E    $CFF7   RND      VF, #F7         VF = random() AND $F7                         W:[15]
    $B90    $BFF5   JP       V0, $FF5        Jump to $FF5 + V0                             R:[0]
    $B92    $6AFC   LD       VA, #FC         Load $FC into VA                              W:[10]
    $B94    $0B30   NOP      $0B30           No operation (ignored by CUDA kernel)         
    $B96    $CC68   RND      VC, #68         VC = random() AND $68                         W:[12]
    $B98    $401B   SNE      V0, #1B         Skip next instruction if V0 != $1B            R:[0]
    $B9A    $BDEF   JP       V0, $DEF        Jump to $DEF + V0                             R:[0]
    $B9C    $CF39   RND      VF, #39         VF = random() AND $39                         W:[15]
    $B9E    $3896   SE       V8, #96         Skip next instruction if V8 == $96            R:[8]
    $BA0    $DDF9   DRW      VD, VF, #9      Draw 9-byte sprite at (VD, VF), VF = collision W:[15] R:[13, 15]
    $BA2    $D57A   DRW      V5, V7, #A      Draw 10-byte sprite at (V5, V7), VF = collision W:[15] R:[5, 7]
    $BA4    $C872   RND      V8, #72         V8 = random() AND $72                         W:[8]
    $BA6    $FCDC   UNKNOWN  $FCDC           Unknown Fxxx instruction (crashes in CUDA)    
    $BA8    $4B13   SNE      VB, #13         Skip next instruction if VB != $13            R:[11]
>>> $BAA    $46FC   SNE      V6, #FC         Skip next instruction if V6 != $FC            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $BAC    $C1C9   RND      V1, #C9         V1 = random() AND $C9                         W:[1]
    $BAE    $98DD   UNKNOWN  $98DD           Unknown 9xxx instruction (crashes in CUDA)    
    $BB0    $EEFF   UNKNOWN  $EEFF           Unknown Exxx instruction (crashes in CUDA)    
    $BB2    $553B   UNKNOWN  $553B           Unknown 5xxx instruction (crashes in CUDA)    
    $BB4    $319A   SE       V1, #9A         Skip next instruction if V1 == $9A            R:[1]
    $BB6    $78FC   ADD      V8, #FC         Add $FC to V8 (V8 = (V8 + $FC) & 0xFF)        W:[8] R:[8]
    $BB8    $ACAF   LD       I, $CAF         Load $CAF into I register                     
    $BBA    $F5E4   UNKNOWN  $F5E4           Unknown Fxxx instruction (crashes in CUDA)    
    $BBC    $A763   LD       I, $763         Load $763 into I register                     
    $BBE    $2E26   CALL     $E26            Call subroutine at $E26                       
    $BC0    $BB7B   JP       V0, $B7B        Jump to $B7B + V0                             R:[0]
    $BC2    $5FC6   UNKNOWN  $5FC6           Unknown 5xxx instruction (crashes in CUDA)    
>>> $BC4    $6659   LD       V6, #59         Load $59 into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $BC6    $8D18   UNKNOWN  $8D18           Unknown 8xxx instruction (crashes in CUDA)    
    $BC8    $B007   JP       V0, $007        Jump to $007 + V0                             R:[0]
    $BCA    $FD5A   UNKNOWN  $FD5A           Unknown Fxxx instruction (crashes in CUDA)    
    $BCC    $144C   JP       $44C            Jump to address $44C                          
    $BCE    $2E5B   CALL     $E5B            Call subroutine at $E5B                       
    $BD0    $B7C8   JP       V0, $7C8        Jump to $7C8 + V0                             R:[0]
    $BD2    $9BED   UNKNOWN  $9BED           Unknown 9xxx instruction (crashes in CUDA)    
    $BD4    $1EB3   JP       $EB3            Jump to address $EB3                          
    $BD6    $0F54   NOP      $0F54           No operation (ignored by CUDA kernel)         
    $BD8    $DF7B   DRW      VF, V7, #B      Draw 11-byte sprite at (VF, V7), VF = collision W:[15] R:[7, 15]
    $BDA    $4C3F   SNE      VC, #3F         Skip next instruction if VC != $3F            R:[12]
    $BDC    $7ED8   ADD      VE, #D8         Add $D8 to VE (VE = (VE + $D8) & 0xFF)        W:[14] R:[14]
    $BDE    $5A9A   UNKNOWN  $5A9A           Unknown 5xxx instruction (crashes in CUDA)    
    $BE0    $E520   UNKNOWN  $E520           Unknown Exxx instruction (crashes in CUDA)    
    $BE2    $D46C   DRW      V4, V6, #C      Draw 12-byte sprite at (V4, V6), VF = collision W:[15] R:[4, 6]
>>> $BE4    $7613   ADD      V6, #13         Add $13 to V6 (V6 = (V6 + $13) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $BE6    $22E2   CALL     $2E2            Call subroutine at $2E2                       
>>> $BE8    $4308   SNE      V3, #08         Skip next instruction if V3 != $08            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $BEA    $9BEE   UNKNOWN  $9BEE           Unknown 9xxx instruction (crashes in CUDA)    
    $BEC    $2540   CALL     $540            Call subroutine at $540                       
    $BEE    $8148   UNKNOWN  $8148           Unknown 8xxx instruction (crashes in CUDA)    
>>> $BF0    $7461   ADD      V4, #61         Add $61 to V4 (V4 = (V4 + $61) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $BF2    $BB47   JP       V0, $B47        Jump to $B47 + V0                             R:[0]
    $BF4    $D8ED   DRW      V8, VE, #D      Draw 13-byte sprite at (V8, VE), VF = collision W:[15] R:[8, 14]
    $BF6    $8EA9   UNKNOWN  $8EA9           Unknown 8xxx instruction (crashes in CUDA)    
    $BF8    $4E93   SNE      VE, #93         Skip next instruction if VE != $93            R:[14]
    $BFA    $2F12   CALL     $F12            Call subroutine at $F12                       
    $BFC    $6E60   LD       VE, #60         Load $60 into VE                              W:[14]
    $BFE    $5F68   UNKNOWN  $5F68           Unknown 5xxx instruction (crashes in CUDA)    
    $C00    $E85B   UNKNOWN  $E85B           Unknown Exxx instruction (crashes in CUDA)    
    $C02    $AFC0   LD       I, $FC0         Load $FC0 into I register                     
    $C04    $225C   CALL     $25C            Call subroutine at $25C                       
>>> $C06    $3477   SE       V4, #77         Skip next instruction if V4 == $77            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $C08    $C046   RND      V0, #46         V0 = random() AND $46                         W:[0]
    $C0A    $1501   JP       $501            Jump to address $501                          
    $C0C    $14D5   JP       $4D5            Jump to address $4D5                          
    $C0E    $285E   CALL     $85E            Call subroutine at $85E                       
    $C10    $CA14   RND      VA, #14         VA = random() AND $14                         W:[10]
>>> $C12    $4487   SNE      V4, #87         Skip next instruction if V4 != $87            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $C14    $E5C2   UNKNOWN  $E5C2           Unknown Exxx instruction (crashes in CUDA)    
    $C16    $57A5   UNKNOWN  $57A5           Unknown 5xxx instruction (crashes in CUDA)    
    $C18    $E127   UNKNOWN  $E127           Unknown Exxx instruction (crashes in CUDA)    
    $C1A    $FA74   UNKNOWN  $FA74           Unknown Fxxx instruction (crashes in CUDA)    
    $C1C    $960F   UNKNOWN  $960F           Unknown 9xxx instruction (crashes in CUDA)    
    $C1E    $EE91   UNKNOWN  $EE91           Unknown Exxx instruction (crashes in CUDA)    
    $C20    $DF44   DRW      VF, V4, #4      Draw 4-byte sprite at (VF, V4), VF = collision W:[15] R:[4, 15]
    $C22    $1F71   JP       $F71            Jump to address $F71                          
    $C24    $DACC   DRW      VA, VC, #C      Draw 12-byte sprite at (VA, VC), VF = collision W:[15] R:[10, 12]
    $C26    $EAD2   UNKNOWN  $EAD2           Unknown Exxx instruction (crashes in CUDA)    
    $C28    $BCE3   JP       V0, $CE3        Jump to $CE3 + V0                             R:[0]
    $C2A    $A2F3   LD       I, $2F3         Load $2F3 into I register                     
    $C2C    $7FEE   ADD      VF, #EE         Add $EE to VF (VF = (VF + $EE) & 0xFF)        W:[15] R:[15]
    $C2E    $0E65   NOP      $0E65           No operation (ignored by CUDA kernel)         
    $C30    $DDA1   DRW      VD, VA, #1      Draw 1-byte sprite at (VD, VA), VF = collision W:[15] R:[10, 13]
    $C32    $6A28   LD       VA, #28         Load $28 into VA                              W:[10]
    $C34    $5938   UNKNOWN  $5938           Unknown 5xxx instruction (crashes in CUDA)    
    $C36    $F3B9   UNKNOWN  $F3B9           Unknown Fxxx instruction (crashes in CUDA)    
>>> $C38    $76DB   ADD      V6, #DB         Add $DB to V6 (V6 = (V6 + $DB) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $C3A    $BC3B   JP       V0, $C3B        Jump to $C3B + V0                             R:[0]
    $C3C    $D0F4   DRW      V0, VF, #4      Draw 4-byte sprite at (V0, VF), VF = collision W:[15] R:[0, 15]
>>> $C3E    $63FF   LD       V3, #FF         Load $FF into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $C40    $CB86   RND      VB, #86         VB = random() AND $86                         W:[11]
    $C42    $BAF6   JP       V0, $AF6        Jump to $AF6 + V0                             R:[0]
    $C44    $4E52   SNE      VE, #52         Skip next instruction if VE != $52            R:[14]
    $C46    $175C   JP       $75C            Jump to address $75C                          
    $C48    $FD5A   UNKNOWN  $FD5A           Unknown Fxxx instruction (crashes in CUDA)    
    $C4A    $8C5F   UNKNOWN  $8C5F           Unknown 8xxx instruction (crashes in CUDA)    
    $C4C    $788E   ADD      V8, #8E         Add $8E to V8 (V8 = (V8 + $8E) & 0xFF)        W:[8] R:[8]
    $C4E    $AD36   LD       I, $D36         Load $D36 into I register                     
    $C50    $81BB   UNKNOWN  $81BB           Unknown 8xxx instruction (crashes in CUDA)    
>>> $C52    $3692   SE       V6, #92         Skip next instruction if V6 == $92            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $C54    $CCBF   RND      VC, #BF         VC = random() AND $BF                         W:[12]
    $C56    $3EF3   SE       VE, #F3         Skip next instruction if VE == $F3            R:[14]
    $C58    $2C8A   CALL     $C8A            Call subroutine at $C8A                       
    $C5A    $EFC9   UNKNOWN  $EFC9           Unknown Exxx instruction (crashes in CUDA)    
    $C5C    $5B74   UNKNOWN  $5B74           Unknown 5xxx instruction (crashes in CUDA)    
    $C5E    $844F   UNKNOWN  $844F           Unknown 8xxx instruction (crashes in CUDA)    
    $C60    $6D91   LD       VD, #91         Load $91 into VD                              W:[13]
    $C62    $12D2   JP       $2D2            Jump to address $2D2                          
    $C64    $6D40   LD       VD, #40         Load $40 into VD                              W:[13]
    $C66    $2780   CALL     $780            Call subroutine at $780                       
>>> $C68    $7421   ADD      V4, #21         Add $21 to V4 (V4 = (V4 + $21) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $C6A    $4B13   SNE      VB, #13         Skip next instruction if VB != $13            R:[11]
    $C6C    $F006   UNKNOWN  $F006           Unknown Fxxx instruction (crashes in CUDA)    
    $C6E    $9A3C   UNKNOWN  $9A3C           Unknown 9xxx instruction (crashes in CUDA)    
    $C70    $4A93   SNE      VA, #93         Skip next instruction if VA != $93            R:[10]
    $C72    $D817   DRW      V8, V1, #7      Draw 7-byte sprite at (V8, V1), VF = collision W:[15] R:[1, 8]
    $C74    $9EEE   UNKNOWN  $9EEE           Unknown 9xxx instruction (crashes in CUDA)    
    $C76    $2CFD   CALL     $CFD            Call subroutine at $CFD                       
    $C78    $0026   NOP      $0026           No operation (ignored by CUDA kernel)         
    $C7A    $F5FF   UNKNOWN  $F5FF           Unknown Fxxx instruction (crashes in CUDA)    
>>> $C7C    $7710   ADD      V7, #10         Add $10 to V7 (V7 = (V7 + $10) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $C7E    $E391   UNKNOWN  $E391           Unknown Exxx instruction (crashes in CUDA)    
    $C80    $EFC9   UNKNOWN  $EFC9           Unknown Exxx instruction (crashes in CUDA)    
    $C82    $BCEE   JP       V0, $CEE        Jump to $CEE + V0                             R:[0]
    $C84    $81DC   UNKNOWN  $81DC           Unknown 8xxx instruction (crashes in CUDA)    
    $C86    $7D20   ADD      VD, #20         Add $20 to VD (VD = (VD + $20) & 0xFF)        W:[13] R:[13]
    $C88    $B749   JP       V0, $749        Jump to $749 + V0                             R:[0]
    $C8A    $27DF   CALL     $7DF            Call subroutine at $7DF                       
    $C8C    $BE9B   JP       V0, $E9B        Jump to $E9B + V0                             R:[0]
    $C8E    $4BB3   SNE      VB, #B3         Skip next instruction if VB != $B3            R:[11]
    $C90    $0BD8   NOP      $0BD8           No operation (ignored by CUDA kernel)         
    $C92    $54D3   UNKNOWN  $54D3           Unknown 5xxx instruction (crashes in CUDA)    
>>> $C94    $742E   ADD      V4, #2E         Add $2E to V4 (V4 = (V4 + $2E) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $C96    $F0D9   UNKNOWN  $F0D9           Unknown Fxxx instruction (crashes in CUDA)    
>>> $C98    $74F9   ADD      V4, #F9         Add $F9 to V4 (V4 = (V4 + $F9) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $C9A    $F711   UNKNOWN  $F711           Unknown Fxxx instruction (crashes in CUDA)    
    $C9C    $A238   LD       I, $238         Load $238 into I register                     
    $C9E    $0A79   NOP      $0A79           No operation (ignored by CUDA kernel)         
    $CA0    $B912   JP       V0, $912        Jump to $912 + V0                             R:[0]
    $CA2    $81C3   XOR      V1, VC          V1 = V1 XOR VC, VF = 0                        W:[1, 15] R:[1, 12]
>>> $CA4    $7762   ADD      V7, #62         Add $62 to V7 (V7 = (V7 + $62) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $CA6    $FCA0   UNKNOWN  $FCA0           Unknown Fxxx instruction (crashes in CUDA)    
    $CA8    $8B4A   UNKNOWN  $8B4A           Unknown 8xxx instruction (crashes in CUDA)    
    $CAA    $0694   NOP      $0694           No operation (ignored by CUDA kernel)         
    $CAC    $4E1A   SNE      VE, #1A         Skip next instruction if VE != $1A            R:[14]
    $CAE    $4E61   SNE      VE, #61         Skip next instruction if VE != $61            R:[14]
    $CB0    $BE4F   JP       V0, $E4F        Jump to $E4F + V0                             R:[0]
    $CB2    $E430   UNKNOWN  $E430           Unknown Exxx instruction (crashes in CUDA)    
    $CB4    $AEDF   LD       I, $EDF         Load $EDF into I register                     
    $CB6    $CAE6   RND      VA, #E6         VA = random() AND $E6                         W:[10]
    $CB8    $3BD6   SE       VB, #D6         Skip next instruction if VB == $D6            R:[11]
    $CBA    $A659   LD       I, $659         Load $659 into I register                     
    $CBC    $6EF0   LD       VE, #F0         Load $F0 into VE                              W:[14]
    $CBE    $03FB   NOP      $03FB           No operation (ignored by CUDA kernel)         
    $CC0    $F7F0   UNKNOWN  $F7F0           Unknown Fxxx instruction (crashes in CUDA)    
    $CC2    $EE43   UNKNOWN  $EE43           Unknown Exxx instruction (crashes in CUDA)    
    $CC4    $166E   JP       $66E            Jump to address $66E                          
    $CC6    $90B2   UNKNOWN  $90B2           Unknown 9xxx instruction (crashes in CUDA)    
    $CC8    $CA15   RND      VA, #15         VA = random() AND $15                         W:[10]
    $CCA    $DA3F   DRW      VA, V3, #F      Draw 15-byte sprite at (VA, V3), VF = collision W:[15] R:[3, 10]
    $CCC    $D012   DRW      V0, V1, #2      Draw 2-byte sprite at (V0, V1), VF = collision W:[15] R:[0, 1]
    $CCE    $17F8   JP       $7F8            Jump to address $7F8                          
    $CD0    $9FE3   UNKNOWN  $9FE3           Unknown 9xxx instruction (crashes in CUDA)    
    $CD2    $EE45   UNKNOWN  $EE45           Unknown Exxx instruction (crashes in CUDA)    
    $CD4    $7DEE   ADD      VD, #EE         Add $EE to VD (VD = (VD + $EE) & 0xFF)        W:[13] R:[13]
    $CD6    $2023   CALL     $023            Call subroutine at $023                       
    $CD8    $9132   UNKNOWN  $9132           Unknown 9xxx instruction (crashes in CUDA)    
    $CDA    $19BF   JP       $9BF            Jump to address $9BF                          
    $CDC    $B010   JP       V0, $010        Jump to $010 + V0                             R:[0]
    $CDE    $878A   UNKNOWN  $878A           Unknown 8xxx instruction (crashes in CUDA)    
    $CE0    $6FA0   LD       VF, #A0         Load $A0 into VF                              W:[15]
    $CE2    $4E59   SNE      VE, #59         Skip next instruction if VE != $59            R:[14]
    $CE4    $D728   DRW      V7, V2, #8      Draw 8-byte sprite at (V7, V2), VF = collision W:[15] R:[2, 7]
>>> $CE6    $35F0   SE       V5, #F0         Skip next instruction if V5 == $F0            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
>>> $CE8    $C4C9   RND      V4, #C9         V4 = random() AND $C9                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $CEA    $F9D0   UNKNOWN  $F9D0           Unknown Fxxx instruction (crashes in CUDA)    
    $CEC    $4E4B   SNE      VE, #4B         Skip next instruction if VE != $4B            R:[14]
    $CEE    $FEC5   UNKNOWN  $FEC5           Unknown Fxxx instruction (crashes in CUDA)    
>>> $CF0    $9570   SNE      V5, V7          Skip next instruction if V5 != V7             R:[5, 7]
          ^-- SORTING RELATED: Compares sorted registers V[5, 7]
>>> $CF2    $35DF   SE       V5, #DF         Skip next instruction if V5 == $DF            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
>>> $CF4    $C249   RND      V2, #49         V2 = random() AND $49                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $CF6    $ABDA   LD       I, $BDA         Load $BDA into I register                     
    $CF8    $E4EB   UNKNOWN  $E4EB           Unknown Exxx instruction (crashes in CUDA)    
    $CFA    $4D3D   SNE      VD, #3D         Skip next instruction if VD != $3D            R:[13]
    $CFC    $0C78   NOP      $0C78           No operation (ignored by CUDA kernel)         
    $CFE    $FDA0   UNKNOWN  $FDA0           Unknown Fxxx instruction (crashes in CUDA)    
    $D00    $BC26   JP       V0, $C26        Jump to $C26 + V0                             R:[0]
    $D02    $F8DF   UNKNOWN  $F8DF           Unknown Fxxx instruction (crashes in CUDA)    
    $D04    $0111   NOP      $0111           No operation (ignored by CUDA kernel)         
>>> $D06    $7626   ADD      V6, #26         Add $26 to V6 (V6 = (V6 + $26) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $D08    $B5F1   JP       V0, $5F1        Jump to $5F1 + V0                             R:[0]
    $D0A    $5157   UNKNOWN  $5157           Unknown 5xxx instruction (crashes in CUDA)    
    $D0C    $E3B0   UNKNOWN  $E3B0           Unknown Exxx instruction (crashes in CUDA)    
    $D0E    $9259   UNKNOWN  $9259           Unknown 9xxx instruction (crashes in CUDA)    
    $D10    $CCDD   RND      VC, #DD         VC = random() AND $DD                         W:[12]
    $D12    $5F2C   UNKNOWN  $5F2C           Unknown 5xxx instruction (crashes in CUDA)    
    $D14    $78B4   ADD      V8, #B4         Add $B4 to V8 (V8 = (V8 + $B4) & 0xFF)        W:[8] R:[8]
    $D16    $B196   JP       V0, $196        Jump to $196 + V0                             R:[0]
    $D18    $6E77   LD       VE, #77         Load $77 into VE                              W:[14]
    $D1A    $5391   UNKNOWN  $5391           Unknown 5xxx instruction (crashes in CUDA)    
    $D1C    $072A   NOP      $072A           No operation (ignored by CUDA kernel)         
    $D1E    $E697   UNKNOWN  $E697           Unknown Exxx instruction (crashes in CUDA)    
    $D20    $5AEF   UNKNOWN  $5AEF           Unknown 5xxx instruction (crashes in CUDA)    
    $D22    $F9AB   UNKNOWN  $F9AB           Unknown Fxxx instruction (crashes in CUDA)    
    $D24    $5DDF   UNKNOWN  $5DDF           Unknown 5xxx instruction (crashes in CUDA)    
>>> $D26    $4560   SNE      V5, #60         Skip next instruction if V5 != $60            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $D28    $A5FE   LD       I, $5FE         Load $5FE into I register                     
>>> $D2A    $6312   LD       V3, #12         Load $12 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $D2C    $CBEC   RND      VB, #EC         VB = random() AND $EC                         W:[11]
    $D2E    $6FD6   LD       VF, #D6         Load $D6 into VF                              W:[15]
    $D30    $9304   UNKNOWN  $9304           Unknown 9xxx instruction (crashes in CUDA)    
    $D32    $1DF7   JP       $DF7            Jump to address $DF7                          
    $D34    $14DE   JP       $4DE            Jump to address $4DE                          
    $D36    $DCB9   DRW      VC, VB, #9      Draw 9-byte sprite at (VC, VB), VF = collision W:[15] R:[11, 12]
>>> $D38    $4751   SNE      V7, #51         Skip next instruction if V7 != $51            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $D3A    $9FFF   UNKNOWN  $9FFF           Unknown 9xxx instruction (crashes in CUDA)    
    $D3C    $7F74   ADD      VF, #74         Add $74 to VF (VF = (VF + $74) & 0xFF)        W:[15] R:[15]
    $D3E    $DD96   DRW      VD, V9, #6      Draw 6-byte sprite at (VD, V9), VF = collision W:[15] R:[9, 13]
    $D40    $0B0F   NOP      $0B0F           No operation (ignored by CUDA kernel)         
    $D42    $312A   SE       V1, #2A         Skip next instruction if V1 == $2A            R:[1]
    $D44    $CF9D   RND      VF, #9D         VF = random() AND $9D                         W:[15]
    $D46    $FB36   UNKNOWN  $FB36           Unknown Fxxx instruction (crashes in CUDA)    
    $D48    $AF97   LD       I, $F97         Load $F97 into I register                     
    $D4A    $D1DD   DRW      V1, VD, #D      Draw 13-byte sprite at (V1, VD), VF = collision W:[15] R:[1, 13]
    $D4C    $F56F   UNKNOWN  $F56F           Unknown Fxxx instruction (crashes in CUDA)    
    $D4E    $BDF6   JP       V0, $DF6        Jump to $DF6 + V0                             R:[0]
    $D50    $2F28   CALL     $F28            Call subroutine at $F28                       
    $D52    $CD19   RND      VD, #19         VD = random() AND $19                         W:[13]
    $D54    $4F45   SNE      VF, #45         Skip next instruction if VF != $45            R:[15]
    $D56    $BC21   JP       V0, $C21        Jump to $C21 + V0                             R:[0]
    $D58    $6BCF   LD       VB, #CF         Load $CF into VB                              W:[11]
>>> $D5A    $F465   LD       V4, [I]         Load V0-V4 from [I], then I += 5              W:[0, 1, 2, 3, 4]
          ^-- SORTING RELATED: Modifies sorted registers V[2, 3, 4]
    $D5C    $5DFE   UNKNOWN  $5DFE           Unknown 5xxx instruction (crashes in CUDA)    
    $D5E    $4FC8   SNE      VF, #C8         Skip next instruction if VF != $C8            R:[15]
    $D60    $7F41   ADD      VF, #41         Add $41 to VF (VF = (VF + $41) & 0xFF)        W:[15] R:[15]
    $D62    $3032   SE       V0, #32         Skip next instruction if V0 == $32            R:[0]
>>> $D64    $66CE   LD       V6, #CE         Load $CE into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $D66    $EB32   UNKNOWN  $EB32           Unknown Exxx instruction (crashes in CUDA)    
    $D68    $BB26   JP       V0, $B26        Jump to $B26 + V0                             R:[0]
    $D6A    $A5B3   LD       I, $5B3         Load $5B3 into I register                     
    $D6C    $FEA0   UNKNOWN  $FEA0           Unknown Fxxx instruction (crashes in CUDA)    
    $D6E    $40D5   SNE      V0, #D5         Skip next instruction if V0 != $D5            R:[0]
    $D70    $A5A1   LD       I, $5A1         Load $5A1 into I register                     
    $D72    $A0DE   LD       I, $0DE         Load $0DE into I register                     
    $D74    $2D8F   CALL     $D8F            Call subroutine at $D8F                       
    $D76    $DDE4   DRW      VD, VE, #4      Draw 4-byte sprite at (VD, VE), VF = collision W:[15] R:[13, 14]
    $D78    $3B54   SE       VB, #54         Skip next instruction if VB == $54            R:[11]
    $D7A    $EB39   UNKNOWN  $EB39           Unknown Exxx instruction (crashes in CUDA)    
>>> $D7C    $94B0   SNE      V4, VB          Skip next instruction if V4 != VB             R:[4, 11]
          ^-- SORTING RELATED: Compares sorted registers V[4]
>>> $D7E    $C66E   RND      V6, #6E         V6 = random() AND $6E                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
>>> $D80    $7549   ADD      V5, #49         Add $49 to V5 (V5 = (V5 + $49) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $D82    $0038   NOP      $0038           No operation (ignored by CUDA kernel)         
>>> $D84    $648C   LD       V4, #8C         Load $8C into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
>>> $D86    $63B6   LD       V3, #B6         Load $B6 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $D88    $7746   ADD      V7, #46         Add $46 to V7 (V7 = (V7 + $46) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $D8A    $AAC0   LD       I, $AC0         Load $AC0 into I register                     
    $D8C    $5C0C   UNKNOWN  $5C0C           Unknown 5xxx instruction (crashes in CUDA)    
    $D8E    $1947   JP       $947            Jump to address $947                          
>>> $D90    $375B   SE       V7, #5B         Skip next instruction if V7 == $5B            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $D92    $9D6C   UNKNOWN  $9D6C           Unknown 9xxx instruction (crashes in CUDA)    
    $D94    $7AC6   ADD      VA, #C6         Add $C6 to VA (VA = (VA + $C6) & 0xFF)        W:[10] R:[10]
    $D96    $7D6B   ADD      VD, #6B         Add $6B to VD (VD = (VD + $6B) & 0xFF)        W:[13] R:[13]
    $D98    $4EE8   SNE      VE, #E8         Skip next instruction if VE != $E8            R:[14]
>>> $D9A    $C3F8   RND      V3, #F8         V3 = random() AND $F8                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $D9C    $60E3   LD       V0, #E3         Load $E3 into V0                              W:[0]
    $D9E    $6A86   LD       VA, #86         Load $86 into VA                              W:[10]
    $DA0    $5827   UNKNOWN  $5827           Unknown 5xxx instruction (crashes in CUDA)    
    $DA2    $51FF   UNKNOWN  $51FF           Unknown 5xxx instruction (crashes in CUDA)    
    $DA4    $2BC9   CALL     $BC9            Call subroutine at $BC9                       
>>> $DA6    $C31A   RND      V3, #1A         V3 = random() AND $1A                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $DA8    $3542   SE       V5, #42         Skip next instruction if V5 == $42            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $DAA    $1004   JP       $004            Jump to address $004                          
>>> $DAC    $7592   ADD      V5, #92         Add $92 to V5 (V5 = (V5 + $92) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $DAE    $59E4   UNKNOWN  $59E4           Unknown 5xxx instruction (crashes in CUDA)    
>>> $DB0    $746B   ADD      V4, #6B         Add $6B to V4 (V4 = (V4 + $6B) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
>>> $DB2    $C533   RND      V5, #33         V5 = random() AND $33                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
>>> $DB4    $8151   OR       V1, V5          V1 = V1 OR V5, VF = 0                         W:[1, 15] R:[1, 5]
          ^-- SORTING RELATED: Logical operation on V[5] (sets VF=0 in CUDA)
    $DB6    $283C   CALL     $83C            Call subroutine at $83C                       
    $DB8    $6F82   LD       VF, #82         Load $82 into VF                              W:[15]
>>> $DBA    $75F4   ADD      V5, #F4         Add $F4 to V5 (V5 = (V5 + $F4) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $DBC    $AE62   LD       I, $E62         Load $E62 into I register                     
    $DBE    $2190   CALL     $190            Call subroutine at $190                       
    $DC0    $B322   JP       V0, $322        Jump to $322 + V0                             R:[0]
>>> $DC2    $87B3   XOR      V7, VB          V7 = V7 XOR VB, VF = 0                        W:[7, 15] R:[7, 11]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $DC4    $3864   SE       V8, #64         Skip next instruction if V8 == $64            R:[8]
    $DC6    $5528   UNKNOWN  $5528           Unknown 5xxx instruction (crashes in CUDA)    
    $DC8    $49CA   SNE      V9, #CA         Skip next instruction if V9 != $CA            R:[9]
>>> $DCA    $378E   SE       V7, #8E         Skip next instruction if V7 == $8E            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $DCC    $9873   UNKNOWN  $9873           Unknown 9xxx instruction (crashes in CUDA)    
    $DCE    $2997   CALL     $997            Call subroutine at $997                       
    $DD0    $5F80   SE       VF, V8          Skip next instruction if VF == V8             R:[8, 15]
>>> $DD2    $3309   SE       V3, #09         Skip next instruction if V3 == $09            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $DD4    $2172   CALL     $172            Call subroutine at $172                       
    $DD6    $AD57   LD       I, $D57         Load $D57 into I register                     
    $DD8    $4A6B   SNE      VA, #6B         Skip next instruction if VA != $6B            R:[10]
>>> $DDA    $8774   ADD      V7, V7          V7 = (V7 + V7) & 0xFF, VF = carry             W:[7, 15] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $DDC    $B24B   JP       V0, $24B        Jump to $24B + V0                             R:[0]
>>> $DDE    $765B   ADD      V6, #5B         Add $5B to V6 (V6 = (V6 + $5B) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
>>> $DE0    $C236   RND      V2, #36         V2 = random() AND $36                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $DE2    $5FA1   UNKNOWN  $5FA1           Unknown 5xxx instruction (crashes in CUDA)    
    $DE4    $4D67   SNE      VD, #67         Skip next instruction if VD != $67            R:[13]
    $DE6    $3D1B   SE       VD, #1B         Skip next instruction if VD == $1B            R:[13]
    $DE8    $2F54   CALL     $F54            Call subroutine at $F54                       
    $DEA    $9989   UNKNOWN  $9989           Unknown 9xxx instruction (crashes in CUDA)    
    $DEC    $AC74   LD       I, $C74         Load $C74 into I register                     
    $DEE    $7036   ADD      V0, #36         Add $36 to V0 (V0 = (V0 + $36) & 0xFF)        W:[0] R:[0]
    $DF0    $BAFB   JP       V0, $AFB        Jump to $AFB + V0                             R:[0]
    $DF2    $97B1   UNKNOWN  $97B1           Unknown 9xxx instruction (crashes in CUDA)    
    $DF4    $A07F   LD       I, $07F         Load $07F into I register                     
    $DF6    $C87D   RND      V8, #7D         V8 = random() AND $7D                         W:[8]
    $DF8    $D4D2   DRW      V4, VD, #2      Draw 2-byte sprite at (V4, VD), VF = collision W:[15] R:[4, 13]
    $DFA    $BD42   JP       V0, $D42        Jump to $D42 + V0                             R:[0]
    $DFC    $2652   CALL     $652            Call subroutine at $652                       
    $DFE    $B72F   JP       V0, $72F        Jump to $72F + V0                             R:[0]
    $E00    $FAC4   UNKNOWN  $FAC4           Unknown Fxxx instruction (crashes in CUDA)    
    $E02    $9FFC   UNKNOWN  $9FFC           Unknown 9xxx instruction (crashes in CUDA)    
    $E04    $B13E   JP       V0, $13E        Jump to $13E + V0                             R:[0]
    $E06    $D50E   DRW      V5, V0, #E      Draw 14-byte sprite at (V5, V0), VF = collision W:[15] R:[0, 5]
    $E08    $30AB   SE       V0, #AB         Skip next instruction if V0 == $AB            R:[0]
    $E0A    $FC41   UNKNOWN  $FC41           Unknown Fxxx instruction (crashes in CUDA)    
>>> $E0C    $66A3   LD       V6, #A3         Load $A3 into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $E0E    $386B   SE       V8, #6B         Skip next instruction if V8 == $6B            R:[8]
    $E10    $FC07   LD       VC, DT          Load delay timer into VC                      W:[12]
    $E12    $53BE   UNKNOWN  $53BE           Unknown 5xxx instruction (crashes in CUDA)    
>>> $E14    $C7C1   RND      V7, #C1         V7 = random() AND $C1                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $E16    $15A9   JP       $5A9            Jump to address $5A9                          
    $E18    $D2A7   DRW      V2, VA, #7      Draw 7-byte sprite at (V2, VA), VF = collision W:[15] R:[2, 10]
    $E1A    $1FB8   JP       $FB8            Jump to address $FB8                          
    $E1C    $9314   UNKNOWN  $9314           Unknown 9xxx instruction (crashes in CUDA)    
    $E1E    $16B5   JP       $6B5            Jump to address $6B5                          
    $E20    $EB7A   UNKNOWN  $EB7A           Unknown Exxx instruction (crashes in CUDA)    
    $E22    $A484   LD       I, $484         Load $484 into I register                     
>>> $E24    $4378   SNE      V3, #78         Skip next instruction if V3 != $78            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $E26    $08DE   NOP      $08DE           No operation (ignored by CUDA kernel)         
    $E28    $50E0   SE       V0, VE          Skip next instruction if V0 == VE             R:[0, 14]
    $E2A    $EA53   UNKNOWN  $EA53           Unknown Exxx instruction (crashes in CUDA)    
    $E2C    $0664   NOP      $0664           No operation (ignored by CUDA kernel)         
    $E2E    $5032   UNKNOWN  $5032           Unknown 5xxx instruction (crashes in CUDA)    
    $E30    $98DF   UNKNOWN  $98DF           Unknown 9xxx instruction (crashes in CUDA)    
>>> $E32    $C5E8   RND      V5, #E8         V5 = random() AND $E8                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $E34    $DA15   DRW      VA, V1, #5      Draw 5-byte sprite at (VA, V1), VF = collision W:[15] R:[1, 10]
>>> $E36    $7730   ADD      V7, #30         Add $30 to V7 (V7 = (V7 + $30) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $E38    $ABAE   LD       I, $BAE         Load $BAE into I register                     
    $E3A    $F63D   UNKNOWN  $F63D           Unknown Fxxx instruction (crashes in CUDA)    
    $E3C    $E57C   UNKNOWN  $E57C           Unknown Exxx instruction (crashes in CUDA)    
    $E3E    $A13D   LD       I, $13D         Load $13D into I register                     
    $E40    $8146   SHR      V1              V1 = V1 >> 1, VF = LSB                        W:[1, 15] R:[1]
    $E42    $8ACF   UNKNOWN  $8ACF           Unknown 8xxx instruction (crashes in CUDA)    
    $E44    $6FCB   LD       VF, #CB         Load $CB into VF                              W:[15]
    $E46    $F814   UNKNOWN  $F814           Unknown Fxxx instruction (crashes in CUDA)    
    $E48    $A057   LD       I, $057         Load $057 into I register                     
    $E4A    $7B2C   ADD      VB, #2C         Add $2C to VB (VB = (VB + $2C) & 0xFF)        W:[11] R:[11]
    $E4C    $EB67   UNKNOWN  $EB67           Unknown Exxx instruction (crashes in CUDA)    
    $E4E    $500D   UNKNOWN  $500D           Unknown 5xxx instruction (crashes in CUDA)    
    $E50    $8DEB   UNKNOWN  $8DEB           Unknown 8xxx instruction (crashes in CUDA)    
>>> $E52    $42CF   SNE      V2, #CF         Skip next instruction if V2 != $CF            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $E54    $381F   SE       V8, #1F         Skip next instruction if V8 == $1F            R:[8]
    $E56    $E9FF   UNKNOWN  $E9FF           Unknown Exxx instruction (crashes in CUDA)    
    $E58    $19E9   JP       $9E9            Jump to address $9E9                          
    $E5A    $F88A   UNKNOWN  $F88A           Unknown Fxxx instruction (crashes in CUDA)    
    $E5C    $1C2E   JP       $C2E            Jump to address $C2E                          
    $E5E    $9FE4   UNKNOWN  $9FE4           Unknown 9xxx instruction (crashes in CUDA)    
    $E60    $1633   JP       $633            Jump to address $633                          
    $E62    $90E6   UNKNOWN  $90E6           Unknown 9xxx instruction (crashes in CUDA)    
    $E64    $DE7B   DRW      VE, V7, #B      Draw 11-byte sprite at (VE, V7), VF = collision W:[15] R:[7, 14]
>>> $E66    $3391   SE       V3, #91         Skip next instruction if V3 == $91            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $E68    $08F2   NOP      $08F2           No operation (ignored by CUDA kernel)         
    $E6A    $D56A   DRW      V5, V6, #A      Draw 10-byte sprite at (V5, V6), VF = collision W:[15] R:[5, 6]
    $E6C    $568C   UNKNOWN  $568C           Unknown 5xxx instruction (crashes in CUDA)    
>>> $E6E    $3625   SE       V6, #25         Skip next instruction if V6 == $25            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $E70    $8AA5   SUB      VA, VA          VA = (VA - VA) & 0xFF, VF = NOT borrow        W:[10, 15] R:[10]
    $E72    $F4C9   UNKNOWN  $F4C9           Unknown Fxxx instruction (crashes in CUDA)    
    $E74    $CD17   RND      VD, #17         VD = random() AND $17                         W:[13]
    $E76    $B6EE   JP       V0, $6EE        Jump to $6EE + V0                             R:[0]
    $E78    $70C9   ADD      V0, #C9         Add $C9 to V0 (V0 = (V0 + $C9) & 0xFF)        W:[0] R:[0]
    $E7A    $A219   LD       I, $219         Load $219 into I register                     
    $E7C    $00E3   NOP      $00E3           No operation (ignored by CUDA kernel)         
>>> $E7E    $761E   ADD      V6, #1E         Add $1E to V6 (V6 = (V6 + $1E) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $E80    $8179   UNKNOWN  $8179           Unknown 8xxx instruction (crashes in CUDA)    
    $E82    $A590   LD       I, $590         Load $590 into I register                     
    $E84    $0696   NOP      $0696           No operation (ignored by CUDA kernel)         
    $E86    $2B04   CALL     $B04            Call subroutine at $B04                       
    $E88    $012A   NOP      $012A           No operation (ignored by CUDA kernel)         
    $E8A    $A091   LD       I, $091         Load $091 into I register                     
    $E8C    $12B5   JP       $2B5            Jump to address $2B5                          
    $E8E    $2DEF   CALL     $DEF            Call subroutine at $DEF                       
>>> $E90    $47ED   SNE      V7, #ED         Skip next instruction if V7 != $ED            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $E92    $69B9   LD       V9, #B9         Load $B9 into V9                              W:[9]
    $E94    $D75E   DRW      V7, V5, #E      Draw 14-byte sprite at (V7, V5), VF = collision W:[15] R:[5, 7]
    $E96    $EDC3   UNKNOWN  $EDC3           Unknown Exxx instruction (crashes in CUDA)    
    $E98    $5851   UNKNOWN  $5851           Unknown 5xxx instruction (crashes in CUDA)    
    $E9A    $6AFF   LD       VA, #FF         Load $FF into VA                              W:[10]
    $E9C    $EAA5   UNKNOWN  $EAA5           Unknown Exxx instruction (crashes in CUDA)    
    $E9E    $5204   UNKNOWN  $5204           Unknown 5xxx instruction (crashes in CUDA)    
>>> $EA0    $84C2   AND      V4, VC          V4 = V4 AND VC, VF = 0                        W:[4, 15] R:[4, 12]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $EA2    $1F24   JP       $F24            Jump to address $F24                          
    $EA4    $4F52   SNE      VF, #52         Skip next instruction if VF != $52            R:[15]
    $EA6    $F054   UNKNOWN  $F054           Unknown Fxxx instruction (crashes in CUDA)    
    $EA8    $AEAD   LD       I, $EAD         Load $EAD into I register                     
    $EAA    $CA16   RND      VA, #16         VA = random() AND $16                         W:[10]
    $EAC    $D446   DRW      V4, V4, #6      Draw 6-byte sprite at (V4, V4), VF = collision W:[15] R:[4]
    $EAE    $7BE1   ADD      VB, #E1         Add $E1 to VB (VB = (VB + $E1) & 0xFF)        W:[11] R:[11]
    $EB0    $1D9A   JP       $D9A            Jump to address $D9A                          
    $EB2    $D3D6   DRW      V3, VD, #6      Draw 6-byte sprite at (V3, VD), VF = collision W:[15] R:[3, 13]
>>> $EB4    $8A53   XOR      VA, V5          VA = VA XOR V5, VF = 0                        W:[10, 15] R:[5, 10]
          ^-- SORTING RELATED: Logical operation on V[5] (sets VF=0 in CUDA)
    $EB6    $681F   LD       V8, #1F         Load $1F into V8                              W:[8]
    $EB8    $AA1F   LD       I, $A1F         Load $A1F into I register                     
    $EBA    $6143   LD       V1, #43         Load $43 into V1                              W:[1]
    $EBC    $FD9F   UNKNOWN  $FD9F           Unknown Fxxx instruction (crashes in CUDA)    
    $EBE    $E05F   UNKNOWN  $E05F           Unknown Exxx instruction (crashes in CUDA)    
    $EC0    $C9F0   RND      V9, #F0         V9 = random() AND $F0                         W:[9]
    $EC2    $6972   LD       V9, #72         Load $72 into V9                              W:[9]
    $EC4    $C118   RND      V1, #18         V1 = random() AND $18                         W:[1]
>>> $EC6    $77BF   ADD      V7, #BF         Add $BF to V7 (V7 = (V7 + $BF) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $EC8    $E00C   UNKNOWN  $E00C           Unknown Exxx instruction (crashes in CUDA)    
    $ECA    $C8D2   RND      V8, #D2         V8 = random() AND $D2                         W:[8]
>>> $ECC    $451C   SNE      V5, #1C         Skip next instruction if V5 != $1C            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $ECE    $ED1A   UNKNOWN  $ED1A           Unknown Exxx instruction (crashes in CUDA)    
    $ED0    $093C   NOP      $093C           No operation (ignored by CUDA kernel)         
    $ED2    $BC40   JP       V0, $C40        Jump to $C40 + V0                             R:[0]
    $ED4    $F2C6   UNKNOWN  $F2C6           Unknown Fxxx instruction (crashes in CUDA)    
    $ED6    $BBA5   JP       V0, $BA5        Jump to $BA5 + V0                             R:[0]
    $ED8    $7CF4   ADD      VC, #F4         Add $F4 to VC (VC = (VC + $F4) & 0xFF)        W:[12] R:[12]
    $EDA    $E2B6   UNKNOWN  $E2B6           Unknown Exxx instruction (crashes in CUDA)    
    $EDC    $DD8A   DRW      VD, V8, #A      Draw 10-byte sprite at (VD, V8), VF = collision W:[15] R:[8, 13]
    $EDE    $5558   UNKNOWN  $5558           Unknown 5xxx instruction (crashes in CUDA)    
    $EE0    $4AD3   SNE      VA, #D3         Skip next instruction if VA != $D3            R:[10]
    $EE2    $2EF0   CALL     $EF0            Call subroutine at $EF0                       
    $EE4    $AC90   LD       I, $C90         Load $C90 into I register                     
    $EE6    $7A86   ADD      VA, #86         Add $86 to VA (VA = (VA + $86) & 0xFF)        W:[10] R:[10]
    $EE8    $29F0   CALL     $9F0            Call subroutine at $9F0                       
    $EEA    $D7E3   DRW      V7, VE, #3      Draw 3-byte sprite at (V7, VE), VF = collision W:[15] R:[7, 14]
    $EEC    $8FBD   UNKNOWN  $8FBD           Unknown 8xxx instruction (crashes in CUDA)    
>>> $EEE    $453F   SNE      V5, #3F         Skip next instruction if V5 != $3F            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $EF0    $FDB1   UNKNOWN  $FDB1           Unknown Fxxx instruction (crashes in CUDA)    
    $EF2    $1192   JP       $192            Jump to address $192                          
    $EF4    $033A   NOP      $033A           No operation (ignored by CUDA kernel)         
    $EF6    $97D6   UNKNOWN  $97D6           Unknown 9xxx instruction (crashes in CUDA)    
>>> $EF8    $C77C   RND      V7, #7C         V7 = random() AND $7C                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $EFA    $F9D3   UNKNOWN  $F9D3           Unknown Fxxx instruction (crashes in CUDA)    
    $EFC    $DD52   DRW      VD, V5, #2      Draw 2-byte sprite at (VD, V5), VF = collision W:[15] R:[5, 13]
    $EFE    $7039   ADD      V0, #39         Add $39 to V0 (V0 = (V0 + $39) & 0xFF)        W:[0] R:[0]
>>> $F00    $4407   SNE      V4, #07         Skip next instruction if V4 != $07            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $F02    $F15E   UNKNOWN  $F15E           Unknown Fxxx instruction (crashes in CUDA)    
>>> $F04    $43C8   SNE      V3, #C8         Skip next instruction if V3 != $C8            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
>>> $F06    $86EE   SHL      V6              V6 = (V6 << 1) & 0xFF, VF = MSB               W:[6, 15] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $F08    $CB75   RND      VB, #75         VB = random() AND $75                         W:[11]
>>> $F0A    $7412   ADD      V4, #12         Add $12 to V4 (V4 = (V4 + $12) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $F0C    $1A2D   JP       $A2D            Jump to address $A2D                          
    $F0E    $F46E   UNKNOWN  $F46E           Unknown Fxxx instruction (crashes in CUDA)    
    $F10    $D25A   DRW      V2, V5, #A      Draw 10-byte sprite at (V2, V5), VF = collision W:[15] R:[2, 5]
    $F12    $1CD7   JP       $CD7            Jump to address $CD7                          
    $F14    $0C50   NOP      $0C50           No operation (ignored by CUDA kernel)         
    $F16    $D5D5   DRW      V5, VD, #5      Draw 5-byte sprite at (V5, VD), VF = collision W:[15] R:[5, 13]
    $F18    $B8BE   JP       V0, $8BE        Jump to $8BE + V0                             R:[0]
    $F1A    $A7D0   LD       I, $7D0         Load $7D0 into I register                     
    $F1C    $3831   SE       V8, #31         Skip next instruction if V8 == $31            R:[8]
    $F1E    $E3A9   UNKNOWN  $E3A9           Unknown Exxx instruction (crashes in CUDA)    
    $F20    $E918   UNKNOWN  $E918           Unknown Exxx instruction (crashes in CUDA)    
>>> $F22    $8D74   ADD      VD, V7          VD = (VD + V7) & 0xFF, VF = carry             W:[13, 15] R:[7, 13]
          ^-- SORTING RELATED: Arithmetic on sorted registers V[7]
    $F24    $487F   SNE      V8, #7F         Skip next instruction if V8 != $7F            R:[8]
>>> $F26    $3719   SE       V7, #19         Skip next instruction if V7 == $19            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $F28    $EDA6   UNKNOWN  $EDA6           Unknown Exxx instruction (crashes in CUDA)    
    $F2A    $6038   LD       V0, #38         Load $38 into V0                              W:[0]
    $F2C    $F7F7   UNKNOWN  $F7F7           Unknown Fxxx instruction (crashes in CUDA)    
    $F2E    $7E18   ADD      VE, #18         Add $18 to VE (VE = (VE + $18) & 0xFF)        W:[14] R:[14]
    $F30    $D0E8   DRW      V0, VE, #8      Draw 8-byte sprite at (V0, VE), VF = collision W:[15] R:[0, 14]
>>> $F32    $7684   ADD      V6, #84         Add $84 to V6 (V6 = (V6 + $84) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $F34    $7023   ADD      V0, #23         Add $23 to V0 (V0 = (V0 + $23) & 0xFF)        W:[0] R:[0]
>>> $F36    $7430   ADD      V4, #30         Add $30 to V4 (V4 = (V4 + $30) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $F38    $DFAA   DRW      VF, VA, #A      Draw 10-byte sprite at (VF, VA), VF = collision W:[15] R:[10, 15]
    $F3A    $E693   UNKNOWN  $E693           Unknown Exxx instruction (crashes in CUDA)    
    $F3C    $9C99   UNKNOWN  $9C99           Unknown 9xxx instruction (crashes in CUDA)    
    $F3E    $41F3   SNE      V1, #F3         Skip next instruction if V1 != $F3            R:[1]
    $F40    $409A   SNE      V0, #9A         Skip next instruction if V0 != $9A            R:[0]
>>> $F42    $84C4   ADD      V4, VC          V4 = (V4 + VC) & 0xFF, VF = carry             W:[4, 15] R:[4, 12]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $F44    $B032   JP       V0, $032        Jump to $032 + V0                             R:[0]
    $F46    $94B4   UNKNOWN  $94B4           Unknown 9xxx instruction (crashes in CUDA)    
    $F48    $2C90   CALL     $C90            Call subroutine at $C90                       
    $F4A    $50AC   UNKNOWN  $50AC           Unknown 5xxx instruction (crashes in CUDA)    
    $F4C    $CB02   RND      VB, #02         VB = random() AND $02                         W:[11]
>>> $F4E    $85AE   SHL      V5              V5 = (V5 << 1) & 0xFF, VF = MSB               W:[5, 15] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $F50    $60A7   LD       V0, #A7         Load $A7 into V0                              W:[0]
>>> $F52    $8481   OR       V4, V8          V4 = V4 OR V8, VF = 0                         W:[4, 15] R:[4, 8]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $F54    $2489   CALL     $489            Call subroutine at $489                       
    $F56    $039A   NOP      $039A           No operation (ignored by CUDA kernel)         
    $F58    $9149   UNKNOWN  $9149           Unknown 9xxx instruction (crashes in CUDA)    
    $F5A    $8FC2   AND      VF, VC          VF = VF AND VC, VF = 0                        W:[15] R:[12, 15]
    $F5C    $B1B4   JP       V0, $1B4        Jump to $1B4 + V0                             R:[0]
    $F5E    $0C07   NOP      $0C07           No operation (ignored by CUDA kernel)         
    $F60    $58A1   UNKNOWN  $58A1           Unknown 5xxx instruction (crashes in CUDA)    
    $F62    $CE4D   RND      VE, #4D         VE = random() AND $4D                         W:[14]
    $F64    $213F   CALL     $13F            Call subroutine at $13F                       
    $F66    $AACE   LD       I, $ACE         Load $ACE into I register                     
    $F68    $A1DE   LD       I, $1DE         Load $1DE into I register                     
    $F6A    $3D30   SE       VD, #30         Skip next instruction if VD == $30            R:[13]
    $F6C    $AF99   LD       I, $F99         Load $F99 into I register                     
    $F6E    $5258   UNKNOWN  $5258           Unknown 5xxx instruction (crashes in CUDA)    
    $F70    $A151   LD       I, $151         Load $151 into I register                     
    $F72    $20F9   CALL     $0F9            Call subroutine at $0F9                       
    $F74    $2E5D   CALL     $E5D            Call subroutine at $E5D                       
    $F76    $A432   LD       I, $432         Load $432 into I register                     
    $F78    $CF09   RND      VF, #09         VF = random() AND $09                         W:[15]
    $F7A    $20DB   CALL     $0DB            Call subroutine at $0DB                       
    $F7C    $5866   UNKNOWN  $5866           Unknown 5xxx instruction (crashes in CUDA)    
>>> $F7E    $644C   LD       V4, #4C         Load $4C into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $F80    $2DF7   CALL     $DF7            Call subroutine at $DF7                       
    $F82    $FD62   UNKNOWN  $FD62           Unknown Fxxx instruction (crashes in CUDA)    
>>> $F84    $7715   ADD      V7, #15         Add $15 to V7 (V7 = (V7 + $15) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $F86    $2069   CALL     $069            Call subroutine at $069                       
    $F88    $8FB3   XOR      VF, VB          VF = VF XOR VB, VF = 0                        W:[15] R:[11, 15]
    $F8A    $B7AE   JP       V0, $7AE        Jump to $7AE + V0                             R:[0]
    $F8C    $61A9   LD       V1, #A9         Load $A9 into V1                              W:[1]
    $F8E    $2FA2   CALL     $FA2            Call subroutine at $FA2                       
>>> $F90    $344B   SE       V4, #4B         Skip next instruction if V4 == $4B            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $F92    $788E   ADD      V8, #8E         Add $8E to V8 (V8 = (V8 + $8E) & 0xFF)        W:[8] R:[8]
    $F94    $C857   RND      V8, #57         V8 = random() AND $57                         W:[8]
>>> $F96    $642F   LD       V4, #2F         Load $2F into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $F98    $5796   UNKNOWN  $5796           Unknown 5xxx instruction (crashes in CUDA)    
    $F9A    $A367   LD       I, $367         Load $367 into I register                     
    $F9C    $F9B7   UNKNOWN  $F9B7           Unknown Fxxx instruction (crashes in CUDA)    
    $F9E    $B1E4   JP       V0, $1E4        Jump to $1E4 + V0                             R:[0]
    $FA0    $B656   JP       V0, $656        Jump to $656 + V0                             R:[0]
    $FA2    $2FDE   CALL     $FDE            Call subroutine at $FDE                       
>>> $FA4    $45AC   SNE      V5, #AC         Skip next instruction if V5 != $AC            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $FA6    $B199   JP       V0, $199        Jump to $199 + V0                             R:[0]
    $FA8    $3B4B   SE       VB, #4B         Skip next instruction if VB == $4B            R:[11]
    $FAA    $C82C   RND      V8, #2C         V8 = random() AND $2C                         W:[8]
    $FAC    $310F   SE       V1, #0F         Skip next instruction if V1 == $0F            R:[1]
    $FAE    $E639   UNKNOWN  $E639           Unknown Exxx instruction (crashes in CUDA)    
    $FB0    $7D3A   ADD      VD, #3A         Add $3A to VD (VD = (VD + $3A) & 0xFF)        W:[13] R:[13]
    $FB2    $8BEC   UNKNOWN  $8BEC           Unknown 8xxx instruction (crashes in CUDA)    
>>> $FB4    $368A   SE       V6, #8A         Skip next instruction if V6 == $8A            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $FB6    $89CF   UNKNOWN  $89CF           Unknown 8xxx instruction (crashes in CUDA)    
    $FB8    $0873   NOP      $0873           No operation (ignored by CUDA kernel)         
    $FBA    $3D09   SE       VD, #09         Skip next instruction if VD == $09            R:[13]
    $FBC    $5425   UNKNOWN  $5425           Unknown 5xxx instruction (crashes in CUDA)    
    $FBE    $9BD4   UNKNOWN  $9BD4           Unknown 9xxx instruction (crashes in CUDA)    
>>> $FC0    $449B   SNE      V4, #9B         Skip next instruction if V4 != $9B            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $FC2    $E2A0   UNKNOWN  $E2A0           Unknown Exxx instruction (crashes in CUDA)    
    $FC4    $D357   DRW      V3, V5, #7      Draw 7-byte sprite at (V3, V5), VF = collision W:[15] R:[3, 5]
    $FC6    $3C21   SE       VC, #21         Skip next instruction if VC == $21            R:[12]
>>> $FC8    $7718   ADD      V7, #18         Add $18 to V7 (V7 = (V7 + $18) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $FCA    $946B   UNKNOWN  $946B           Unknown 9xxx instruction (crashes in CUDA)    
    $FCC    $E664   UNKNOWN  $E664           Unknown Exxx instruction (crashes in CUDA)    
>>> $FCE    $667E   LD       V6, #7E         Load $7E into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $FD0    $5EB1   UNKNOWN  $5EB1           Unknown 5xxx instruction (crashes in CUDA)    
    $FD2    $7FB1   ADD      VF, #B1         Add $B1 to VF (VF = (VF + $B1) & 0xFF)        W:[15] R:[15]
    $FD4    $6D12   LD       VD, #12         Load $12 into VD                              W:[13]
>>> $FD6    $67F3   LD       V7, #F3         Load $F3 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $FD8    $6C47   LD       VC, #47         Load $47 into VC                              W:[12]
>>> $FDA    $45EC   SNE      V5, #EC         Skip next instruction if V5 != $EC            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $FDC    $8819   UNKNOWN  $8819           Unknown 8xxx instruction (crashes in CUDA)    
    $FDE    $3E71   SE       VE, #71         Skip next instruction if VE == $71            R:[14]
    $FE0    $D475   DRW      V4, V7, #5      Draw 5-byte sprite at (V4, V7), VF = collision W:[15] R:[4, 7]
    $FE2    $172F   JP       $72F            Jump to address $72F                          
>>> $FE4    $66D0   LD       V6, #D0         Load $D0 into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $FE6    $F753   UNKNOWN  $F753           Unknown Fxxx instruction (crashes in CUDA)    
    $FE8    $1299   JP       $299            Jump to address $299                          
    $FEA    $CDB2   RND      VD, #B2         VD = random() AND $B2                         W:[13]
    $FEC    $8EEB   UNKNOWN  $8EEB           Unknown 8xxx instruction (crashes in CUDA)    
>>> $FEE    $C603   RND      V6, #03         V6 = random() AND $03                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $FF0    $BBB0   JP       V0, $BB0        Jump to $BB0 + V0                             R:[0]
    $FF2    $D4B0   DRW      V4, VB, #0      Draw 0-byte sprite at (V4, VB), VF = collision W:[15] R:[4, 11]
    $FF4    $E45B   UNKNOWN  $E45B           Unknown Exxx instruction (crashes in CUDA)    
    $FF6    $6B75   LD       VB, #75         Load $75 into VB                              W:[11]
    $FF8    $A735   LD       I, $735         Load $735 into I register                     
    $FFA    $B6A6   JP       V0, $6A6        Jump to $6A6 + V0                             R:[0]
    $FFC    $071C   NOP      $071C           No operation (ignored by CUDA kernel)         
    $FFE    $A550   LD       I, $550         Load $550 into I register                     

================================================================================
REGISTER FLOW ANALYSIS
================================================================================

Register modifications (V0-V7 focus):
  V0: Modified at 31 locations
       Addresses: $29A, $30C, $42C, $49C, $50C, $510, $540, $5A6, $5BC, $5DC, $62A, $660, $694, $754, $78E, $7EA, $990, $9C2, $9FC, $A50, $AB6, $AEC, $C08, $D5A, $D9C, $DEE, $E78, $EFE, $F2A, $F34, $F50
  V1: Modified at 19 locations
       Addresses: $408, $648, $674, $71C, $816, $860, $87A, $8E2, $ADA, $B14, $B1C, $BAC, $CA2, $D5A, $DB4, $E40, $EBA, $EC4, $F8C
  V2: Modified at 18 locations
       Addresses: $2E4, $354, $37A, $3C0, $46C, $4FA, $548, $6CE, $790, $806, $8D6, $9BA, $A1C, $AC8, $AE0, $CF4, $D5A, $DE0
  V3: Modified at 22 locations
       Addresses: $2EA, $2F8, $456, $4B6, $4DC, $598, $692, $6A8, $6AC, $730, $796, $904, $964, $9E8, $A8E, $B10, $C3E, $D2A, $D5A, $D86, $D9A, $DA6
  V4: Modified at 31 locations
       Addresses: $3A0, $3BE, $3D6, $58C, $658, $6C6, $6D2, $744, $776, $780, $78A, $84C, $8A2, $938, $A12, $B76, $BF0, $C68, $C94, $C98, $CE8, $D5A, $D84, $DB0, $EA0, $F0A, $F36, $F42, $F52, $F7E, $F96
  V5: Modified at 20 locations
       Addresses: $32A, $386, $3A8, $4A4, $554, $57C, $642, $68A, $6BE, $73E, $8A6, $968, $A60, $AE2, $D80, $DAC, $DB2, $DBA, $E32, $F4E
  V6: Modified at 32 locations
       Addresses: $2DA, $406, $496, $4D6, $5C2, $5D8, $5EC, $6AE, $6D4, $706, $712, $772, $81A, $888, $894, $A7E, $AAC, $B12, $BC4, $BE4, $C38, $D06, $D64, $D7E, $DDE, $E0C, $E7E, $F06, $F32, $FCE, $FE4, $FEE
  V7: Modified at 30 locations
       Addresses: $212, $2CC, $4EA, $50A, $52C, $664, $6DE, $72A, $77A, $7B0, $80E, $848, $874, $892, $8FE, $974, $98E, $AD6, $C7C, $CA4, $D88, $DC2, $DDA, $E14, $E36, $EC6, $EF8, $F84, $FC8, $FD6

================================================================================
CONTROL FLOW ANALYSIS
================================================================================

201 control transfers detected:
  $20E → $EAE (FORWARD)
  $210 → $FC7 (FORWARD)
  $21C → $C58 (FORWARD)
  $224 → $D5F (FORWARD)
  $23E → $978 (FORWARD)
  $254 → $557 (FORWARD)
  $260 → $B04 (FORWARD)
  $266 → $91C (FORWARD)
  $284 → $C1E (FORWARD)
  $28C → $F95 (FORWARD)
  $2B4 → $BCF (FORWARD)
  $2B6 → $28D (LOOP)
  $2BA → $F0E (FORWARD)
  $2C0 → $3F9 (FORWARD)
  $2E6 → $EF2 (FORWARD)
  $2F4 → $2D7 (LOOP)
  $312 → $4F5 (FORWARD)
  $326 → $BA0 (FORWARD)
  $342 → $A8A (FORWARD)
  $348 → $EC4 (FORWARD)
  $35C → $055 (LOOP)
  $37C → $0E7 (LOOP)
  $37E → $569 (FORWARD)
  $380 → $B7E (FORWARD)
  $382 → $4D7 (FORWARD)
  $3A4 → $B3D (FORWARD)
  $3A6 → $D55 (FORWARD)
  $3AC → $B3E (FORWARD)
  $3B4 → $5E2 (FORWARD)
  $3BC → $83C (FORWARD)
  $3DC → $E95 (FORWARD)
  $3EA → $BB8 (FORWARD)
  $3EC → $C48 (FORWARD)
  $3F6 → $EAC (FORWARD)
  $410 → $F54 (FORWARD)
  $41C → $FAC (FORWARD)
  $442 → $955 (FORWARD)
  $446 → $8C5 (FORWARD)
  $44A → $C4F (FORWARD)
  $470 → $BB2 (FORWARD)
  $488 → $A53 (FORWARD)
  $498 → $5CB (FORWARD)
  $49E → $2FD (LOOP)
  $4A0 → $50C (FORWARD)
  $4AA → $B89 (FORWARD)
  $4AC → $897 (FORWARD)
  $4B8 → $58D (FORWARD)
  $4C6 → $DD8 (FORWARD)
  $4FE → $8BC (FORWARD)
  $522 → $186 (LOOP)
  $52E → $02B (LOOP)
  $53C → $BFE (FORWARD)
  $54C → $BDC (FORWARD)
  $55E → $984 (FORWARD)
  $572 → $676 (FORWARD)
  $58A → $F2F (FORWARD)
  $5A2 → $2F4 (LOOP)
  $5B8 → $588 (LOOP)
  $5BA → $9A0 (FORWARD)
  $5C0 → $931 (FORWARD)
  $5CC → $AC7 (FORWARD)
  $5CE → $3BD (LOOP)
  $5D4 → $387 (LOOP)
  $5D6 → $7DF (FORWARD)
  $5E4 → $47C (LOOP)
  $5FA → $90C (FORWARD)
  $5FE → $65F (FORWARD)
  $62E → $F13 (FORWARD)
  $63E → $351 (LOOP)
  $66E → $C98 (FORWARD)
  $672 → $803 (FORWARD)
  $676 → $BF8 (FORWARD)
  $6C8 → $14C (LOOP)
  $6CC → $5B8 (LOOP)
  $6D6 → $47F (LOOP)
  $6EC → $AAA (FORWARD)
  $6F0 → $4C3 (LOOP)
  $6F2 → $CAA (FORWARD)
  $6FA → $75E (FORWARD)
  $720 → $306 (LOOP)
  $740 → $EE1 (FORWARD)
  $752 → $0E0 (LOOP)
  $756 → $576 (LOOP)
  $75A → $2FF (LOOP)
  $75E → $297 (LOOP)
  $77C → $73D (LOOP)
  $7B6 → $7CB (FORWARD)
  $7D8 → $05A (LOOP)
  $7DE → $76A (LOOP)
  $7E2 → $A91 (FORWARD)
  $80C → $7A0 (LOOP)
  $81E → $247 (LOOP)
  $828 → $2E5 (LOOP)
  $83C → $5E5 (LOOP)
  $854 → $C90 (FORWARD)
  $870 → $078 (LOOP)
  $896 → $2DC (LOOP)
  $898 → $C15 (FORWARD)
  $8A0 → $2E8 (LOOP)
  $8AE → $516 (LOOP)
  $8CA → $9AC (FORWARD)
  $900 → $D5F (FORWARD)
  $920 → $D65 (FORWARD)
  $926 → $132 (LOOP)
  $936 → $0BC (LOOP)
  $948 → $477 (LOOP)
  $978 → $D77 (FORWARD)
  $996 → $ACE (FORWARD)
  $9A4 → $360 (LOOP)
  $9AA → $CA7 (FORWARD)
  $9D2 → $0D9 (LOOP)
  $9D8 → $B24 (FORWARD)
  $9F0 → $53C (LOOP)
  $A04 → $B1D (FORWARD)
  $A06 → $84D (LOOP)
  $A18 → $7B5 (LOOP)
  $A24 → $1B0 (LOOP)
  $A36 → $975 (LOOP)
  $A3A → $F82 (FORWARD)
  $A44 → $B53 (FORWARD)
  $A64 → $64F (LOOP)
  $A82 → $1F0 (LOOP)
  $A88 → $BA2 (FORWARD)
  $AAE → $FC4 (FORWARD)
  $AB2 → $90F (LOOP)
  $AE6 → $A0F (LOOP)
  $AEA → $20E (LOOP)
  $AF4 → $093 (LOOP)
  $B04 → $BE2 (FORWARD)
  $B0E → $4A2 (LOOP)
  $B22 → $837 (LOOP)
  $B26 → $826 (LOOP)
  $B2E → $B2B (LOOP)
  $B36 → $DF7 (FORWARD)
  $B3E → $227 (LOOP)
  $B50 → $098 (LOOP)
  $B62 → $556 (LOOP)
  $B74 → $F56 (FORWARD)
  $BBE → $E26 (FORWARD)
  $BCC → $44C (LOOP)
  $BCE → $E5B (FORWARD)
  $BD4 → $EB3 (FORWARD)
  $BE6 → $2E2 (LOOP)
  $BEC → $540 (LOOP)
  $BFA → $F12 (FORWARD)
  $C04 → $25C (LOOP)
  $C0A → $501 (LOOP)
  $C0C → $4D5 (LOOP)
  $C0E → $85E (LOOP)
  $C22 → $F71 (FORWARD)
  $C46 → $75C (LOOP)
  $C58 → $C8A (FORWARD)
  $C62 → $2D2 (LOOP)
  $C66 → $780 (LOOP)
  $C76 → $CFD (FORWARD)
  $C8A → $7DF (LOOP)
  $CC4 → $66E (LOOP)
  $CCE → $7F8 (LOOP)
  $CD6 → $023 (LOOP)
  $CDA → $9BF (LOOP)
  $D32 → $DF7 (FORWARD)
  $D34 → $4DE (LOOP)
  $D50 → $F28 (FORWARD)
  $D74 → $D8F (FORWARD)
  $D8E → $947 (LOOP)
  $DA4 → $BC9 (LOOP)
  $DAA → $004 (LOOP)
  $DB6 → $83C (LOOP)
  $DBE → $190 (LOOP)
  $DCE → $997 (LOOP)
  $DD4 → $172 (LOOP)
  $DE8 → $F54 (FORWARD)
  $DFC → $652 (LOOP)
  $E16 → $5A9 (LOOP)
  $E1A → $FB8 (FORWARD)
  $E1E → $6B5 (LOOP)
  $E58 → $9E9 (LOOP)
  $E5C → $C2E (LOOP)
  $E60 → $633 (LOOP)
  $E86 → $B04 (LOOP)
  $E8C → $2B5 (LOOP)
  $E8E → $DEF (LOOP)
  $EA2 → $F24 (FORWARD)
  $EB0 → $D9A (LOOP)
  $EE2 → $EF0 (FORWARD)
  $EE8 → $9F0 (LOOP)
  $EF2 → $192 (LOOP)
  $F0C → $A2D (LOOP)
  $F12 → $CD7 (LOOP)
  $F48 → $C90 (LOOP)
  $F54 → $489 (LOOP)
  $F64 → $13F (LOOP)
  $F72 → $0F9 (LOOP)
  $F74 → $E5D (LOOP)
  $F7A → $0DB (LOOP)
  $F80 → $DF7 (LOOP)
  $F86 → $069 (LOOP)
  $F8E → $FA2 (FORWARD)
  $FA2 → $FDE (FORWARD)
  $FE2 → $72F (LOOP)
  $FE8 → $299 (LOOP)

================================================================================
SORTING INSTRUCTION ANALYSIS
================================================================================

260 instructions identified as sorting-related:

Compares sorted registers V[6]: 14 instructions
  $200: SNE  V6, #30      ; Skip next instruction if V6 != $30[ Reads:[6]]
  $22A: SE   V6, #AB      ; Skip next instruction if V6 == $AB[ Reads:[6]]
  $560: SNE  V6, #6F      ; Skip next instruction if V6 != $6F[ Reads:[6]]
  $578: SNE  V6, #0B      ; Skip next instruction if V6 != $0B[ Reads:[6]]
  $64C: SNE  V6, #66      ; Skip next instruction if V6 != $66[ Reads:[6]]
  $654: SNE  V6, #5B      ; Skip next instruction if V6 != $5B[ Reads:[6]]
  $74A: SNE  V6, #D8      ; Skip next instruction if V6 != $D8[ Reads:[6]]
  $868: SE   V6, #FA      ; Skip next instruction if V6 == $FA[ Reads:[6]]
  $A98: SE   V6, #7E      ; Skip next instruction if V6 == $7E[ Reads:[6]]
  $B46: SE   V6, #84      ; Skip next instruction if V6 == $84[ Reads:[6]]
  $BAA: SNE  V6, #FC      ; Skip next instruction if V6 != $FC[ Reads:[6]]
  $C52: SE   V6, #92      ; Skip next instruction if V6 == $92[ Reads:[6]]
  $E6E: SE   V6, #25      ; Skip next instruction if V6 == $25[ Reads:[6]]
  $FB4: SE   V6, #8A      ; Skip next instruction if V6 == $8A[ Reads:[6]]

Modifies sorted registers V[7]: 30 instructions
  $212: RND  V7, #44      ; V7 = random() AND $44[Writes:[7] ]
  $2CC: ADD  V7, #11      ; Add $11 to V7 (V7 = (V7 + $11) & 0xFF)[Writes:[7] Reads:[7]]
  $4EA: LD   V7, #61      ; Load $61 into V7[Writes:[7] ]
  $50A: SHL  V7           ; V7 = (V7 << 1) & 0xFF, VF = MSB[Writes:[7, 15] Reads:[7]]
  $52C: ADD  V7, #E0      ; Add $E0 to V7 (V7 = (V7 + $E0) & 0xFF)[Writes:[7] Reads:[7]]
  $664: RND  V7, #1E      ; V7 = random() AND $1E[Writes:[7] ]
  $6DE: LD   V7, #3E      ; Load $3E into V7[Writes:[7] ]
  $72A: OR   V7, V6       ; V7 = V7 OR V6, VF = 0[Writes:[7, 15] Reads:[6, 7]]
  $77A: RND  V7, #28      ; V7 = random() AND $28[Writes:[7] ]
  $7B0: RND  V7, #63      ; V7 = random() AND $63[Writes:[7] ]
  $80E: LD   V7, #C1      ; Load $C1 into V7[Writes:[7] ]
  $848: LD   V7, #10      ; Load $10 into V7[Writes:[7] ]
  $874: LD   V7, #C8      ; Load $C8 into V7[Writes:[7] ]
  $892: RND  V7, #9D      ; V7 = random() AND $9D[Writes:[7] ]
  $8FE: LD   V7, #77      ; Load $77 into V7[Writes:[7] ]
  $974: ADD  V7, #03      ; Add $03 to V7 (V7 = (V7 + $03) & 0xFF)[Writes:[7] Reads:[7]]
  $98E: RND  V7, #5F      ; V7 = random() AND $5F[Writes:[7] ]
  $AD6: RND  V7, #A6      ; V7 = random() AND $A6[Writes:[7] ]
  $C7C: ADD  V7, #10      ; Add $10 to V7 (V7 = (V7 + $10) & 0xFF)[Writes:[7] Reads:[7]]
  $CA4: ADD  V7, #62      ; Add $62 to V7 (V7 = (V7 + $62) & 0xFF)[Writes:[7] Reads:[7]]
  $D88: ADD  V7, #46      ; Add $46 to V7 (V7 = (V7 + $46) & 0xFF)[Writes:[7] Reads:[7]]
  $DC2: XOR  V7, VB       ; V7 = V7 XOR VB, VF = 0[Writes:[7, 15] Reads:[7, 11]]
  $DDA: ADD  V7, V7       ; V7 = (V7 + V7) & 0xFF, VF = carry[Writes:[7, 15] Reads:[7]]
  $E14: RND  V7, #C1      ; V7 = random() AND $C1[Writes:[7] ]
  $E36: ADD  V7, #30      ; Add $30 to V7 (V7 = (V7 + $30) & 0xFF)[Writes:[7] Reads:[7]]
  $EC6: ADD  V7, #BF      ; Add $BF to V7 (V7 = (V7 + $BF) & 0xFF)[Writes:[7] Reads:[7]]
  $EF8: RND  V7, #7C      ; V7 = random() AND $7C[Writes:[7] ]
  $F84: ADD  V7, #15      ; Add $15 to V7 (V7 = (V7 + $15) & 0xFF)[Writes:[7] Reads:[7]]
  $FC8: ADD  V7, #18      ; Add $18 to V7 (V7 = (V7 + $18) & 0xFF)[Writes:[7] Reads:[7]]
  $FD6: LD   V7, #F3      ; Load $F3 into V7[Writes:[7] ]

Compares sorted registers V[7]: 20 instructions
  $238: SNE  V7, #98      ; Skip next instruction if V7 != $98[ Reads:[7]]
  $24A: SE   V7, #F2      ; Skip next instruction if V7 == $F2[ Reads:[7]]
  $2E2: SE   V7, #81      ; Skip next instruction if V7 == $81[ Reads:[7]]
  $3E6: SNE  V7, VE       ; Skip next instruction if V7 != VE[ Reads:[7, 14]]
  $3F4: SE   V7, #96      ; Skip next instruction if V7 == $96[ Reads:[7]]
  $56C: SNE  V7, #36      ; Skip next instruction if V7 != $36[ Reads:[7]]
  $65C: SE   V7, #16      ; Skip next instruction if V7 == $16[ Reads:[7]]
  $6B4: SE   V7, #B3      ; Skip next instruction if V7 == $B3[ Reads:[7]]
  $6E8: SNE  V7, #03      ; Skip next instruction if V7 != $03[ Reads:[7]]
  $994: SNE  V7, #70      ; Skip next instruction if V7 != $70[ Reads:[7]]
  $9B8: SNE  V7, #74      ; Skip next instruction if V7 != $74[ Reads:[7]]
  $9FE: SNE  V7, #18      ; Skip next instruction if V7 != $18[ Reads:[7]]
  $A0C: SNE  V7, #E3      ; Skip next instruction if V7 != $E3[ Reads:[7]]
  $AD0: SNE  V7, #CF      ; Skip next instruction if V7 != $CF[ Reads:[7]]
  $B5E: SNE  V7, #B6      ; Skip next instruction if V7 != $B6[ Reads:[7]]
  $D38: SNE  V7, #51      ; Skip next instruction if V7 != $51[ Reads:[7]]
  $D90: SE   V7, #5B      ; Skip next instruction if V7 == $5B[ Reads:[7]]
  $DCA: SE   V7, #8E      ; Skip next instruction if V7 == $8E[ Reads:[7]]
  $E90: SNE  V7, #ED      ; Skip next instruction if V7 != $ED[ Reads:[7]]
  $F26: SE   V7, #19      ; Skip next instruction if V7 == $19[ Reads:[7]]

Compares sorted registers V[2]: 8 instructions
  $24E: SNE  V2, VE       ; Skip next instruction if V2 != VE[ Reads:[2, 14]]
  $258: SNE  V2, #BC      ; Skip next instruction if V2 != $BC[ Reads:[2]]
  $30A: SE   V2, #56      ; Skip next instruction if V2 == $56[ Reads:[2]]
  $3C4: SE   V2, #0B      ; Skip next instruction if V2 == $0B[ Reads:[2]]
  $44C: SE   V2, #ED      ; Skip next instruction if V2 == $ED[ Reads:[2]]
  $8CE: SE   V2, #1C      ; Skip next instruction if V2 == $1C[ Reads:[2]]
  $93E: SE   V2, #4F      ; Skip next instruction if V2 == $4F[ Reads:[2]]
  $E52: SNE  V2, #CF      ; Skip next instruction if V2 != $CF[ Reads:[2]]

Compares sorted registers V[5]: 20 instructions
  $296: SNE  V5, #54      ; Skip next instruction if V5 != $54[ Reads:[5]]
  $358: SE   VE, V5       ; Skip next instruction if VE == V5[ Reads:[5, 14]]
  $494: SE   V5, #D1      ; Skip next instruction if V5 == $D1[ Reads:[5]]
  $61E: SNE  V5, #2C      ; Skip next instruction if V5 != $2C[ Reads:[5]]
  $7EE: SE   V5, #67      ; Skip next instruction if V5 == $67[ Reads:[5]]
  $8EE: SE   V5, #7B      ; Skip next instruction if V5 == $7B[ Reads:[5]]
  $910: SE   V5, #15      ; Skip next instruction if V5 == $15[ Reads:[5]]
  $9E0: SE   V5, #33      ; Skip next instruction if V5 == $33[ Reads:[5]]
  $A2A: SNE  V5, #9B      ; Skip next instruction if V5 != $9B[ Reads:[5]]
  $A4E: SE   V5, #29      ; Skip next instruction if V5 == $29[ Reads:[5]]
  $A9E: SNE  V5, #21      ; Skip next instruction if V5 != $21[ Reads:[5]]
  $AFE: SNE  V5, #5C      ; Skip next instruction if V5 != $5C[ Reads:[5]]
  $CE6: SE   V5, #F0      ; Skip next instruction if V5 == $F0[ Reads:[5]]
  $CF2: SE   V5, #DF      ; Skip next instruction if V5 == $DF[ Reads:[5]]
  $D26: SNE  V5, #60      ; Skip next instruction if V5 != $60[ Reads:[5]]
  $DA8: SE   V5, #42      ; Skip next instruction if V5 == $42[ Reads:[5]]
  $ECC: SNE  V5, #1C      ; Skip next instruction if V5 != $1C[ Reads:[5]]
  $EEE: SNE  V5, #3F      ; Skip next instruction if V5 != $3F[ Reads:[5]]
  $FA4: SNE  V5, #AC      ; Skip next instruction if V5 != $AC[ Reads:[5]]
  $FDA: SNE  V5, #EC      ; Skip next instruction if V5 != $EC[ Reads:[5]]

Logical operation on V[5] (sets VF=0 in CUDA): 3 instructions
  $2C2: AND  VE, V5       ; VE = VE AND V5, VF = 0[Writes:[14, 15] Reads:[5, 14]]
  $DB4: OR   V1, V5       ; V1 = V1 OR V5, VF = 0[Writes:[1, 15] Reads:[1, 5]]
  $EB4: XOR  VA, V5       ; VA = VA XOR V5, VF = 0[Writes:[10, 15] Reads:[5, 10]]

Modifies sorted registers V[6]: 32 instructions
  $2DA: ADD  V6, #6B      ; Add $6B to V6 (V6 = (V6 + $6B) & 0xFF)[Writes:[6] Reads:[6]]
  $406: SHR  V6           ; V6 = V6 >> 1, VF = LSB[Writes:[6, 15] Reads:[6]]
  $496: RND  V6, #5E      ; V6 = random() AND $5E[Writes:[6] ]
  $4D6: ADD  V6, #B8      ; Add $B8 to V6 (V6 = (V6 + $B8) & 0xFF)[Writes:[6] Reads:[6]]
  $5C2: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB[Writes:[6, 15] Reads:[6]]
  $5D8: ADD  V6, #CA      ; Add $CA to V6 (V6 = (V6 + $CA) & 0xFF)[Writes:[6] Reads:[6]]
  $5EC: ADD  V6, #92      ; Add $92 to V6 (V6 = (V6 + $92) & 0xFF)[Writes:[6] Reads:[6]]
  $6AE: RND  V6, #95      ; V6 = random() AND $95[Writes:[6] ]
  $6D4: LD   V6, #A9      ; Load $A9 into V6[Writes:[6] ]
  $706: OR   V6, V1       ; V6 = V6 OR V1, VF = 0[Writes:[6, 15] Reads:[1, 6]]
  $712: ADD  V6, #5D      ; Add $5D to V6 (V6 = (V6 + $5D) & 0xFF)[Writes:[6] Reads:[6]]
  $772: LD   V6, #EA      ; Load $EA into V6[Writes:[6] ]
  $81A: RND  V6, #D1      ; V6 = random() AND $D1[Writes:[6] ]
  $888: RND  V6, #45      ; V6 = random() AND $45[Writes:[6] ]
  $894: RND  V6, #0A      ; V6 = random() AND $0A[Writes:[6] ]
  $A7E: LD   V6, #8C      ; Load $8C into V6[Writes:[6] ]
  $AAC: ADD  V6, #E6      ; Add $E6 to V6 (V6 = (V6 + $E6) & 0xFF)[Writes:[6] Reads:[6]]
  $B12: RND  V6, #D3      ; V6 = random() AND $D3[Writes:[6] ]
  $BC4: LD   V6, #59      ; Load $59 into V6[Writes:[6] ]
  $BE4: ADD  V6, #13      ; Add $13 to V6 (V6 = (V6 + $13) & 0xFF)[Writes:[6] Reads:[6]]
  $C38: ADD  V6, #DB      ; Add $DB to V6 (V6 = (V6 + $DB) & 0xFF)[Writes:[6] Reads:[6]]
  $D06: ADD  V6, #26      ; Add $26 to V6 (V6 = (V6 + $26) & 0xFF)[Writes:[6] Reads:[6]]
  $D64: LD   V6, #CE      ; Load $CE into V6[Writes:[6] ]
  $D7E: RND  V6, #6E      ; V6 = random() AND $6E[Writes:[6] ]
  $DDE: ADD  V6, #5B      ; Add $5B to V6 (V6 = (V6 + $5B) & 0xFF)[Writes:[6] Reads:[6]]
  $E0C: LD   V6, #A3      ; Load $A3 into V6[Writes:[6] ]
  $E7E: ADD  V6, #1E      ; Add $1E to V6 (V6 = (V6 + $1E) & 0xFF)[Writes:[6] Reads:[6]]
  $F06: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB[Writes:[6, 15] Reads:[6]]
  $F32: ADD  V6, #84      ; Add $84 to V6 (V6 = (V6 + $84) & 0xFF)[Writes:[6] Reads:[6]]
  $FCE: LD   V6, #7E      ; Load $7E into V6[Writes:[6] ]
  $FE4: LD   V6, #D0      ; Load $D0 into V6[Writes:[6] ]
  $FEE: RND  V6, #03      ; V6 = random() AND $03[Writes:[6] ]

Modifies sorted registers V[2]: 17 instructions
  $2E4: ADD  V2, #82      ; Add $82 to V2 (V2 = (V2 + $82) & 0xFF)[Writes:[2] Reads:[2]]
  $354: ADD  V2, #05      ; Add $05 to V2 (V2 = (V2 + $05) & 0xFF)[Writes:[2] Reads:[2]]
  $37A: LD   V2, #01      ; Load $01 into V2[Writes:[2] ]
  $3C0: ADD  V2, #41      ; Add $41 to V2 (V2 = (V2 + $41) & 0xFF)[Writes:[2] Reads:[2]]
  $46C: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB[Writes:[2, 15] Reads:[2]]
  $4FA: ADD  V2, #F1      ; Add $F1 to V2 (V2 = (V2 + $F1) & 0xFF)[Writes:[2] Reads:[2]]
  $548: RND  V2, #DB      ; V2 = random() AND $DB[Writes:[2] ]
  $6CE: LD   V2, #CA      ; Load $CA into V2[Writes:[2] ]
  $790: LD   V2, #A9      ; Load $A9 into V2[Writes:[2] ]
  $806: LD   V2, #12      ; Load $12 into V2[Writes:[2] ]
  $8D6: LD   V2, #29      ; Load $29 into V2[Writes:[2] ]
  $9BA: RND  V2, #A0      ; V2 = random() AND $A0[Writes:[2] ]
  $A1C: SUB  V2, V2       ; V2 = (V2 - V2) & 0xFF, VF = NOT borrow[Writes:[2, 15] Reads:[2]]
  $AC8: ADD  V2, #C5      ; Add $C5 to V2 (V2 = (V2 + $C5) & 0xFF)[Writes:[2] Reads:[2]]
  $AE0: RND  V2, #5D      ; V2 = random() AND $5D[Writes:[2] ]
  $CF4: RND  V2, #49      ; V2 = random() AND $49[Writes:[2] ]
  $DE0: RND  V2, #36      ; V2 = random() AND $36[Writes:[2] ]

Modifies sorted registers V[3]: 21 instructions
  $2EA: ADD  V3, #26      ; Add $26 to V3 (V3 = (V3 + $26) & 0xFF)[Writes:[3] Reads:[3]]
  $2F8: RND  V3, #8D      ; V3 = random() AND $8D[Writes:[3] ]
  $456: LD   V3, #FC      ; Load $FC into V3[Writes:[3] ]
  $4B6: RND  V3, #1E      ; V3 = random() AND $1E[Writes:[3] ]
  $4DC: LD   V3, #A1      ; Load $A1 into V3[Writes:[3] ]
  $598: ADD  V3, VC       ; V3 = (V3 + VC) & 0xFF, VF = carry[Writes:[3, 15] Reads:[3, 12]]
  $692: LD   V3, #A6      ; Load $A6 into V3[Writes:[3] ]
  $6A8: ADD  V3, #D8      ; Add $D8 to V3 (V3 = (V3 + $D8) & 0xFF)[Writes:[3] Reads:[3]]
  $6AC: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB[Writes:[3, 15] Reads:[3]]
  $730: ADD  V3, #44      ; Add $44 to V3 (V3 = (V3 + $44) & 0xFF)[Writes:[3] Reads:[3]]
  $796: LD   V3, #4D      ; Load $4D into V3[Writes:[3] ]
  $904: OR   V3, VC       ; V3 = V3 OR VC, VF = 0[Writes:[3, 15] Reads:[3, 12]]
  $964: RND  V3, #D6      ; V3 = random() AND $D6[Writes:[3] ]
  $9E8: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB[Writes:[3, 15] Reads:[3]]
  $A8E: RND  V3, #63      ; V3 = random() AND $63[Writes:[3] ]
  $B10: LD   V3, #FF      ; Load $FF into V3[Writes:[3] ]
  $C3E: LD   V3, #FF      ; Load $FF into V3[Writes:[3] ]
  $D2A: LD   V3, #12      ; Load $12 into V3[Writes:[3] ]
  $D86: LD   V3, #B6      ; Load $B6 into V3[Writes:[3] ]
  $D9A: RND  V3, #F8      ; V3 = random() AND $F8[Writes:[3] ]
  $DA6: RND  V3, #1A      ; V3 = random() AND $1A[Writes:[3] ]

Compares sorted registers V[3]: 15 instructions
  $2FC: SNE  V3, #84      ; Skip next instruction if V3 != $84[ Reads:[3]]
  $38A: SNE  VA, V3       ; Skip next instruction if VA != V3[ Reads:[3, 10]]
  $3CC: SNE  V3, #C7      ; Skip next instruction if V3 != $C7[ Reads:[3]]
  $468: SE   V3, #3D      ; Skip next instruction if V3 == $3D[ Reads:[3]]
  $4D2: SE   V3, #0B      ; Skip next instruction if V3 == $0B[ Reads:[3]]
  $542: SE   V3, #59      ; Skip next instruction if V3 == $59[ Reads:[3]]
  $6AA: SNE  V3, #5B      ; Skip next instruction if V3 != $5B[ Reads:[3]]
  $760: SE   V3, #CF      ; Skip next instruction if V3 == $CF[ Reads:[3]]
  $77E: SE   V3, #DC      ; Skip next instruction if V3 == $DC[ Reads:[3]]
  $7C6: SNE  V3, #F6      ; Skip next instruction if V3 != $F6[ Reads:[3]]
  $BE8: SNE  V3, #08      ; Skip next instruction if V3 != $08[ Reads:[3]]
  $DD2: SE   V3, #09      ; Skip next instruction if V3 == $09[ Reads:[3]]
  $E24: SNE  V3, #78      ; Skip next instruction if V3 != $78[ Reads:[3]]
  $E66: SE   V3, #91      ; Skip next instruction if V3 == $91[ Reads:[3]]
  $F04: SNE  V3, #C8      ; Skip next instruction if V3 != $C8[ Reads:[3]]

Register transfer involving V[3]: 1 instructions
  $30C: LD   V0, V3       ; Load V3 into V0[Writes:[0] Reads:[3]]

Modifies sorted registers V[5]: 20 instructions
  $32A: RND  V5, #7F      ; V5 = random() AND $7F[Writes:[5] ]
  $386: LD   V5, #67      ; Load $67 into V5[Writes:[5] ]
  $3A8: SUBN V5, V5       ; V5 = (V5 - V5) & 0xFF, VF = NOT borrow[Writes:[5, 15] Reads:[5]]
  $4A4: LD   V5, #81      ; Load $81 into V5[Writes:[5] ]
  $554: ADD  V5, #BD      ; Add $BD to V5 (V5 = (V5 + $BD) & 0xFF)[Writes:[5] Reads:[5]]
  $57C: RND  V5, #E4      ; V5 = random() AND $E4[Writes:[5] ]
  $642: LD   V5, #46      ; Load $46 into V5[Writes:[5] ]
  $68A: ADD  V5, #36      ; Add $36 to V5 (V5 = (V5 + $36) & 0xFF)[Writes:[5] Reads:[5]]
  $6BE: RND  V5, #BD      ; V5 = random() AND $BD[Writes:[5] ]
  $73E: LD   V5, #6C      ; Load $6C into V5[Writes:[5] ]
  $8A6: LD   V5, #D8      ; Load $D8 into V5[Writes:[5] ]
  $968: RND  V5, #37      ; V5 = random() AND $37[Writes:[5] ]
  $A60: RND  V5, #2D      ; V5 = random() AND $2D[Writes:[5] ]
  $AE2: ADD  V5, #FC      ; Add $FC to V5 (V5 = (V5 + $FC) & 0xFF)[Writes:[5] Reads:[5]]
  $D80: ADD  V5, #49      ; Add $49 to V5 (V5 = (V5 + $49) & 0xFF)[Writes:[5] Reads:[5]]
  $DAC: ADD  V5, #92      ; Add $92 to V5 (V5 = (V5 + $92) & 0xFF)[Writes:[5] Reads:[5]]
  $DB2: RND  V5, #33      ; V5 = random() AND $33[Writes:[5] ]
  $DBA: ADD  V5, #F4      ; Add $F4 to V5 (V5 = (V5 + $F4) & 0xFF)[Writes:[5] Reads:[5]]
  $E32: RND  V5, #E8      ; V5 = random() AND $E8[Writes:[5] ]
  $F4E: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB[Writes:[5, 15] Reads:[5]]

Compares sorted registers V[4]: 22 instructions
  $39A: SNE  V4, #68      ; Skip next instruction if V4 != $68[ Reads:[4]]
  $47A: SE   V4, #79      ; Skip next instruction if V4 == $79[ Reads:[4]]
  $552: SNE  V4, #99      ; Skip next instruction if V4 != $99[ Reads:[4]]
  $56E: SE   V4, #60      ; Skip next instruction if V4 == $60[ Reads:[4]]
  $636: SNE  V4, #29      ; Skip next instruction if V4 != $29[ Reads:[4]]
  $638: SNE  V4, #BE      ; Skip next instruction if V4 != $BE[ Reads:[4]]
  $666: SE   V4, #F5      ; Skip next instruction if V4 == $F5[ Reads:[4]]
  $6A0: SE   V4, #63      ; Skip next instruction if V4 == $63[ Reads:[4]]
  $702: SNE  V4, #6A      ; Skip next instruction if V4 != $6A[ Reads:[4]]
  $7F8: SE   V4, #63      ; Skip next instruction if V4 == $63[ Reads:[4]]
  $800: SE   V4, #EC      ; Skip next instruction if V4 == $EC[ Reads:[4]]
  $812: SE   V4, #81      ; Skip next instruction if V4 == $81[ Reads:[4]]
  $8BE: SNE  V4, #56      ; Skip next instruction if V4 != $56[ Reads:[4]]
  $972: SNE  V4, #1C      ; Skip next instruction if V4 != $1C[ Reads:[4]]
  $A4C: SE   V4, V1       ; Skip next instruction if V4 == V1[ Reads:[1, 4]]
  $B7E: SE   V4, #DE      ; Skip next instruction if V4 == $DE[ Reads:[4]]
  $C06: SE   V4, #77      ; Skip next instruction if V4 == $77[ Reads:[4]]
  $C12: SNE  V4, #87      ; Skip next instruction if V4 != $87[ Reads:[4]]
  $D7C: SNE  V4, VB       ; Skip next instruction if V4 != VB[ Reads:[4, 11]]
  $F00: SNE  V4, #07      ; Skip next instruction if V4 != $07[ Reads:[4]]
  $F90: SE   V4, #4B      ; Skip next instruction if V4 == $4B[ Reads:[4]]
  $FC0: SNE  V4, #9B      ; Skip next instruction if V4 != $9B[ Reads:[4]]

Modifies sorted registers V[4]: 30 instructions
  $3A0: ADD  V4, #F0      ; Add $F0 to V4 (V4 = (V4 + $F0) & 0xFF)[Writes:[4] Reads:[4]]
  $3BE: RND  V4, #29      ; V4 = random() AND $29[Writes:[4] ]
  $3D6: RND  V4, #1E      ; V4 = random() AND $1E[Writes:[4] ]
  $58C: ADD  V4, #97      ; Add $97 to V4 (V4 = (V4 + $97) & 0xFF)[Writes:[4] Reads:[4]]
  $658: RND  V4, #38      ; V4 = random() AND $38[Writes:[4] ]
  $6C6: LD   V4, #8A      ; Load $8A into V4[Writes:[4] ]
  $6D2: ADD  V4, #58      ; Add $58 to V4 (V4 = (V4 + $58) & 0xFF)[Writes:[4] Reads:[4]]
  $744: LD   V4, #BE      ; Load $BE into V4[Writes:[4] ]
  $776: RND  V4, #8C      ; V4 = random() AND $8C[Writes:[4] ]
  $780: AND  V4, V1       ; V4 = V4 AND V1, VF = 0[Writes:[4, 15] Reads:[1, 4]]
  $78A: LD   V4, VE       ; Load VE into V4[Writes:[4] Reads:[14]]
  $84C: LD   V4, #6C      ; Load $6C into V4[Writes:[4] ]
  $8A2: LD   V4, V7       ; Load V7 into V4[Writes:[4] Reads:[7]]
  $938: LD   V4, VF       ; Load VF into V4[Writes:[4] Reads:[15]]
  $A12: ADD  V4, #80      ; Add $80 to V4 (V4 = (V4 + $80) & 0xFF)[Writes:[4] Reads:[4]]
  $B76: ADD  V4, #8C      ; Add $8C to V4 (V4 = (V4 + $8C) & 0xFF)[Writes:[4] Reads:[4]]
  $BF0: ADD  V4, #61      ; Add $61 to V4 (V4 = (V4 + $61) & 0xFF)[Writes:[4] Reads:[4]]
  $C68: ADD  V4, #21      ; Add $21 to V4 (V4 = (V4 + $21) & 0xFF)[Writes:[4] Reads:[4]]
  $C94: ADD  V4, #2E      ; Add $2E to V4 (V4 = (V4 + $2E) & 0xFF)[Writes:[4] Reads:[4]]
  $C98: ADD  V4, #F9      ; Add $F9 to V4 (V4 = (V4 + $F9) & 0xFF)[Writes:[4] Reads:[4]]
  $CE8: RND  V4, #C9      ; V4 = random() AND $C9[Writes:[4] ]
  $D84: LD   V4, #8C      ; Load $8C into V4[Writes:[4] ]
  $DB0: ADD  V4, #6B      ; Add $6B to V4 (V4 = (V4 + $6B) & 0xFF)[Writes:[4] Reads:[4]]
  $EA0: AND  V4, VC       ; V4 = V4 AND VC, VF = 0[Writes:[4, 15] Reads:[4, 12]]
  $F0A: ADD  V4, #12      ; Add $12 to V4 (V4 = (V4 + $12) & 0xFF)[Writes:[4] Reads:[4]]
  $F36: ADD  V4, #30      ; Add $30 to V4 (V4 = (V4 + $30) & 0xFF)[Writes:[4] Reads:[4]]
  $F42: ADD  V4, VC       ; V4 = (V4 + VC) & 0xFF, VF = carry[Writes:[4, 15] Reads:[4, 12]]
  $F52: OR   V4, V8       ; V4 = V4 OR V8, VF = 0[Writes:[4, 15] Reads:[4, 8]]
  $F7E: LD   V4, #4C      ; Load $4C into V4[Writes:[4] ]
  $F96: LD   V4, #2F      ; Load $2F into V4[Writes:[4] ]

Arithmetic on sorted registers V[4]: 1 instructions
  $5BC: SUB  V0, V4       ; V0 = (V0 - V4) & 0xFF, VF = NOT borrow[Writes:[0, 15] Reads:[0, 4]]

Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
  $8E2: OR   V1, V3       ; V1 = V1 OR V3, VF = 0[Writes:[1, 15] Reads:[1, 3]]

Register transfer involving V[4]: 1 instructions
  $928: LD   VE, V4       ; Load V4 into VE[Writes:[14] Reads:[4]]

Arithmetic on sorted registers V[3]: 1 instructions
  $B7A: SUB  VC, V3       ; VC = (VC - V3) & 0xFF, VF = NOT borrow[Writes:[12, 15] Reads:[3, 12]]

Compares sorted registers V[5, 7]: 1 instructions
  $CF0: SNE  V5, V7       ; Skip next instruction if V5 != V7[ Reads:[5, 7]]

Modifies sorted registers V[2, 3, 4]: 1 instructions
  $D5A: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5[Writes:[0, 1, 2, 3, 4] ]

Arithmetic on sorted registers V[7]: 1 instructions
  $F22: ADD  VD, V7       ; VD = (VD + V7) & 0xFF, VF = carry[Writes:[13, 15] Reads:[7, 13]]

================================================================================
END OF ANALYSIS
================================================================================

====================================================================================================

=== OVERALL ANALYSIS SUMMARY ===

Total ROMs analyzed: 1

AUTHENTICITY ANALYSIS:
  Genuine sorting algorithms: 0
  Coincidental consecutive values: 1
  ⚠️  NO GENUINE SORTING FOUND - All appear to be coincidental!