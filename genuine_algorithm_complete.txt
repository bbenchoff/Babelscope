================================================================================
COMPLETE CHIP-8 SORTING ROM ANALYSIS
ROM: LONGPARTIAL_B28055D01_V0-V7_L8_ASC_C282_f341c602.ch8
Analysis Date: 2025-07-06 20:35:17
================================================================================

=== SORTING ROM ANALYSIS: LONGPARTIAL_B28055D01_V0-V7_L8_ASC_C282_f341c602.ch8 ===

🔍 SORTING AUTHENTICITY ASSESSMENT:
  ❌ CLASSIFICATION: UNCERTAIN (Confidence: 10.0%)
  Evidence for genuine sorting:
    ✓ Found 7 register comparisons in sorted range
  Red flags against genuine sorting:
    ⚠️  Dominated by random generation: 114 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [15, 16, 17, 18, 19, 20, 21, 22]
  Length: 8 consecutive elements
  Direction: ascending
  Register range: V0-V7
  Start position: V0
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [15, 16, 17, 18, 19, 20, 21, 22]
  Changes: V0: 8→15, V1: 3→16, V2: 6→17, V3: 1→18, V4: 7→19, V5: 2→20, V6: 5→21, V7: 4→22
  ✓ Correct initial test pattern detected
  Achievement cycle: 282


================================================================================
COMPLETE INSTRUCTION DISASSEMBLY
================================================================================

Sorting Achievement: [15, 16, 17, 18, 19, 20, 21, 22] (ascending)
Registers V0-V7 sorted at cycle 282

INSTRUCTION LISTING:
ADDRESS  OPCODE  MNEMONIC OPERANDS         DESCRIPTION                                      REGISTERS
------------------------------------------------------------------------------------------------------------------------
>>> $200    $C7D2   RND      V7, #D2         V7 = random() AND $D2                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $202    $3B5F   SE       VB, #5F         Skip next instruction if VB == $5F            R:[11]
    $204    $E9FA   UNKNOWN  $E9FA           Unknown Exxx instruction (crashes in CUDA)    
>>> $206    $62A4   LD       V2, #A4         Load $A4 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $208    $5A4D   UNKNOWN  $5A4D           Unknown 5xxx instruction (crashes in CUDA)    
>>> $20A    $C11B   RND      V1, #1B         V1 = random() AND $1B                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
>>> $20C    $7170   ADD      V1, #70         Add $70 to V1 (V1 = (V1 + $70) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $20E    $F878   UNKNOWN  $F878           Unknown Fxxx instruction (crashes in CUDA)    
    $210    $8B5C   UNKNOWN  $8B5C           Unknown 8xxx instruction (crashes in CUDA)    
    $212    $5AF4   UNKNOWN  $5AF4           Unknown 5xxx instruction (crashes in CUDA)    
    $214    $86EF   UNKNOWN  $86EF           Unknown 8xxx instruction (crashes in CUDA)    
    $216    $18EB   JP       $8EB            Jump to address $8EB                          
    $218    $FA2F   UNKNOWN  $FA2F           Unknown Fxxx instruction (crashes in CUDA)    
>>> $21A    $70D6   ADD      V0, #D6         Add $D6 to V0 (V0 = (V0 + $D6) & 0xFF)        W:[0] R:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $21C    $DFED   DRW      VF, VE, #D      Draw 13-byte sprite at (VF, VE), VF = collision W:[15] R:[14, 15]
>>> $21E    $C3C5   RND      V3, #C5         V3 = random() AND $C5                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $220    $8518   UNKNOWN  $8518           Unknown 8xxx instruction (crashes in CUDA)    
    $222    $E97B   UNKNOWN  $E97B           Unknown Exxx instruction (crashes in CUDA)    
    $224    $54A5   UNKNOWN  $54A5           Unknown 5xxx instruction (crashes in CUDA)    
>>> $226    $336E   SE       V3, #6E         Skip next instruction if V3 == $6E            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $228    $0656   NOP      $0656           No operation (ignored by CUDA kernel)         
    $22A    $FC11   UNKNOWN  $FC11           Unknown Fxxx instruction (crashes in CUDA)    
>>> $22C    $7231   ADD      V2, #31         Add $31 to V2 (V2 = (V2 + $31) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $22E    $DB3A   DRW      VB, V3, #A      Draw 10-byte sprite at (VB, V3), VF = collision W:[15] R:[3, 11]
    $230    $CDAB   RND      VD, #AB         VD = random() AND $AB                         W:[13]
    $232    $E655   UNKNOWN  $E655           Unknown Exxx instruction (crashes in CUDA)    
    $234    $C9FB   RND      V9, #FB         V9 = random() AND $FB                         W:[9]
    $236    $1926   JP       $926            Jump to address $926                          
    $238    $23CB   CALL     $3CB            Call subroutine at $3CB                       
    $23A    $DF09   DRW      VF, V0, #9      Draw 9-byte sprite at (VF, V0), VF = collision W:[15] R:[0, 15]
    $23C    $3C4C   SE       VC, #4C         Skip next instruction if VC == $4C            R:[12]
    $23E    $7A37   ADD      VA, #37         Add $37 to VA (VA = (VA + $37) & 0xFF)        W:[10] R:[10]
    $240    $55B1   UNKNOWN  $55B1           Unknown 5xxx instruction (crashes in CUDA)    
    $242    $19BA   JP       $9BA            Jump to address $9BA                          
>>> $244    $7193   ADD      V1, #93         Add $93 to V1 (V1 = (V1 + $93) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $246    $FAD0   UNKNOWN  $FAD0           Unknown Fxxx instruction (crashes in CUDA)    
>>> $248    $C729   RND      V7, #29         V7 = random() AND $29                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $24A    $262F   CALL     $62F            Call subroutine at $62F                       
    $24C    $BDD2   JP       V0, $DD2        Jump to $DD2 + V0                             R:[0]
    $24E    $AC9B   LD       I, $C9B         Load $C9B into I register                     
    $250    $5E38   UNKNOWN  $5E38           Unknown 5xxx instruction (crashes in CUDA)    
    $252    $E820   UNKNOWN  $E820           Unknown Exxx instruction (crashes in CUDA)    
    $254    $1804   JP       $804            Jump to address $804                          
>>> $256    $45A4   SNE      V5, #A4         Skip next instruction if V5 != $A4            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $258    $28A7   CALL     $8A7            Call subroutine at $8A7                       
    $25A    $9772   UNKNOWN  $9772           Unknown 9xxx instruction (crashes in CUDA)    
    $25C    $23B1   CALL     $3B1            Call subroutine at $3B1                       
    $25E    $21D9   CALL     $1D9            Call subroutine at $1D9                       
    $260    $581E   UNKNOWN  $581E           Unknown 5xxx instruction (crashes in CUDA)    
>>> $262    $406B   SNE      V0, #6B         Skip next instruction if V0 != $6B            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $264    $6EA1   LD       VE, #A1         Load $A1 into VE                              W:[14]
    $266    $ED1A   UNKNOWN  $ED1A           Unknown Exxx instruction (crashes in CUDA)    
>>> $268    $C3A6   RND      V3, #A6         V3 = random() AND $A6                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $26A    $C640   RND      V6, #40         V6 = random() AND $40                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $26C    $105D   JP       $05D            Jump to address $05D                          
    $26E    $E718   UNKNOWN  $E718           Unknown Exxx instruction (crashes in CUDA)    
    $270    $DEF5   DRW      VE, VF, #5      Draw 5-byte sprite at (VE, VF), VF = collision W:[15] R:[14, 15]
    $272    $4EAD   SNE      VE, #AD         Skip next instruction if VE != $AD            R:[14]
>>> $274    $300D   SE       V0, #0D         Skip next instruction if V0 == $0D            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $276    $D795   DRW      V7, V9, #5      Draw 5-byte sprite at (V7, V9), VF = collision W:[15] R:[7, 9]
>>> $278    $35B9   SE       V5, #B9         Skip next instruction if V5 == $B9            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $27A    $BC78   JP       V0, $C78        Jump to $C78 + V0                             R:[0]
>>> $27C    $62B2   LD       V2, #B2         Load $B2 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $27E    $75C0   ADD      V5, #C0         Add $C0 to V5 (V5 = (V5 + $C0) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $280    $AFFC   LD       I, $FFC         Load $FFC into I register                     
    $282    $AB4C   LD       I, $B4C         Load $B4C into I register                     
    $284    $020C   NOP      $020C           No operation (ignored by CUDA kernel)         
    $286    $3CC3   SE       VC, #C3         Skip next instruction if VC == $C3            R:[12]
    $288    $4ACB   SNE      VA, #CB         Skip next instruction if VA != $CB            R:[10]
    $28A    $033D   NOP      $033D           No operation (ignored by CUDA kernel)         
>>> $28C    $4531   SNE      V5, #31         Skip next instruction if V5 != $31            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $28E    $29CB   CALL     $9CB            Call subroutine at $9CB                       
>>> $290    $4115   SNE      V1, #15         Skip next instruction if V1 != $15            R:[1]
          ^-- SORTING RELATED: Compares sorted registers V[1]
    $292    $0424   NOP      $0424           No operation (ignored by CUDA kernel)         
    $294    $7882   ADD      V8, #82         Add $82 to V8 (V8 = (V8 + $82) & 0xFF)        W:[8] R:[8]
    $296    $DFF5   DRW      VF, VF, #5      Draw 5-byte sprite at (VF, VF), VF = collision W:[15] R:[15]
    $298    $BCC8   JP       V0, $CC8        Jump to $CC8 + V0                             R:[0]
>>> $29A    $33B5   SE       V3, #B5         Skip next instruction if V3 == $B5            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $29C    $B06A   JP       V0, $06A        Jump to $06A + V0                             R:[0]
    $29E    $ADEB   LD       I, $DEB         Load $DEB into I register                     
    $2A0    $2AB2   CALL     $AB2            Call subroutine at $AB2                       
>>> $2A2    $378D   SE       V7, #8D         Skip next instruction if V7 == $8D            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $2A4    $AA66   LD       I, $A66         Load $A66 into I register                     
    $2A6    $6E0C   LD       VE, #0C         Load $0C into VE                              W:[14]
    $2A8    $9D6F   UNKNOWN  $9D6F           Unknown 9xxx instruction (crashes in CUDA)    
    $2AA    $D359   DRW      V3, V5, #9      Draw 9-byte sprite at (V3, V5), VF = collision W:[15] R:[3, 5]
    $2AC    $FD10   UNKNOWN  $FD10           Unknown Fxxx instruction (crashes in CUDA)    
>>> $2AE    $82C0   LD       V2, VC          Load VC into V2                               W:[2] R:[12]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $2B0    $484A   SNE      V8, #4A         Skip next instruction if V8 != $4A            R:[8]
    $2B2    $9631   UNKNOWN  $9631           Unknown 9xxx instruction (crashes in CUDA)    
    $2B4    $F6E3   UNKNOWN  $F6E3           Unknown Fxxx instruction (crashes in CUDA)    
>>> $2B6    $5040   SE       V0, V4          Skip next instruction if V0 == V4             R:[0, 4]
          ^-- SORTING RELATED: Compares sorted registers V[0, 4]
    $2B8    $508C   UNKNOWN  $508C           Unknown 5xxx instruction (crashes in CUDA)    
    $2BA    $A920   LD       I, $920         Load $920 into I register                     
    $2BC    $0532   NOP      $0532           No operation (ignored by CUDA kernel)         
    $2BE    $1BD3   JP       $BD3            Jump to address $BD3                          
    $2C0    $0384   NOP      $0384           No operation (ignored by CUDA kernel)         
    $2C2    $CD8A   RND      VD, #8A         VD = random() AND $8A                         W:[13]
    $2C4    $6A76   LD       VA, #76         Load $76 into VA                              W:[10]
>>> $2C6    $82E1   OR       V2, VE          V2 = V2 OR VE, VF = 0                         W:[2, 15] R:[2, 14]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $2C8    $17D0   JP       $7D0            Jump to address $7D0                          
    $2CA    $BC65   JP       V0, $C65        Jump to $C65 + V0                             R:[0]
    $2CC    $F3E7   UNKNOWN  $F3E7           Unknown Fxxx instruction (crashes in CUDA)    
>>> $2CE    $C7DC   RND      V7, #DC         V7 = random() AND $DC                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $2D0    $55C9   UNKNOWN  $55C9           Unknown 5xxx instruction (crashes in CUDA)    
    $2D2    $A680   LD       I, $680         Load $680 into I register                     
    $2D4    $2C67   CALL     $C67            Call subroutine at $C67                       
    $2D6    $E096   UNKNOWN  $E096           Unknown Exxx instruction (crashes in CUDA)    
    $2D8    $A661   LD       I, $661         Load $661 into I register                     
    $2DA    $9214   UNKNOWN  $9214           Unknown 9xxx instruction (crashes in CUDA)    
    $2DC    $2A2A   CALL     $A2A            Call subroutine at $A2A                       
>>> $2DE    $335F   SE       V3, #5F         Skip next instruction if V3 == $5F            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $2E0    $BECC   JP       V0, $ECC        Jump to $ECC + V0                             R:[0]
    $2E2    $E3EC   UNKNOWN  $E3EC           Unknown Exxx instruction (crashes in CUDA)    
    $2E4    $4931   SNE      V9, #31         Skip next instruction if V9 != $31            R:[9]
    $2E6    $D479   DRW      V4, V7, #9      Draw 9-byte sprite at (V4, V7), VF = collision W:[15] R:[4, 7]
>>> $2E8    $735C   ADD      V3, #5C         Add $5C to V3 (V3 = (V3 + $5C) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $2EA    $FDD4   UNKNOWN  $FDD4           Unknown Fxxx instruction (crashes in CUDA)    
>>> $2EC    $C188   RND      V1, #88         V1 = random() AND $88                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $2EE    $1A86   JP       $A86            Jump to address $A86                          
    $2F0    $A5F9   LD       I, $5F9         Load $5F9 into I register                     
    $2F2    $87E8   UNKNOWN  $87E8           Unknown 8xxx instruction (crashes in CUDA)    
    $2F4    $BDA4   JP       V0, $DA4        Jump to $DA4 + V0                             R:[0]
    $2F6    $573A   UNKNOWN  $573A           Unknown 5xxx instruction (crashes in CUDA)    
    $2F8    $8928   UNKNOWN  $8928           Unknown 8xxx instruction (crashes in CUDA)    
    $2FA    $A135   LD       I, $135         Load $135 into I register                     
    $2FC    $ECA8   UNKNOWN  $ECA8           Unknown Exxx instruction (crashes in CUDA)    
    $2FE    $6B23   LD       VB, #23         Load $23 into VB                              W:[11]
    $300    $A8C0   LD       I, $8C0         Load $8C0 into I register                     
    $302    $4B9D   SNE      VB, #9D         Skip next instruction if VB != $9D            R:[11]
    $304    $4D7B   SNE      VD, #7B         Skip next instruction if VD != $7B            R:[13]
    $306    $F86C   UNKNOWN  $F86C           Unknown Fxxx instruction (crashes in CUDA)    
>>> $308    $6769   LD       V7, #69         Load $69 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $30A    $B49A   JP       V0, $49A        Jump to $49A + V0                             R:[0]
    $30C    $F7EE   UNKNOWN  $F7EE           Unknown Fxxx instruction (crashes in CUDA)    
    $30E    $B904   JP       V0, $904        Jump to $904 + V0                             R:[0]
    $310    $783A   ADD      V8, #3A         Add $3A to V8 (V8 = (V8 + $3A) & 0xFF)        W:[8] R:[8]
>>> $312    $72A8   ADD      V2, #A8         Add $A8 to V2 (V2 = (V2 + $A8) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $314    $462D   SNE      V6, #2D         Skip next instruction if V6 != $2D            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
>>> $316    $7097   ADD      V0, #97         Add $97 to V0 (V0 = (V0 + $97) & 0xFF)        W:[0] R:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
>>> $318    $85E2   AND      V5, VE          V5 = V5 AND VE, VF = 0                        W:[5, 15] R:[5, 14]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
>>> $31A    $66C2   LD       V6, #C2         Load $C2 into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $31C    $5711   UNKNOWN  $5711           Unknown 5xxx instruction (crashes in CUDA)    
>>> $31E    $8590   LD       V5, V9          Load V9 into V5                               W:[5] R:[9]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $320    $91E6   UNKNOWN  $91E6           Unknown 9xxx instruction (crashes in CUDA)    
    $322    $8CDC   UNKNOWN  $8CDC           Unknown 8xxx instruction (crashes in CUDA)    
    $324    $212F   CALL     $12F            Call subroutine at $12F                       
>>> $326    $42C8   SNE      V2, #C8         Skip next instruction if V2 != $C8            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $328    $EAE7   UNKNOWN  $EAE7           Unknown Exxx instruction (crashes in CUDA)    
    $32A    $A9D9   LD       I, $9D9         Load $9D9 into I register                     
    $32C    $CB79   RND      VB, #79         VB = random() AND $79                         W:[11]
>>> $32E    $8E12   AND      VE, V1          VE = VE AND V1, VF = 0                        W:[14, 15] R:[1, 14]
          ^-- SORTING RELATED: Logical operation on V[1] (sets VF=0 in CUDA)
    $330    $A03A   LD       I, $03A         Load $03A into I register                     
    $332    $F6CB   UNKNOWN  $F6CB           Unknown Fxxx instruction (crashes in CUDA)    
    $334    $A629   LD       I, $629         Load $629 into I register                     
    $336    $26FB   CALL     $6FB            Call subroutine at $6FB                       
    $338    $EA7B   UNKNOWN  $EA7B           Unknown Exxx instruction (crashes in CUDA)    
    $33A    $8F92   AND      VF, V9          VF = VF AND V9, VF = 0                        W:[15] R:[9, 15]
>>> $33C    $7055   ADD      V0, #55         Add $55 to V0 (V0 = (V0 + $55) & 0xFF)        W:[0] R:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $33E    $DB38   DRW      VB, V3, #8      Draw 8-byte sprite at (VB, V3), VF = collision W:[15] R:[3, 11]
    $340    $28A6   CALL     $8A6            Call subroutine at $8A6                       
    $342    $058D   NOP      $058D           No operation (ignored by CUDA kernel)         
    $344    $F9ED   UNKNOWN  $F9ED           Unknown Fxxx instruction (crashes in CUDA)    
    $346    $0D63   NOP      $0D63           No operation (ignored by CUDA kernel)         
    $348    $99CC   UNKNOWN  $99CC           Unknown 9xxx instruction (crashes in CUDA)    
    $34A    $9098   UNKNOWN  $9098           Unknown 9xxx instruction (crashes in CUDA)    
    $34C    $6D35   LD       VD, #35         Load $35 into VD                              W:[13]
    $34E    $0834   NOP      $0834           No operation (ignored by CUDA kernel)         
>>> $350    $750D   ADD      V5, #0D         Add $0D to V5 (V5 = (V5 + $0D) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $352    $9D5C   UNKNOWN  $9D5C           Unknown 9xxx instruction (crashes in CUDA)    
>>> $354    $8120   LD       V1, V2          Load V2 into V1                               W:[1] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $356    $D8F5   DRW      V8, VF, #5      Draw 5-byte sprite at (V8, VF), VF = collision W:[15] R:[8, 15]
    $358    $1874   JP       $874            Jump to address $874                          
    $35A    $4831   SNE      V8, #31         Skip next instruction if V8 != $31            R:[8]
    $35C    $BA81   JP       V0, $A81        Jump to $A81 + V0                             R:[0]
    $35E    $B243   JP       V0, $243        Jump to $243 + V0                             R:[0]
    $360    $99C4   UNKNOWN  $99C4           Unknown 9xxx instruction (crashes in CUDA)    
>>> $362    $677A   LD       V7, #7A         Load $7A into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $364    $78CE   ADD      V8, #CE         Add $CE to V8 (V8 = (V8 + $CE) & 0xFF)        W:[8] R:[8]
    $366    $A546   LD       I, $546         Load $546 into I register                     
    $368    $9A9F   UNKNOWN  $9A9F           Unknown 9xxx instruction (crashes in CUDA)    
    $36A    $51DD   UNKNOWN  $51DD           Unknown 5xxx instruction (crashes in CUDA)    
    $36C    $5FFE   UNKNOWN  $5FFE           Unknown 5xxx instruction (crashes in CUDA)    
    $36E    $B82D   JP       V0, $82D        Jump to $82D + V0                             R:[0]
    $370    $7A0D   ADD      VA, #0D         Add $0D to VA (VA = (VA + $0D) & 0xFF)        W:[10] R:[10]
>>> $372    $C45B   RND      V4, #5B         V4 = random() AND $5B                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $374    $FF00   UNKNOWN  $FF00           Unknown Fxxx instruction (crashes in CUDA)    
    $376    $4F96   SNE      VF, #96         Skip next instruction if VF != $96            R:[15]
    $378    $2998   CALL     $998            Call subroutine at $998                       
    $37A    $C985   RND      V9, #85         V9 = random() AND $85                         W:[9]
    $37C    $52EC   UNKNOWN  $52EC           Unknown 5xxx instruction (crashes in CUDA)    
>>> $37E    $8256   SHR      V2              V2 = V2 >> 1, VF = LSB                        W:[2, 15] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $380    $CEB8   RND      VE, #B8         VE = random() AND $B8                         W:[14]
    $382    $F6FE   UNKNOWN  $F6FE           Unknown Fxxx instruction (crashes in CUDA)    
    $384    $9FAD   UNKNOWN  $9FAD           Unknown 9xxx instruction (crashes in CUDA)    
    $386    $538A   UNKNOWN  $538A           Unknown 5xxx instruction (crashes in CUDA)    
    $388    $5AA5   UNKNOWN  $5AA5           Unknown 5xxx instruction (crashes in CUDA)    
    $38A    $9302   UNKNOWN  $9302           Unknown 9xxx instruction (crashes in CUDA)    
    $38C    $5C6B   UNKNOWN  $5C6B           Unknown 5xxx instruction (crashes in CUDA)    
    $38E    $8F46   SHR      VF              VF = VF >> 1, VF = LSB                        W:[15] R:[15]
    $390    $DB21   DRW      VB, V2, #1      Draw 1-byte sprite at (VB, V2), VF = collision W:[15] R:[2, 11]
>>> $392    $7435   ADD      V4, #35         Add $35 to V4 (V4 = (V4 + $35) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
>>> $394    $61A5   LD       V1, #A5         Load $A5 into V1                              W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $396    $FFF6   UNKNOWN  $FFF6           Unknown Fxxx instruction (crashes in CUDA)    
    $398    $04E8   NOP      $04E8           No operation (ignored by CUDA kernel)         
    $39A    $53AF   UNKNOWN  $53AF           Unknown 5xxx instruction (crashes in CUDA)    
    $39C    $B629   JP       V0, $629        Jump to $629 + V0                             R:[0]
    $39E    $0703   NOP      $0703           No operation (ignored by CUDA kernel)         
>>> $3A0    $73BB   ADD      V3, #BB         Add $BB to V3 (V3 = (V3 + $BB) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $3A2    $D205   DRW      V2, V0, #5      Draw 5-byte sprite at (V2, V0), VF = collision W:[15] R:[0, 2]
    $3A4    $C8B0   RND      V8, #B0         V8 = random() AND $B0                         W:[8]
    $3A6    $CC68   RND      VC, #68         VC = random() AND $68                         W:[12]
    $3A8    $8EF7   SUBN     VE, VF          VE = (VF - VE) & 0xFF, VF = NOT borrow        W:[14, 15] R:[14, 15]
    $3AA    $3904   SE       V9, #04         Skip next instruction if V9 == $04            R:[9]
>>> $3AC    $7380   ADD      V3, #80         Add $80 to V3 (V3 = (V3 + $80) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $3AE    $17AD   JP       $7AD            Jump to address $7AD                          
    $3B0    $6D48   LD       VD, #48         Load $48 into VD                              W:[13]
    $3B2    $2ECB   CALL     $ECB            Call subroutine at $ECB                       
    $3B4    $6FEF   LD       VF, #EF         Load $EF into VF                              W:[15]
    $3B6    $94D2   UNKNOWN  $94D2           Unknown 9xxx instruction (crashes in CUDA)    
>>> $3B8    $74E2   ADD      V4, #E2         Add $E2 to V4 (V4 = (V4 + $E2) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $3BA    $EF0C   UNKNOWN  $EF0C           Unknown Exxx instruction (crashes in CUDA)    
>>> $3BC    $8285   SUB      V2, V8          V2 = (V2 - V8) & 0xFF, VF = NOT borrow        W:[2, 15] R:[2, 8]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $3BE    $AF09   LD       I, $F09         Load $F09 into I register                     
    $3C0    $BA20   JP       V0, $A20        Jump to $A20 + V0                             R:[0]
>>> $3C2    $C009   RND      V0, #09         V0 = random() AND $09                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $3C4    $D5F3   DRW      V5, VF, #3      Draw 3-byte sprite at (V5, VF), VF = collision W:[15] R:[5, 15]
    $3C6    $E851   UNKNOWN  $E851           Unknown Exxx instruction (crashes in CUDA)    
    $3C8    $7A05   ADD      VA, #05         Add $05 to VA (VA = (VA + $05) & 0xFF)        W:[10] R:[10]
    $3CA    $801D   UNKNOWN  $801D           Unknown 8xxx instruction (crashes in CUDA)    
>>> $3CC    $4618   SNE      V6, #18         Skip next instruction if V6 != $18            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $3CE    $A420   LD       I, $420         Load $420 into I register                     
    $3D0    $4E1F   SNE      VE, #1F         Skip next instruction if VE != $1F            R:[14]
    $3D2    $55F4   UNKNOWN  $55F4           Unknown 5xxx instruction (crashes in CUDA)    
    $3D4    $56CF   UNKNOWN  $56CF           Unknown 5xxx instruction (crashes in CUDA)    
    $3D6    $0F5C   NOP      $0F5C           No operation (ignored by CUDA kernel)         
    $3D8    $5C79   UNKNOWN  $5C79           Unknown 5xxx instruction (crashes in CUDA)    
    $3DA    $FBCE   UNKNOWN  $FBCE           Unknown Fxxx instruction (crashes in CUDA)    
    $3DC    $5211   UNKNOWN  $5211           Unknown 5xxx instruction (crashes in CUDA)    
    $3DE    $D716   DRW      V7, V1, #6      Draw 6-byte sprite at (V7, V1), VF = collision W:[15] R:[1, 7]
    $3E0    $1944   JP       $944            Jump to address $944                          
    $3E2    $DBA8   DRW      VB, VA, #8      Draw 8-byte sprite at (VB, VA), VF = collision W:[15] R:[10, 11]
>>> $3E4    $774B   ADD      V7, #4B         Add $4B to V7 (V7 = (V7 + $4B) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $3E6    $121F   JP       $21F            Jump to address $21F                          
>>> $3E8    $C0CD   RND      V0, #CD         V0 = random() AND $CD                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $3EA    $6BA3   LD       VB, #A3         Load $A3 into VB                              W:[11]
    $3EC    $D3E6   DRW      V3, VE, #6      Draw 6-byte sprite at (V3, VE), VF = collision W:[15] R:[3, 14]
    $3EE    $9EB2   UNKNOWN  $9EB2           Unknown 9xxx instruction (crashes in CUDA)    
    $3F0    $FB1E   ADD      I, VB           I = (I + VB) & 0xFFFF                         R:[11]
    $3F2    $26AD   CALL     $6AD            Call subroutine at $6AD                       
    $3F4    $A944   LD       I, $944         Load $944 into I register                     
    $3F6    $FB14   UNKNOWN  $FB14           Unknown Fxxx instruction (crashes in CUDA)    
>>> $3F8    $9440   SNE      V4, V4          Skip next instruction if V4 != V4             R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $3FA    $0951   NOP      $0951           No operation (ignored by CUDA kernel)         
    $3FC    $83E8   UNKNOWN  $83E8           Unknown 8xxx instruction (crashes in CUDA)    
>>> $3FE    $376B   SE       V7, #6B         Skip next instruction if V7 == $6B            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $400    $4B9F   SNE      VB, #9F         Skip next instruction if VB != $9F            R:[11]
    $402    $7C36   ADD      VC, #36         Add $36 to VC (VC = (VC + $36) & 0xFF)        W:[12] R:[12]
    $404    $D5E0   DRW      V5, VE, #0      Draw 0-byte sprite at (V5, VE), VF = collision W:[15] R:[5, 14]
>>> $406    $7689   ADD      V6, #89         Add $89 to V6 (V6 = (V6 + $89) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $408    $F7CF   UNKNOWN  $F7CF           Unknown Fxxx instruction (crashes in CUDA)    
    $40A    $9FDA   UNKNOWN  $9FDA           Unknown 9xxx instruction (crashes in CUDA)    
>>> $40C    $C469   RND      V4, #69         V4 = random() AND $69                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $40E    $E8B1   UNKNOWN  $E8B1           Unknown Exxx instruction (crashes in CUDA)    
    $410    $839B   UNKNOWN  $839B           Unknown 8xxx instruction (crashes in CUDA)    
    $412    $7B1B   ADD      VB, #1B         Add $1B to VB (VB = (VB + $1B) & 0xFF)        W:[11] R:[11]
    $414    $A9E1   LD       I, $9E1         Load $9E1 into I register                     
>>> $416    $753C   ADD      V5, #3C         Add $3C to V5 (V5 = (V5 + $3C) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $418    $A4F1   LD       I, $4F1         Load $4F1 into I register                     
>>> $41A    $C195   RND      V1, #95         V1 = random() AND $95                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $41C    $3864   SE       V8, #64         Skip next instruction if V8 == $64            R:[8]
    $41E    $9655   UNKNOWN  $9655           Unknown 9xxx instruction (crashes in CUDA)    
    $420    $264F   CALL     $64F            Call subroutine at $64F                       
>>> $422    $418F   SNE      V1, #8F         Skip next instruction if V1 != $8F            R:[1]
          ^-- SORTING RELATED: Compares sorted registers V[1]
    $424    $9314   UNKNOWN  $9314           Unknown 9xxx instruction (crashes in CUDA)    
    $426    $57ED   UNKNOWN  $57ED           Unknown 5xxx instruction (crashes in CUDA)    
>>> $428    $37D9   SE       V7, #D9         Skip next instruction if V7 == $D9            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
>>> $42A    $4354   SNE      V3, #54         Skip next instruction if V3 != $54            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
>>> $42C    $3594   SE       V5, #94         Skip next instruction if V5 == $94            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $42E    $B247   JP       V0, $247        Jump to $247 + V0                             R:[0]
    $430    $DF9E   DRW      VF, V9, #E      Draw 14-byte sprite at (VF, V9), VF = collision W:[15] R:[9, 15]
    $432    $BC34   JP       V0, $C34        Jump to $C34 + V0                             R:[0]
    $434    $0BB5   NOP      $0BB5           No operation (ignored by CUDA kernel)         
    $436    $7DB0   ADD      VD, #B0         Add $B0 to VD (VD = (VD + $B0) & 0xFF)        W:[13] R:[13]
    $438    $D077   DRW      V0, V7, #7      Draw 7-byte sprite at (V0, V7), VF = collision W:[15] R:[0, 7]
>>> $43A    $42AD   SNE      V2, #AD         Skip next instruction if V2 != $AD            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $43C    $EF90   UNKNOWN  $EF90           Unknown Exxx instruction (crashes in CUDA)    
    $43E    $06FF   NOP      $06FF           No operation (ignored by CUDA kernel)         
    $440    $A665   LD       I, $665         Load $665 into I register                     
    $442    $39BB   SE       V9, #BB         Skip next instruction if V9 == $BB            R:[9]
    $444    $3ECE   SE       VE, #CE         Skip next instruction if VE == $CE            R:[14]
    $446    $E8D7   UNKNOWN  $E8D7           Unknown Exxx instruction (crashes in CUDA)    
    $448    $4825   SNE      V8, #25         Skip next instruction if V8 != $25            R:[8]
    $44A    $105F   JP       $05F            Jump to address $05F                          
    $44C    $1213   JP       $213            Jump to address $213                          
>>> $44E    $67D4   LD       V7, #D4         Load $D4 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $450    $BB1D   JP       V0, $B1D        Jump to $B1D + V0                             R:[0]
>>> $452    $4079   SNE      V0, #79         Skip next instruction if V0 != $79            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $454    $9C21   UNKNOWN  $9C21           Unknown 9xxx instruction (crashes in CUDA)    
>>> $456    $340F   SE       V4, #0F         Skip next instruction if V4 == $0F            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $458    $2555   CALL     $555            Call subroutine at $555                       
    $45A    $90AD   UNKNOWN  $90AD           Unknown 9xxx instruction (crashes in CUDA)    
    $45C    $D794   DRW      V7, V9, #4      Draw 4-byte sprite at (V7, V9), VF = collision W:[15] R:[7, 9]
    $45E    $4E9E   SNE      VE, #9E         Skip next instruction if VE != $9E            R:[14]
    $460    $EDF1   UNKNOWN  $EDF1           Unknown Exxx instruction (crashes in CUDA)    
    $462    $04AF   NOP      $04AF           No operation (ignored by CUDA kernel)         
    $464    $2D5A   CALL     $D5A            Call subroutine at $D5A                       
    $466    $21D5   CALL     $1D5            Call subroutine at $1D5                       
    $468    $CF8D   RND      VF, #8D         VF = random() AND $8D                         W:[15]
    $46A    $9A1E   UNKNOWN  $9A1E           Unknown 9xxx instruction (crashes in CUDA)    
>>> $46C    $36CD   SE       V6, #CD         Skip next instruction if V6 == $CD            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $46E    $56DB   UNKNOWN  $56DB           Unknown 5xxx instruction (crashes in CUDA)    
>>> $470    $61E9   LD       V1, #E9         Load $E9 into V1                              W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $472    $9A97   UNKNOWN  $9A97           Unknown 9xxx instruction (crashes in CUDA)    
    $474    $91D6   UNKNOWN  $91D6           Unknown 9xxx instruction (crashes in CUDA)    
    $476    $CC6B   RND      VC, #6B         VC = random() AND $6B                         W:[12]
    $478    $95CB   UNKNOWN  $95CB           Unknown 9xxx instruction (crashes in CUDA)    
    $47A    $F8E7   UNKNOWN  $F8E7           Unknown Fxxx instruction (crashes in CUDA)    
    $47C    $913C   UNKNOWN  $913C           Unknown 9xxx instruction (crashes in CUDA)    
>>> $47E    $7568   ADD      V5, #68         Add $68 to V5 (V5 = (V5 + $68) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $480    $DD74   DRW      VD, V7, #4      Draw 4-byte sprite at (VD, V7), VF = collision W:[15] R:[7, 13]
    $482    $858C   UNKNOWN  $858C           Unknown 8xxx instruction (crashes in CUDA)    
    $484    $7C37   ADD      VC, #37         Add $37 to VC (VC = (VC + $37) & 0xFF)        W:[12] R:[12]
    $486    $B33A   JP       V0, $33A        Jump to $33A + V0                             R:[0]
    $488    $D70E   DRW      V7, V0, #E      Draw 14-byte sprite at (V7, V0), VF = collision W:[15] R:[0, 7]
    $48A    $9F21   UNKNOWN  $9F21           Unknown 9xxx instruction (crashes in CUDA)    
    $48C    $8886   SHR      V8              V8 = V8 >> 1, VF = LSB                        W:[8, 15] R:[8]
    $48E    $EE4E   UNKNOWN  $EE4E           Unknown Exxx instruction (crashes in CUDA)    
    $490    $DC24   DRW      VC, V2, #4      Draw 4-byte sprite at (VC, V2), VF = collision W:[15] R:[2, 12]
    $492    $0C72   NOP      $0C72           No operation (ignored by CUDA kernel)         
>>> $494    $C755   RND      V7, #55         V7 = random() AND $55                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
>>> $496    $77B4   ADD      V7, #B4         Add $B4 to V7 (V7 = (V7 + $B4) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $498    $A2C2   LD       I, $2C2         Load $2C2 into I register                     
    $49A    $B54F   JP       V0, $54F        Jump to $54F + V0                             R:[0]
    $49C    $08D6   NOP      $08D6           No operation (ignored by CUDA kernel)         
    $49E    $ABE1   LD       I, $BE1         Load $BE1 into I register                     
    $4A0    $E515   UNKNOWN  $E515           Unknown Exxx instruction (crashes in CUDA)    
    $4A2    $6DAC   LD       VD, #AC         Load $AC into VD                              W:[13]
    $4A4    $BA4E   JP       V0, $A4E        Jump to $A4E + V0                             R:[0]
    $4A6    $D699   DRW      V6, V9, #9      Draw 9-byte sprite at (V6, V9), VF = collision W:[15] R:[6, 9]
    $4A8    $9FA4   UNKNOWN  $9FA4           Unknown 9xxx instruction (crashes in CUDA)    
    $4AA    $B94F   JP       V0, $94F        Jump to $94F + V0                             R:[0]
    $4AC    $BCC2   JP       V0, $CC2        Jump to $CC2 + V0                             R:[0]
    $4AE    $4CAA   SNE      VC, #AA         Skip next instruction if VC != $AA            R:[12]
    $4B0    $1107   JP       $107            Jump to address $107                          
    $4B2    $F49C   UNKNOWN  $F49C           Unknown Fxxx instruction (crashes in CUDA)    
    $4B4    $9B73   UNKNOWN  $9B73           Unknown 9xxx instruction (crashes in CUDA)    
>>> $4B6    $47C0   SNE      V7, #C0         Skip next instruction if V7 != $C0            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $4B8    $1822   JP       $822            Jump to address $822                          
    $4BA    $1851   JP       $851            Jump to address $851                          
>>> $4BC    $718F   ADD      V1, #8F         Add $8F to V1 (V1 = (V1 + $8F) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
>>> $4BE    $C4B4   RND      V4, #B4         V4 = random() AND $B4                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $4C0    $1F1A   JP       $F1A            Jump to address $F1A                          
    $4C2    $A6F4   LD       I, $6F4         Load $6F4 into I register                     
>>> $4C4    $46EE   SNE      V6, #EE         Skip next instruction if V6 != $EE            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $4C6    $6D61   LD       VD, #61         Load $61 into VD                              W:[13]
    $4C8    $68BC   LD       V8, #BC         Load $BC into V8                              W:[8]
    $4CA    $E095   UNKNOWN  $E095           Unknown Exxx instruction (crashes in CUDA)    
    $4CC    $F8B7   UNKNOWN  $F8B7           Unknown Fxxx instruction (crashes in CUDA)    
    $4CE    $D6A3   DRW      V6, VA, #3      Draw 3-byte sprite at (V6, VA), VF = collision W:[15] R:[6, 10]
    $4D0    $1547   JP       $547            Jump to address $547                          
    $4D2    $FAF2   UNKNOWN  $FAF2           Unknown Fxxx instruction (crashes in CUDA)    
    $4D4    $4B0B   SNE      VB, #0B         Skip next instruction if VB != $0B            R:[11]
    $4D6    $9734   UNKNOWN  $9734           Unknown 9xxx instruction (crashes in CUDA)    
    $4D8    $5609   UNKNOWN  $5609           Unknown 5xxx instruction (crashes in CUDA)    
>>> $4DA    $47D8   SNE      V7, #D8         Skip next instruction if V7 != $D8            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $4DC    $B336   JP       V0, $336        Jump to $336 + V0                             R:[0]
    $4DE    $D719   DRW      V7, V1, #9      Draw 9-byte sprite at (V7, V1), VF = collision W:[15] R:[1, 7]
    $4E0    $E786   UNKNOWN  $E786           Unknown Exxx instruction (crashes in CUDA)    
    $4E2    $F7E4   UNKNOWN  $F7E4           Unknown Fxxx instruction (crashes in CUDA)    
    $4E4    $E126   UNKNOWN  $E126           Unknown Exxx instruction (crashes in CUDA)    
    $4E6    $21A9   CALL     $1A9            Call subroutine at $1A9                       
    $4E8    $E883   UNKNOWN  $E883           Unknown Exxx instruction (crashes in CUDA)    
    $4EA    $D409   DRW      V4, V0, #9      Draw 9-byte sprite at (V4, V0), VF = collision W:[15] R:[0, 4]
    $4EC    $9208   UNKNOWN  $9208           Unknown 9xxx instruction (crashes in CUDA)    
    $4EE    $B7B0   JP       V0, $7B0        Jump to $7B0 + V0                             R:[0]
    $4F0    $F781   UNKNOWN  $F781           Unknown Fxxx instruction (crashes in CUDA)    
    $4F2    $7DCB   ADD      VD, #CB         Add $CB to VD (VD = (VD + $CB) & 0xFF)        W:[13] R:[13]
    $4F4    $5FA4   UNKNOWN  $5FA4           Unknown 5xxx instruction (crashes in CUDA)    
    $4F6    $3892   SE       V8, #92         Skip next instruction if V8 == $92            R:[8]
>>> $4F8    $C007   RND      V0, #07         V0 = random() AND $07                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $4FA    $AEBF   LD       I, $EBF         Load $EBF into I register                     
    $4FC    $6DF7   LD       VD, #F7         Load $F7 into VD                              W:[13]
>>> $4FE    $87D1   OR       V7, VD          V7 = V7 OR VD, VF = 0                         W:[7, 15] R:[7, 13]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $500    $016D   NOP      $016D           No operation (ignored by CUDA kernel)         
    $502    $AC6E   LD       I, $C6E         Load $C6E into I register                     
    $504    $2FAA   CALL     $FAA            Call subroutine at $FAA                       
>>> $506    $33D7   SE       V3, #D7         Skip next instruction if V3 == $D7            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $508    $2FF2   CALL     $FF2            Call subroutine at $FF2                       
>>> $50A    $62B2   LD       V2, #B2         Load $B2 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $50C    $7F59   ADD      VF, #59         Add $59 to VF (VF = (VF + $59) & 0xFF)        W:[15] R:[15]
    $50E    $AAC3   LD       I, $AC3         Load $AC3 into I register                     
    $510    $0FA7   NOP      $0FA7           No operation (ignored by CUDA kernel)         
    $512    $59E9   UNKNOWN  $59E9           Unknown 5xxx instruction (crashes in CUDA)    
    $514    $E4A0   UNKNOWN  $E4A0           Unknown Exxx instruction (crashes in CUDA)    
>>> $516    $727A   ADD      V2, #7A         Add $7A to V2 (V2 = (V2 + $7A) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $518    $7467   ADD      V4, #67         Add $67 to V4 (V4 = (V4 + $67) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $51A    $3E51   SE       VE, #51         Skip next instruction if VE == $51            R:[14]
    $51C    $D99B   DRW      V9, V9, #B      Draw 11-byte sprite at (V9, V9), VF = collision W:[15] R:[9]
>>> $51E    $61B6   LD       V1, #B6         Load $B6 into V1                              W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $520    $2A8A   CALL     $A8A            Call subroutine at $A8A                       
    $522    $027B   NOP      $027B           No operation (ignored by CUDA kernel)         
    $524    $08D1   NOP      $08D1           No operation (ignored by CUDA kernel)         
    $526    $6973   LD       V9, #73         Load $73 into V9                              W:[9]
    $528    $15E2   JP       $5E2            Jump to address $5E2                          
    $52A    $A5CB   LD       I, $5CB         Load $5CB into I register                     
    $52C    $B5B1   JP       V0, $5B1        Jump to $5B1 + V0                             R:[0]
    $52E    $067A   NOP      $067A           No operation (ignored by CUDA kernel)         
    $530    $5086   UNKNOWN  $5086           Unknown 5xxx instruction (crashes in CUDA)    
    $532    $5D58   UNKNOWN  $5D58           Unknown 5xxx instruction (crashes in CUDA)    
    $534    $1D2B   JP       $D2B            Jump to address $D2B                          
>>> $536    $C354   RND      V3, #54         V3 = random() AND $54                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $538    $5D5B   UNKNOWN  $5D5B           Unknown 5xxx instruction (crashes in CUDA)    
    $53A    $9F09   UNKNOWN  $9F09           Unknown 9xxx instruction (crashes in CUDA)    
    $53C    $A491   LD       I, $491         Load $491 into I register                     
>>> $53E    $66FC   LD       V6, #FC         Load $FC into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $540    $FA8A   UNKNOWN  $FA8A           Unknown Fxxx instruction (crashes in CUDA)    
    $542    $EA57   UNKNOWN  $EA57           Unknown Exxx instruction (crashes in CUDA)    
    $544    $E557   UNKNOWN  $E557           Unknown Exxx instruction (crashes in CUDA)    
>>> $546    $7437   ADD      V4, #37         Add $37 to V4 (V4 = (V4 + $37) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $548    $E9DB   UNKNOWN  $E9DB           Unknown Exxx instruction (crashes in CUDA)    
>>> $54A    $351F   SE       V5, #1F         Skip next instruction if V5 == $1F            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $54C    $B252   JP       V0, $252        Jump to $252 + V0                             R:[0]
>>> $54E    $6357   LD       V3, #57         Load $57 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $550    $C3D3   RND      V3, #D3         V3 = random() AND $D3                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $552    $596B   UNKNOWN  $596B           Unknown 5xxx instruction (crashes in CUDA)    
    $554    $51FE   UNKNOWN  $51FE           Unknown 5xxx instruction (crashes in CUDA)    
    $556    $EC8D   UNKNOWN  $EC8D           Unknown Exxx instruction (crashes in CUDA)    
    $558    $12AA   JP       $2AA            Jump to address $2AA                          
>>> $55A    $9F30   SNE      VF, V3          Skip next instruction if VF != V3             R:[3, 15]
          ^-- SORTING RELATED: Compares sorted registers V[3]
>>> $55C    $C0CD   RND      V0, #CD         V0 = random() AND $CD                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $55E    $A694   LD       I, $694         Load $694 into I register                     
>>> $560    $35A9   SE       V5, #A9         Skip next instruction if V5 == $A9            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $562    $9F91   UNKNOWN  $9F91           Unknown 9xxx instruction (crashes in CUDA)    
    $564    $5382   UNKNOWN  $5382           Unknown 5xxx instruction (crashes in CUDA)    
    $566    $3A1E   SE       VA, #1E         Skip next instruction if VA == $1E            R:[10]
    $568    $490C   SNE      V9, #0C         Skip next instruction if V9 != $0C            R:[9]
    $56A    $0E44   NOP      $0E44           No operation (ignored by CUDA kernel)         
    $56C    $49CD   SNE      V9, #CD         Skip next instruction if V9 != $CD            R:[9]
    $56E    $ED6E   UNKNOWN  $ED6E           Unknown Exxx instruction (crashes in CUDA)    
    $570    $CD34   RND      VD, #34         VD = random() AND $34                         W:[13]
    $572    $68F8   LD       V8, #F8         Load $F8 into V8                              W:[8]
    $574    $2837   CALL     $837            Call subroutine at $837                       
    $576    $0C8A   NOP      $0C8A           No operation (ignored by CUDA kernel)         
    $578    $5FD0   SE       VF, VD          Skip next instruction if VF == VD             R:[13, 15]
    $57A    $E38B   UNKNOWN  $E38B           Unknown Exxx instruction (crashes in CUDA)    
    $57C    $D5D8   DRW      V5, VD, #8      Draw 8-byte sprite at (V5, VD), VF = collision W:[15] R:[5, 13]
    $57E    $11D3   JP       $1D3            Jump to address $1D3                          
    $580    $9456   UNKNOWN  $9456           Unknown 9xxx instruction (crashes in CUDA)    
    $582    $EC93   UNKNOWN  $EC93           Unknown Exxx instruction (crashes in CUDA)    
>>> $584    $745C   ADD      V4, #5C         Add $5C to V4 (V4 = (V4 + $5C) & 0xFF)        W:[4] R:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
>>> $586    $8363   XOR      V3, V6          V3 = V3 XOR V6, VF = 0                        W:[3, 15] R:[3, 6]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $588    $0899   NOP      $0899           No operation (ignored by CUDA kernel)         
    $58A    $096D   NOP      $096D           No operation (ignored by CUDA kernel)         
    $58C    $5D28   UNKNOWN  $5D28           Unknown 5xxx instruction (crashes in CUDA)    
    $58E    $A056   LD       I, $056         Load $056 into I register                     
    $590    $8881   OR       V8, V8          V8 = V8 OR V8, VF = 0                         W:[8, 15] R:[8]
    $592    $4BF8   SNE      VB, #F8         Skip next instruction if VB != $F8            R:[11]
    $594    $DC77   DRW      VC, V7, #7      Draw 7-byte sprite at (VC, V7), VF = collision W:[15] R:[7, 12]
    $596    $0052   NOP      $0052           No operation (ignored by CUDA kernel)         
    $598    $1F7D   JP       $F7D            Jump to address $F7D                          
>>> $59A    $8D74   ADD      VD, V7          VD = (VD + V7) & 0xFF, VF = carry             W:[13, 15] R:[7, 13]
          ^-- SORTING RELATED: Arithmetic on sorted registers V[7]
>>> $59C    $445C   SNE      V4, #5C         Skip next instruction if V4 != $5C            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $59E    $1B47   JP       $B47            Jump to address $B47                          
    $5A0    $2633   CALL     $633            Call subroutine at $633                       
    $5A2    $2F0D   CALL     $F0D            Call subroutine at $F0D                       
    $5A4    $B598   JP       V0, $598        Jump to $598 + V0                             R:[0]
    $5A6    $7AAB   ADD      VA, #AB         Add $AB to VA (VA = (VA + $AB) & 0xFF)        W:[10] R:[10]
>>> $5A8    $7271   ADD      V2, #71         Add $71 to V2 (V2 = (V2 + $71) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $5AA    $307F   SE       V0, #7F         Skip next instruction if V0 == $7F            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $5AC    $F158   UNKNOWN  $F158           Unknown Fxxx instruction (crashes in CUDA)    
    $5AE    $10CB   JP       $0CB            Jump to address $0CB                          
    $5B0    $D0E2   DRW      V0, VE, #2      Draw 2-byte sprite at (V0, VE), VF = collision W:[15] R:[0, 14]
    $5B2    $3952   SE       V9, #52         Skip next instruction if V9 == $52            R:[9]
    $5B4    $FE35   UNKNOWN  $FE35           Unknown Fxxx instruction (crashes in CUDA)    
    $5B6    $1699   JP       $699            Jump to address $699                          
    $5B8    $FC42   UNKNOWN  $FC42           Unknown Fxxx instruction (crashes in CUDA)    
    $5BA    $A443   LD       I, $443         Load $443 into I register                     
    $5BC    $E35C   UNKNOWN  $E35C           Unknown Exxx instruction (crashes in CUDA)    
>>> $5BE    $75BD   ADD      V5, #BD         Add $BD to V5 (V5 = (V5 + $BD) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $5C0    $E177   UNKNOWN  $E177           Unknown Exxx instruction (crashes in CUDA)    
    $5C2    $8A3A   UNKNOWN  $8A3A           Unknown 8xxx instruction (crashes in CUDA)    
    $5C4    $B80D   JP       V0, $80D        Jump to $80D + V0                             R:[0]
>>> $5C6    $474F   SNE      V7, #4F         Skip next instruction if V7 != $4F            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $5C8    $EB6B   UNKNOWN  $EB6B           Unknown Exxx instruction (crashes in CUDA)    
    $5CA    $910C   UNKNOWN  $910C           Unknown 9xxx instruction (crashes in CUDA)    
    $5CC    $E26D   UNKNOWN  $E26D           Unknown Exxx instruction (crashes in CUDA)    
    $5CE    $DB35   DRW      VB, V3, #5      Draw 5-byte sprite at (VB, V3), VF = collision W:[15] R:[3, 11]
    $5D0    $A821   LD       I, $821         Load $821 into I register                     
    $5D2    $F245   UNKNOWN  $F245           Unknown Fxxx instruction (crashes in CUDA)    
    $5D4    $549A   UNKNOWN  $549A           Unknown 5xxx instruction (crashes in CUDA)    
    $5D6    $6FF4   LD       VF, #F4         Load $F4 into VF                              W:[15]
    $5D8    $7C8B   ADD      VC, #8B         Add $8B to VC (VC = (VC + $8B) & 0xFF)        W:[12] R:[12]
    $5DA    $515D   UNKNOWN  $515D           Unknown 5xxx instruction (crashes in CUDA)    
>>> $5DC    $6442   LD       V4, #42         Load $42 into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $5DE    $ADBC   LD       I, $DBC         Load $DBC into I register                     
    $5E0    $BBB3   JP       V0, $BB3        Jump to $BB3 + V0                             R:[0]
    $5E2    $A5CF   LD       I, $5CF         Load $5CF into I register                     
    $5E4    $2075   CALL     $075            Call subroutine at $075                       
    $5E6    $9C51   UNKNOWN  $9C51           Unknown 9xxx instruction (crashes in CUDA)    
    $5E8    $05FC   NOP      $05FC           No operation (ignored by CUDA kernel)         
>>> $5EA    $70E2   ADD      V0, #E2         Add $E2 to V0 (V0 = (V0 + $E2) & 0xFF)        W:[0] R:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $5EC    $EA18   UNKNOWN  $EA18           Unknown Exxx instruction (crashes in CUDA)    
    $5EE    $F7FF   UNKNOWN  $F7FF           Unknown Fxxx instruction (crashes in CUDA)    
    $5F0    $A1FD   LD       I, $1FD         Load $1FD into I register                     
    $5F2    $ED0C   UNKNOWN  $ED0C           Unknown Exxx instruction (crashes in CUDA)    
    $5F4    $EB9B   UNKNOWN  $EB9B           Unknown Exxx instruction (crashes in CUDA)    
    $5F6    $5D78   UNKNOWN  $5D78           Unknown 5xxx instruction (crashes in CUDA)    
    $5F8    $DD53   DRW      VD, V5, #3      Draw 3-byte sprite at (VD, V5), VF = collision W:[15] R:[5, 13]
    $5FA    $2160   CALL     $160            Call subroutine at $160                       
    $5FC    $CF22   RND      VF, #22         VF = random() AND $22                         W:[15]
    $5FE    $4F8F   SNE      VF, #8F         Skip next instruction if VF != $8F            R:[15]
    $600    $89EE   SHL      V9              V9 = (V9 << 1) & 0xFF, VF = MSB               W:[9, 15] R:[9]
    $602    $D35B   DRW      V3, V5, #B      Draw 11-byte sprite at (V3, V5), VF = collision W:[15] R:[3, 5]
    $604    $121B   JP       $21B            Jump to address $21B                          
    $606    $CFA0   RND      VF, #A0         VF = random() AND $A0                         W:[15]
    $608    $FFC9   UNKNOWN  $FFC9           Unknown Fxxx instruction (crashes in CUDA)    
    $60A    $D76E   DRW      V7, V6, #E      Draw 14-byte sprite at (V7, V6), VF = collision W:[15] R:[6, 7]
>>> $60C    $62A6   LD       V2, #A6         Load $A6 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $60E    $8823   XOR      V8, V2          V8 = V8 XOR V2, VF = 0                        W:[8, 15] R:[2, 8]
          ^-- SORTING RELATED: Logical operation on V[2] (sets VF=0 in CUDA)
    $610    $9EEA   UNKNOWN  $9EEA           Unknown 9xxx instruction (crashes in CUDA)    
    $612    $17C2   JP       $7C2            Jump to address $7C2                          
    $614    $032B   NOP      $032B           No operation (ignored by CUDA kernel)         
>>> $616    $6535   LD       V5, #35         Load $35 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $618    $C8E4   RND      V8, #E4         V8 = random() AND $E4                         W:[8]
    $61A    $225D   CALL     $25D            Call subroutine at $25D                       
    $61C    $EC5C   UNKNOWN  $EC5C           Unknown Exxx instruction (crashes in CUDA)    
    $61E    $B308   JP       V0, $308        Jump to $308 + V0                             R:[0]
    $620    $F495   UNKNOWN  $F495           Unknown Fxxx instruction (crashes in CUDA)    
>>> $622    $45AA   SNE      V5, #AA         Skip next instruction if V5 != $AA            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
>>> $624    $C2D1   RND      V2, #D1         V2 = random() AND $D1                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $626    $ADE0   LD       I, $DE0         Load $DE0 into I register                     
    $628    $B722   JP       V0, $722        Jump to $722 + V0                             R:[0]
>>> $62A    $87A4   ADD      V7, VA          V7 = (V7 + VA) & 0xFF, VF = carry             W:[7, 15] R:[7, 10]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $62C    $55A6   UNKNOWN  $55A6           Unknown 5xxx instruction (crashes in CUDA)    
    $62E    $EDC5   UNKNOWN  $EDC5           Unknown Exxx instruction (crashes in CUDA)    
    $630    $B604   JP       V0, $604        Jump to $604 + V0                             R:[0]
    $632    $1419   JP       $419            Jump to address $419                          
    $634    $EAE3   UNKNOWN  $EAE3           Unknown Exxx instruction (crashes in CUDA)    
    $636    $5278   UNKNOWN  $5278           Unknown 5xxx instruction (crashes in CUDA)    
    $638    $F7E8   UNKNOWN  $F7E8           Unknown Fxxx instruction (crashes in CUDA)    
    $63A    $2B88   CALL     $B88            Call subroutine at $B88                       
    $63C    $E81B   UNKNOWN  $E81B           Unknown Exxx instruction (crashes in CUDA)    
    $63E    $6B75   LD       VB, #75         Load $75 into VB                              W:[11]
    $640    $7853   ADD      V8, #53         Add $53 to V8 (V8 = (V8 + $53) & 0xFF)        W:[8] R:[8]
    $642    $B570   JP       V0, $570        Jump to $570 + V0                             R:[0]
    $644    $D888   DRW      V8, V8, #8      Draw 8-byte sprite at (V8, V8), VF = collision W:[15] R:[8]
>>> $646    $42F0   SNE      V2, #F0         Skip next instruction if V2 != $F0            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $648    $2BF0   CALL     $BF0            Call subroutine at $BF0                       
    $64A    $A807   LD       I, $807         Load $807 into I register                     
    $64C    $B5F4   JP       V0, $5F4        Jump to $5F4 + V0                             R:[0]
    $64E    $4833   SNE      V8, #33         Skip next instruction if V8 != $33            R:[8]
    $650    $6FEF   LD       VF, #EF         Load $EF into VF                              W:[15]
    $652    $D32B   DRW      V3, V2, #B      Draw 11-byte sprite at (V3, V2), VF = collision W:[15] R:[2, 3]
    $654    $2A5D   CALL     $A5D            Call subroutine at $A5D                       
>>> $656    $9F50   SNE      VF, V5          Skip next instruction if VF != V5             R:[5, 15]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $658    $2F2B   CALL     $F2B            Call subroutine at $F2B                       
>>> $65A    $71EE   ADD      V1, #EE         Add $EE to V1 (V1 = (V1 + $EE) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
>>> $65C    $614A   LD       V1, #4A         Load $4A into V1                              W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $65E    $BEFB   JP       V0, $EFB        Jump to $EFB + V0                             R:[0]
    $660    $ECE4   UNKNOWN  $ECE4           Unknown Exxx instruction (crashes in CUDA)    
    $662    $AF5D   LD       I, $F5D         Load $F5D into I register                     
    $664    $1F1A   JP       $F1A            Jump to address $F1A                          
    $666    $5DAA   UNKNOWN  $5DAA           Unknown 5xxx instruction (crashes in CUDA)    
    $668    $222E   CALL     $22E            Call subroutine at $22E                       
>>> $66A    $6208   LD       V2, #08         Load $08 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $66C    $6318   LD       V3, #18         Load $18 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $66E    $1788   JP       $788            Jump to address $788                          
>>> $670    $C038   RND      V0, #38         V0 = random() AND $38                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $672    $3833   SE       V8, #33         Skip next instruction if V8 == $33            R:[8]
    $674    $ECF6   UNKNOWN  $ECF6           Unknown Exxx instruction (crashes in CUDA)    
    $676    $97CE   UNKNOWN  $97CE           Unknown 9xxx instruction (crashes in CUDA)    
    $678    $9FF7   UNKNOWN  $9FF7           Unknown 9xxx instruction (crashes in CUDA)    
>>> $67A    $C686   RND      V6, #86         V6 = random() AND $86                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $67C    $E09A   UNKNOWN  $E09A           Unknown Exxx instruction (crashes in CUDA)    
    $67E    $6A8A   LD       VA, #8A         Load $8A into VA                              W:[10]
>>> $680    $C0E5   RND      V0, #E5         V0 = random() AND $E5                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $682    $97F8   UNKNOWN  $97F8           Unknown 9xxx instruction (crashes in CUDA)    
>>> $684    $3236   SE       V2, #36         Skip next instruction if V2 == $36            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $686    $D061   DRW      V0, V6, #1      Draw 1-byte sprite at (V0, V6), VF = collision W:[15] R:[0, 6]
    $688    $1081   JP       $081            Jump to address $081                          
    $68A    $02D5   NOP      $02D5           No operation (ignored by CUDA kernel)         
    $68C    $A038   LD       I, $038         Load $038 into I register                     
    $68E    $3B23   SE       VB, #23         Skip next instruction if VB == $23            R:[11]
>>> $690    $C430   RND      V4, #30         V4 = random() AND $30                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $692    $9637   UNKNOWN  $9637           Unknown 9xxx instruction (crashes in CUDA)    
    $694    $0BE0   NOP      $0BE0           No operation (ignored by CUDA kernel)         
    $696    $00B9   NOP      $00B9           No operation (ignored by CUDA kernel)         
    $698    $CA58   RND      VA, #58         VA = random() AND $58                         W:[10]
    $69A    $2552   CALL     $552            Call subroutine at $552                       
    $69C    $F4B7   UNKNOWN  $F4B7           Unknown Fxxx instruction (crashes in CUDA)    
    $69E    $9644   UNKNOWN  $9644           Unknown 9xxx instruction (crashes in CUDA)    
    $6A0    $DAFE   DRW      VA, VF, #E      Draw 14-byte sprite at (VA, VF), VF = collision W:[15] R:[10, 15]
    $6A2    $079C   NOP      $079C           No operation (ignored by CUDA kernel)         
    $6A4    $5D67   UNKNOWN  $5D67           Unknown 5xxx instruction (crashes in CUDA)    
    $6A6    $6FDB   LD       VF, #DB         Load $DB into VF                              W:[15]
    $6A8    $D014   DRW      V0, V1, #4      Draw 4-byte sprite at (V0, V1), VF = collision W:[15] R:[0, 1]
    $6AA    $CD08   RND      VD, #08         VD = random() AND $08                         W:[13]
    $6AC    $526C   UNKNOWN  $526C           Unknown 5xxx instruction (crashes in CUDA)    
>>> $6AE    $C797   RND      V7, #97         V7 = random() AND $97                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $6B0    $9794   UNKNOWN  $9794           Unknown 9xxx instruction (crashes in CUDA)    
    $6B2    $299D   CALL     $99D            Call subroutine at $99D                       
>>> $6B4    $7142   ADD      V1, #42         Add $42 to V1 (V1 = (V1 + $42) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $6B6    $D141   DRW      V1, V4, #1      Draw 1-byte sprite at (V1, V4), VF = collision W:[15] R:[1, 4]
    $6B8    $2E7C   CALL     $E7C            Call subroutine at $E7C                       
    $6BA    $FEB5   UNKNOWN  $FEB5           Unknown Fxxx instruction (crashes in CUDA)    
    $6BC    $0EE2   NOP      $0EE2           No operation (ignored by CUDA kernel)         
>>> $6BE    $6028   LD       V0, #28         Load $28 into V0                              W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
>>> $6C0    $81F3   XOR      V1, VF          V1 = V1 XOR VF, VF = 0                        W:[1, 15] R:[1, 15]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $6C2    $B729   JP       V0, $729        Jump to $729 + V0                             R:[0]
    $6C4    $9EAC   UNKNOWN  $9EAC           Unknown 9xxx instruction (crashes in CUDA)    
    $6C6    $7B33   ADD      VB, #33         Add $33 to VB (VB = (VB + $33) & 0xFF)        W:[11] R:[11]
    $6C8    $B3DE   JP       V0, $3DE        Jump to $3DE + V0                             R:[0]
    $6CA    $A356   LD       I, $356         Load $356 into I register                     
    $6CC    $DF0E   DRW      VF, V0, #E      Draw 14-byte sprite at (VF, V0), VF = collision W:[15] R:[0, 15]
    $6CE    $98E4   UNKNOWN  $98E4           Unknown 9xxx instruction (crashes in CUDA)    
    $6D0    $9F2D   UNKNOWN  $9F2D           Unknown 9xxx instruction (crashes in CUDA)    
    $6D2    $CE31   RND      VE, #31         VE = random() AND $31                         W:[14]
    $6D4    $A40D   LD       I, $40D         Load $40D into I register                     
>>> $6D6    $76B8   ADD      V6, #B8         Add $B8 to V6 (V6 = (V6 + $B8) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $6D8    $2B6E   CALL     $B6E            Call subroutine at $B6E                       
    $6DA    $12DE   JP       $2DE            Jump to address $2DE                          
    $6DC    $5019   UNKNOWN  $5019           Unknown 5xxx instruction (crashes in CUDA)    
    $6DE    $F51B   UNKNOWN  $F51B           Unknown Fxxx instruction (crashes in CUDA)    
    $6E0    $88B1   OR       V8, VB          V8 = V8 OR VB, VF = 0                         W:[8, 15] R:[8, 11]
>>> $6E2    $441D   SNE      V4, #1D         Skip next instruction if V4 != $1D            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $6E4    $09F1   NOP      $09F1           No operation (ignored by CUDA kernel)         
    $6E6    $12C2   JP       $2C2            Jump to address $2C2                          
    $6E8    $08A3   NOP      $08A3           No operation (ignored by CUDA kernel)         
    $6EA    $5E0A   UNKNOWN  $5E0A           Unknown 5xxx instruction (crashes in CUDA)    
    $6EC    $1930   JP       $930            Jump to address $930                          
>>> $6EE    $7749   ADD      V7, #49         Add $49 to V7 (V7 = (V7 + $49) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $6F0    $BDC8   JP       V0, $DC8        Jump to $DC8 + V0                             R:[0]
    $6F2    $C865   RND      V8, #65         V8 = random() AND $65                         W:[8]
>>> $6F4    $721E   ADD      V2, #1E         Add $1E to V2 (V2 = (V2 + $1E) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $6F6    $6304   LD       V3, #04         Load $04 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $6F8    $A13C   LD       I, $13C         Load $13C into I register                     
    $6FA    $87F8   UNKNOWN  $87F8           Unknown 8xxx instruction (crashes in CUDA)    
    $6FC    $A4BD   LD       I, $4BD         Load $4BD into I register                     
    $6FE    $21AA   CALL     $1AA            Call subroutine at $1AA                       
>>> $700    $C49F   RND      V4, #9F         V4 = random() AND $9F                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $702    $882E   SHL      V8              V8 = (V8 << 1) & 0xFF, VF = MSB               W:[8, 15] R:[8]
    $704    $1941   JP       $941            Jump to address $941                          
    $706    $8AEC   UNKNOWN  $8AEC           Unknown 8xxx instruction (crashes in CUDA)    
    $708    $3E12   SE       VE, #12         Skip next instruction if VE == $12            R:[14]
    $70A    $1F49   JP       $F49            Jump to address $F49                          
    $70C    $1DA4   JP       $DA4            Jump to address $DA4                          
    $70E    $A72A   LD       I, $72A         Load $72A into I register                     
    $710    $152C   JP       $52C            Jump to address $52C                          
    $712    $2ED9   CALL     $ED9            Call subroutine at $ED9                       
    $714    $16AD   JP       $6AD            Jump to address $6AD                          
    $716    $D392   DRW      V3, V9, #2      Draw 2-byte sprite at (V3, V9), VF = collision W:[15] R:[3, 9]
    $718    $1CAB   JP       $CAB            Jump to address $CAB                          
>>> $71A    $328E   SE       V2, #8E         Skip next instruction if V2 == $8E            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $71C    $14AC   JP       $4AC            Jump to address $4AC                          
    $71E    $B974   JP       V0, $974        Jump to $974 + V0                             R:[0]
    $720    $08F1   NOP      $08F1           No operation (ignored by CUDA kernel)         
    $722    $9E24   UNKNOWN  $9E24           Unknown 9xxx instruction (crashes in CUDA)    
    $724    $156B   JP       $56B            Jump to address $56B                          
    $726    $D2BA   DRW      V2, VB, #A      Draw 10-byte sprite at (V2, VB), VF = collision W:[15] R:[2, 11]
>>> $728    $C12C   RND      V1, #2C         V1 = random() AND $2C                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
>>> $72A    $73F5   ADD      V3, #F5         Add $F5 to V3 (V3 = (V3 + $F5) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $72C    $DBBA   DRW      VB, VB, #A      Draw 10-byte sprite at (VB, VB), VF = collision W:[15] R:[11]
    $72E    $5538   UNKNOWN  $5538           Unknown 5xxx instruction (crashes in CUDA)    
    $730    $7C68   ADD      VC, #68         Add $68 to VC (VC = (VC + $68) & 0xFF)        W:[12] R:[12]
    $732    $6D6F   LD       VD, #6F         Load $6F into VD                              W:[13]
>>> $734    $778E   ADD      V7, #8E         Add $8E to V7 (V7 = (V7 + $8E) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $736    $D5D7   DRW      V5, VD, #7      Draw 7-byte sprite at (V5, VD), VF = collision W:[15] R:[5, 13]
    $738    $1D4B   JP       $D4B            Jump to address $D4B                          
    $73A    $D618   DRW      V6, V1, #8      Draw 8-byte sprite at (V6, V1), VF = collision W:[15] R:[1, 6]
    $73C    $E005   UNKNOWN  $E005           Unknown Exxx instruction (crashes in CUDA)    
    $73E    $D62A   DRW      V6, V2, #A      Draw 10-byte sprite at (V6, V2), VF = collision W:[15] R:[2, 6]
    $740    $4F78   SNE      VF, #78         Skip next instruction if VF != $78            R:[15]
    $742    $2FBD   CALL     $FBD            Call subroutine at $FBD                       
    $744    $276D   CALL     $76D            Call subroutine at $76D                       
    $746    $22C7   CALL     $2C7            Call subroutine at $2C7                       
    $748    $5013   UNKNOWN  $5013           Unknown 5xxx instruction (crashes in CUDA)    
    $74A    $3E86   SE       VE, #86         Skip next instruction if VE == $86            R:[14]
    $74C    $99AA   UNKNOWN  $99AA           Unknown 9xxx instruction (crashes in CUDA)    
    $74E    $EDA2   UNKNOWN  $EDA2           Unknown Exxx instruction (crashes in CUDA)    
    $750    $9C31   UNKNOWN  $9C31           Unknown 9xxx instruction (crashes in CUDA)    
    $752    $CF51   RND      VF, #51         VF = random() AND $51                         W:[15]
    $754    $4C4E   SNE      VC, #4E         Skip next instruction if VC != $4E            R:[12]
    $756    $8B8D   UNKNOWN  $8B8D           Unknown 8xxx instruction (crashes in CUDA)    
    $758    $A961   LD       I, $961         Load $961 into I register                     
    $75A    $7B74   ADD      VB, #74         Add $74 to VB (VB = (VB + $74) & 0xFF)        W:[11] R:[11]
    $75C    $05FF   NOP      $05FF           No operation (ignored by CUDA kernel)         
>>> $75E    $45C9   SNE      V5, #C9         Skip next instruction if V5 != $C9            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
>>> $760    $C794   RND      V7, #94         V7 = random() AND $94                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
>>> $762    $7100   ADD      V1, #00         Add $00 to V1 (V1 = (V1 + $00) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $764    $A006   LD       I, $006         Load $006 into I register                     
    $766    $7D6A   ADD      VD, #6A         Add $6A to VD (VD = (VD + $6A) & 0xFF)        W:[13] R:[13]
    $768    $798D   ADD      V9, #8D         Add $8D to V9 (V9 = (V9 + $8D) & 0xFF)        W:[9] R:[9]
>>> $76A    $C78F   RND      V7, #8F         V7 = random() AND $8F                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $76C    $D578   DRW      V5, V7, #8      Draw 8-byte sprite at (V5, V7), VF = collision W:[15] R:[5, 7]
    $76E    $BEA5   JP       V0, $EA5        Jump to $EA5 + V0                             R:[0]
    $770    $D65A   DRW      V6, V5, #A      Draw 10-byte sprite at (V6, V5), VF = collision W:[15] R:[5, 6]
>>> $772    $3057   SE       V0, #57         Skip next instruction if V0 == $57            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $774    $17BF   JP       $7BF            Jump to address $7BF                          
    $776    $6D2A   LD       VD, #2A         Load $2A into VD                              W:[13]
    $778    $9F56   UNKNOWN  $9F56           Unknown 9xxx instruction (crashes in CUDA)    
    $77A    $52D7   UNKNOWN  $52D7           Unknown 5xxx instruction (crashes in CUDA)    
    $77C    $FD20   UNKNOWN  $FD20           Unknown Fxxx instruction (crashes in CUDA)    
    $77E    $276A   CALL     $76A            Call subroutine at $76A                       
    $780    $0A04   NOP      $0A04           No operation (ignored by CUDA kernel)         
    $782    $1B21   JP       $B21            Jump to address $B21                          
>>> $784    $711B   ADD      V1, #1B         Add $1B to V1 (V1 = (V1 + $1B) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $786    $FF24   UNKNOWN  $FF24           Unknown Fxxx instruction (crashes in CUDA)    
    $788    $6D07   LD       VD, #07         Load $07 into VD                              W:[13]
    $78A    $BD71   JP       V0, $D71        Jump to $D71 + V0                             R:[0]
    $78C    $00D8   NOP      $00D8           No operation (ignored by CUDA kernel)         
>>> $78E    $434E   SNE      V3, #4E         Skip next instruction if V3 != $4E            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $790    $91B2   UNKNOWN  $91B2           Unknown 9xxx instruction (crashes in CUDA)    
    $792    $7925   ADD      V9, #25         Add $25 to V9 (V9 = (V9 + $25) & 0xFF)        W:[9] R:[9]
>>> $794    $8747   SUBN     V7, V4          V7 = (V4 - V7) & 0xFF, VF = NOT borrow        W:[7, 15] R:[4, 7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $796    $5C27   UNKNOWN  $5C27           Unknown 5xxx instruction (crashes in CUDA)    
    $798    $D1BA   DRW      V1, VB, #A      Draw 10-byte sprite at (V1, VB), VF = collision W:[15] R:[1, 11]
>>> $79A    $370E   SE       V7, #0E         Skip next instruction if V7 == $0E            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $79C    $91B9   UNKNOWN  $91B9           Unknown 9xxx instruction (crashes in CUDA)    
    $79E    $BAB1   JP       V0, $AB1        Jump to $AB1 + V0                             R:[0]
    $7A0    $D830   DRW      V8, V3, #0      Draw 0-byte sprite at (V8, V3), VF = collision W:[15] R:[3, 8]
    $7A2    $D066   DRW      V0, V6, #6      Draw 6-byte sprite at (V0, V6), VF = collision W:[15] R:[0, 6]
    $7A4    $8358   UNKNOWN  $8358           Unknown 8xxx instruction (crashes in CUDA)    
    $7A6    $9A45   UNKNOWN  $9A45           Unknown 9xxx instruction (crashes in CUDA)    
    $7A8    $4ED3   SNE      VE, #D3         Skip next instruction if VE != $D3            R:[14]
    $7AA    $1F0F   JP       $F0F            Jump to address $F0F                          
    $7AC    $AAD1   LD       I, $AD1         Load $AD1 into I register                     
    $7AE    $6E78   LD       VE, #78         Load $78 into VE                              W:[14]
    $7B0    $F2F5   UNKNOWN  $F2F5           Unknown Fxxx instruction (crashes in CUDA)    
    $7B2    $6CC3   LD       VC, #C3         Load $C3 into VC                              W:[12]
    $7B4    $F4C1   UNKNOWN  $F4C1           Unknown Fxxx instruction (crashes in CUDA)    
    $7B6    $A1FF   LD       I, $1FF         Load $1FF into I register                     
    $7B8    $D139   DRW      V1, V3, #9      Draw 9-byte sprite at (V1, V3), VF = collision W:[15] R:[1, 3]
    $7BA    $BF50   JP       V0, $F50        Jump to $F50 + V0                             R:[0]
>>> $7BC    $7123   ADD      V1, #23         Add $23 to V1 (V1 = (V1 + $23) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
>>> $7BE    $3322   SE       V3, #22         Skip next instruction if V3 == $22            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $7C0    $24EF   CALL     $4EF            Call subroutine at $4EF                       
    $7C2    $89AD   UNKNOWN  $89AD           Unknown 8xxx instruction (crashes in CUDA)    
    $7C4    $95D6   UNKNOWN  $95D6           Unknown 9xxx instruction (crashes in CUDA)    
    $7C6    $ACF3   LD       I, $CF3         Load $CF3 into I register                     
    $7C8    $DEC3   DRW      VE, VC, #3      Draw 3-byte sprite at (VE, VC), VF = collision W:[15] R:[12, 14]
    $7CA    $9F8B   UNKNOWN  $9F8B           Unknown 9xxx instruction (crashes in CUDA)    
    $7CC    $0F72   NOP      $0F72           No operation (ignored by CUDA kernel)         
>>> $7CE    $C47C   RND      V4, #7C         V4 = random() AND $7C                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $7D0    $B479   JP       V0, $479        Jump to $479 + V0                             R:[0]
    $7D2    $D2D4   DRW      V2, VD, #4      Draw 4-byte sprite at (V2, VD), VF = collision W:[15] R:[2, 13]
>>> $7D4    $5240   SE       V2, V4          Skip next instruction if V2 == V4             R:[2, 4]
          ^-- SORTING RELATED: Compares sorted registers V[2, 4]
    $7D6    $EAB1   UNKNOWN  $EAB1           Unknown Exxx instruction (crashes in CUDA)    
    $7D8    $2047   CALL     $047            Call subroutine at $047                       
    $7DA    $2DE7   CALL     $DE7            Call subroutine at $DE7                       
    $7DC    $2032   CALL     $032            Call subroutine at $032                       
    $7DE    $4DA7   SNE      VD, #A7         Skip next instruction if VD != $A7            R:[13]
    $7E0    $0D39   NOP      $0D39           No operation (ignored by CUDA kernel)         
    $7E2    $A1C4   LD       I, $1C4         Load $1C4 into I register                     
    $7E4    $FF0F   UNKNOWN  $FF0F           Unknown Fxxx instruction (crashes in CUDA)    
    $7E6    $F348   UNKNOWN  $F348           Unknown Fxxx instruction (crashes in CUDA)    
    $7E8    $BEFB   JP       V0, $EFB        Jump to $EFB + V0                             R:[0]
    $7EA    $D8CA   DRW      V8, VC, #A      Draw 10-byte sprite at (V8, VC), VF = collision W:[15] R:[8, 12]
    $7EC    $59F3   UNKNOWN  $59F3           Unknown 5xxx instruction (crashes in CUDA)    
    $7EE    $1860   JP       $860            Jump to address $860                          
    $7F0    $856A   UNKNOWN  $856A           Unknown 8xxx instruction (crashes in CUDA)    
    $7F2    $0098   NOP      $0098           No operation (ignored by CUDA kernel)         
    $7F4    $D62E   DRW      V6, V2, #E      Draw 14-byte sprite at (V6, V2), VF = collision W:[15] R:[2, 6]
>>> $7F6    $3561   SE       V5, #61         Skip next instruction if V5 == $61            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $7F8    $1994   JP       $994            Jump to address $994                          
>>> $7FA    $6367   LD       V3, #67         Load $67 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $7FC    $9BD6   UNKNOWN  $9BD6           Unknown 9xxx instruction (crashes in CUDA)    
    $7FE    $A7F7   LD       I, $7F7         Load $7F7 into I register                     
    $800    $A3EE   LD       I, $3EE         Load $3EE into I register                     
    $802    $2D31   CALL     $D31            Call subroutine at $D31                       
>>> $804    $30D7   SE       V0, #D7         Skip next instruction if V0 == $D7            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $806    $6CC5   LD       VC, #C5         Load $C5 into VC                              W:[12]
    $808    $6AAF   LD       VA, #AF         Load $AF into VA                              W:[10]
>>> $80A    $343A   SE       V4, #3A         Skip next instruction if V4 == $3A            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $80C    $1144   JP       $144            Jump to address $144                          
    $80E    $515A   UNKNOWN  $515A           Unknown 5xxx instruction (crashes in CUDA)    
    $810    $0403   NOP      $0403           No operation (ignored by CUDA kernel)         
    $812    $8CB6   SHR      VC              VC = VC >> 1, VF = LSB                        W:[12, 15] R:[12]
>>> $814    $7082   ADD      V0, #82         Add $82 to V0 (V0 = (V0 + $82) & 0xFF)        W:[0] R:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $816    $DEE4   DRW      VE, VE, #4      Draw 4-byte sprite at (VE, VE), VF = collision W:[15] R:[14]
    $818    $4829   SNE      V8, #29         Skip next instruction if V8 != $29            R:[8]
    $81A    $C953   RND      V9, #53         V9 = random() AND $53                         W:[9]
>>> $81C    $FC65   LD       VC, [I]         Load V0-VC from [I], then I += 13             W:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
          ^-- SORTING RELATED: Modifies sorted registers V[0, 1, 2, 3, 4, 5, 6, 7]
    $81E    $E088   UNKNOWN  $E088           Unknown Exxx instruction (crashes in CUDA)    
>>> $820    $83D3   XOR      V3, VD          V3 = V3 XOR VD, VF = 0                        W:[3, 15] R:[3, 13]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $822    $7FD8   ADD      VF, #D8         Add $D8 to VF (VF = (VF + $D8) & 0xFF)        W:[15] R:[15]
>>> $824    $5A30   SE       VA, V3          Skip next instruction if VA == V3             R:[3, 10]
          ^-- SORTING RELATED: Compares sorted registers V[3]
>>> $826    $C59D   RND      V5, #9D         V5 = random() AND $9D                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $828    $273B   CALL     $73B            Call subroutine at $73B                       
    $82A    $AE12   LD       I, $E12         Load $E12 into I register                     
    $82C    $5CEB   UNKNOWN  $5CEB           Unknown 5xxx instruction (crashes in CUDA)    
    $82E    $7E3B   ADD      VE, #3B         Add $3B to VE (VE = (VE + $3B) & 0xFF)        W:[14] R:[14]
    $830    $0A4B   NOP      $0A4B           No operation (ignored by CUDA kernel)         
    $832    $AC32   LD       I, $C32         Load $C32 into I register                     
    $834    $A724   LD       I, $724         Load $724 into I register                     
    $836    $5BC6   UNKNOWN  $5BC6           Unknown 5xxx instruction (crashes in CUDA)    
    $838    $D7CE   DRW      V7, VC, #E      Draw 14-byte sprite at (V7, VC), VF = collision W:[15] R:[7, 12]
    $83A    $5F25   UNKNOWN  $5F25           Unknown 5xxx instruction (crashes in CUDA)    
>>> $83C    $665C   LD       V6, #5C         Load $5C into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
>>> $83E    $640C   LD       V4, #0C         Load $0C into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $840    $B263   JP       V0, $263        Jump to $263 + V0                             R:[0]
    $842    $5218   UNKNOWN  $5218           Unknown 5xxx instruction (crashes in CUDA)    
    $844    $164F   JP       $64F            Jump to address $64F                          
    $846    $B96E   JP       V0, $96E        Jump to $96E + V0                             R:[0]
    $848    $5AA4   UNKNOWN  $5AA4           Unknown 5xxx instruction (crashes in CUDA)    
    $84A    $7B56   ADD      VB, #56         Add $56 to VB (VB = (VB + $56) & 0xFF)        W:[11] R:[11]
>>> $84C    $C0BE   RND      V0, #BE         V0 = random() AND $BE                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $84E    $9D52   UNKNOWN  $9D52           Unknown 9xxx instruction (crashes in CUDA)    
    $850    $6984   LD       V9, #84         Load $84 into V9                              W:[9]
>>> $852    $33EF   SE       V3, #EF         Skip next instruction if V3 == $EF            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $854    $F970   UNKNOWN  $F970           Unknown Fxxx instruction (crashes in CUDA)    
    $856    $4BFB   SNE      VB, #FB         Skip next instruction if VB != $FB            R:[11]
    $858    $5B87   UNKNOWN  $5B87           Unknown 5xxx instruction (crashes in CUDA)    
>>> $85A    $C192   RND      V1, #92         V1 = random() AND $92                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $85C    $7841   ADD      V8, #41         Add $41 to V8 (V8 = (V8 + $41) & 0xFF)        W:[8] R:[8]
    $85E    $1B82   JP       $B82            Jump to address $B82                          
    $860    $53AF   UNKNOWN  $53AF           Unknown 5xxx instruction (crashes in CUDA)    
    $862    $C904   RND      V9, #04         V9 = random() AND $04                         W:[9]
    $864    $A31F   LD       I, $31F         Load $31F into I register                     
    $866    $812F   UNKNOWN  $812F           Unknown 8xxx instruction (crashes in CUDA)    
    $868    $68F1   LD       V8, #F1         Load $F1 into V8                              W:[8]
    $86A    $2899   CALL     $899            Call subroutine at $899                       
    $86C    $1294   JP       $294            Jump to address $294                          
>>> $86E    $377B   SE       V7, #7B         Skip next instruction if V7 == $7B            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $870    $6986   LD       V9, #86         Load $86 into V9                              W:[9]
    $872    $E5E5   UNKNOWN  $E5E5           Unknown Exxx instruction (crashes in CUDA)    
    $874    $867A   UNKNOWN  $867A           Unknown 8xxx instruction (crashes in CUDA)    
    $876    $D464   DRW      V4, V6, #4      Draw 4-byte sprite at (V4, V6), VF = collision W:[15] R:[4, 6]
    $878    $4B64   SNE      VB, #64         Skip next instruction if VB != $64            R:[11]
    $87A    $1699   JP       $699            Jump to address $699                          
    $87C    $DF59   DRW      VF, V5, #9      Draw 9-byte sprite at (VF, V5), VF = collision W:[15] R:[5, 15]
>>> $87E    $66ED   LD       V6, #ED         Load $ED into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $880    $A0E8   LD       I, $0E8         Load $0E8 into I register                     
    $882    $CCF7   RND      VC, #F7         VC = random() AND $F7                         W:[12]
    $884    $6CA9   LD       VC, #A9         Load $A9 into VC                              W:[12]
    $886    $AE4D   LD       I, $E4D         Load $E4D into I register                     
>>> $888    $732F   ADD      V3, #2F         Add $2F to V3 (V3 = (V3 + $2F) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $88A    $2D67   CALL     $D67            Call subroutine at $D67                       
    $88C    $1DFE   JP       $DFE            Jump to address $DFE                          
>>> $88E    $9410   SNE      V4, V1          Skip next instruction if V4 != V1             R:[1, 4]
          ^-- SORTING RELATED: Compares sorted registers V[1, 4]
    $890    $AA8E   LD       I, $A8E         Load $A8E into I register                     
>>> $892    $6727   LD       V7, #27         Load $27 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $894    $FC32   UNKNOWN  $FC32           Unknown Fxxx instruction (crashes in CUDA)    
    $896    $CCF6   RND      VC, #F6         VC = random() AND $F6                         W:[12]
    $898    $AB21   LD       I, $B21         Load $B21 into I register                     
    $89A    $F782   UNKNOWN  $F782           Unknown Fxxx instruction (crashes in CUDA)    
    $89C    $09FB   NOP      $09FB           No operation (ignored by CUDA kernel)         
    $89E    $26C9   CALL     $6C9            Call subroutine at $6C9                       
    $8A0    $3D47   SE       VD, #47         Skip next instruction if VD == $47            R:[13]
    $8A2    $B1A7   JP       V0, $1A7        Jump to $1A7 + V0                             R:[0]
    $8A4    $C991   RND      V9, #91         V9 = random() AND $91                         W:[9]
    $8A6    $AADD   LD       I, $ADD         Load $ADD into I register                     
    $8A8    $B69F   JP       V0, $69F        Jump to $69F + V0                             R:[0]
    $8AA    $7E0C   ADD      VE, #0C         Add $0C to VE (VE = (VE + $0C) & 0xFF)        W:[14] R:[14]
    $8AC    $8749   UNKNOWN  $8749           Unknown 8xxx instruction (crashes in CUDA)    
    $8AE    $0CEA   NOP      $0CEA           No operation (ignored by CUDA kernel)         
    $8B0    $8F9B   UNKNOWN  $8F9B           Unknown 8xxx instruction (crashes in CUDA)    
    $8B2    $2F70   CALL     $F70            Call subroutine at $F70                       
    $8B4    $2A15   CALL     $A15            Call subroutine at $A15                       
    $8B6    $91A3   UNKNOWN  $91A3           Unknown 9xxx instruction (crashes in CUDA)    
    $8B8    $F2B2   UNKNOWN  $F2B2           Unknown Fxxx instruction (crashes in CUDA)    
    $8BA    $166A   JP       $66A            Jump to address $66A                          
    $8BC    $9EE3   UNKNOWN  $9EE3           Unknown 9xxx instruction (crashes in CUDA)    
    $8BE    $242A   CALL     $42A            Call subroutine at $42A                       
    $8C0    $DE08   DRW      VE, V0, #8      Draw 8-byte sprite at (VE, V0), VF = collision W:[15] R:[0, 14]
    $8C2    $E81C   UNKNOWN  $E81C           Unknown Exxx instruction (crashes in CUDA)    
>>> $8C4    $61FB   LD       V1, #FB         Load $FB into V1                              W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $8C6    $4B1D   SNE      VB, #1D         Skip next instruction if VB != $1D            R:[11]
    $8C8    $A291   LD       I, $291         Load $291 into I register                     
    $8CA    $AEBD   LD       I, $EBD         Load $EBD into I register                     
>>> $8CC    $6635   LD       V6, #35         Load $35 into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $8CE    $89CF   UNKNOWN  $89CF           Unknown 8xxx instruction (crashes in CUDA)    
    $8D0    $1F25   JP       $F25            Jump to address $F25                          
    $8D2    $B7B2   JP       V0, $7B2        Jump to $7B2 + V0                             R:[0]
    $8D4    $DC79   DRW      VC, V7, #9      Draw 9-byte sprite at (VC, V7), VF = collision W:[15] R:[7, 12]
    $8D6    $188F   JP       $88F            Jump to address $88F                          
    $8D8    $E93F   UNKNOWN  $E93F           Unknown Exxx instruction (crashes in CUDA)    
    $8DA    $228B   CALL     $28B            Call subroutine at $28B                       
    $8DC    $F352   UNKNOWN  $F352           Unknown Fxxx instruction (crashes in CUDA)    
    $8DE    $F7A5   UNKNOWN  $F7A5           Unknown Fxxx instruction (crashes in CUDA)    
    $8E0    $0C9B   NOP      $0C9B           No operation (ignored by CUDA kernel)         
    $8E2    $09BA   NOP      $09BA           No operation (ignored by CUDA kernel)         
    $8E4    $8AD5   SUB      VA, VD          VA = (VA - VD) & 0xFF, VF = NOT borrow        W:[10, 15] R:[10, 13]
    $8E6    $9749   UNKNOWN  $9749           Unknown 9xxx instruction (crashes in CUDA)    
    $8E8    $1810   JP       $810            Jump to address $810                          
    $8EA    $3E28   SE       VE, #28         Skip next instruction if VE == $28            R:[14]
    $8EC    $1836   JP       $836            Jump to address $836                          
    $8EE    $BA83   JP       V0, $A83        Jump to $A83 + V0                             R:[0]
    $8F0    $0992   NOP      $0992           No operation (ignored by CUDA kernel)         
    $8F2    $2FFE   CALL     $FFE            Call subroutine at $FFE                       
    $8F4    $2A3B   CALL     $A3B            Call subroutine at $A3B                       
>>> $8F6    $3035   SE       V0, #35         Skip next instruction if V0 == $35            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $8F8    $19A0   JP       $9A0            Jump to address $9A0                          
    $8FA    $129E   JP       $29E            Jump to address $29E                          
    $8FC    $1D2C   JP       $D2C            Jump to address $D2C                          
    $8FE    $889A   UNKNOWN  $889A           Unknown 8xxx instruction (crashes in CUDA)    
    $900    $B3F7   JP       V0, $3F7        Jump to $3F7 + V0                             R:[0]
    $902    $28AC   CALL     $8AC            Call subroutine at $8AC                       
    $904    $4960   SNE      V9, #60         Skip next instruction if V9 != $60            R:[9]
    $906    $964F   UNKNOWN  $964F           Unknown 9xxx instruction (crashes in CUDA)    
    $908    $2CDC   CALL     $CDC            Call subroutine at $CDC                       
    $90A    $29FC   CALL     $9FC            Call subroutine at $9FC                       
>>> $90C    $70FB   ADD      V0, #FB         Add $FB to V0 (V0 = (V0 + $FB) & 0xFF)        W:[0] R:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $90E    $E15D   UNKNOWN  $E15D           Unknown Exxx instruction (crashes in CUDA)    
    $910    $F916   UNKNOWN  $F916           Unknown Fxxx instruction (crashes in CUDA)    
>>> $912    $8F65   SUB      VF, V6          VF = (VF - V6) & 0xFF, VF = NOT borrow        W:[15] R:[6, 15]
          ^-- SORTING RELATED: Arithmetic on sorted registers V[6]
    $914    $237C   CALL     $37C            Call subroutine at $37C                       
    $916    $1D54   JP       $D54            Jump to address $D54                          
    $918    $3D0B   SE       VD, #0B         Skip next instruction if VD == $0B            R:[13]
    $91A    $B347   JP       V0, $347        Jump to $347 + V0                             R:[0]
    $91C    $CC04   RND      VC, #04         VC = random() AND $04                         W:[12]
    $91E    $03A7   NOP      $03A7           No operation (ignored by CUDA kernel)         
>>> $920    $8B11   OR       VB, V1          VB = VB OR V1, VF = 0                         W:[11, 15] R:[1, 11]
          ^-- SORTING RELATED: Logical operation on V[1] (sets VF=0 in CUDA)
    $922    $529A   UNKNOWN  $529A           Unknown 5xxx instruction (crashes in CUDA)    
    $924    $AB5D   LD       I, $B5D         Load $B5D into I register                     
>>> $926    $439C   SNE      V3, #9C         Skip next instruction if V3 != $9C            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $928    $CDD7   RND      VD, #D7         VD = random() AND $D7                         W:[13]
    $92A    $D142   DRW      V1, V4, #2      Draw 2-byte sprite at (V1, V4), VF = collision W:[15] R:[1, 4]
    $92C    $569F   UNKNOWN  $569F           Unknown 5xxx instruction (crashes in CUDA)    
>>> $92E    $625C   LD       V2, #5C         Load $5C into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $930    $BC2F   JP       V0, $C2F        Jump to $C2F + V0                             R:[0]
    $932    $547D   UNKNOWN  $547D           Unknown 5xxx instruction (crashes in CUDA)    
    $934    $C949   RND      V9, #49         V9 = random() AND $49                         W:[9]
    $936    $5C93   UNKNOWN  $5C93           Unknown 5xxx instruction (crashes in CUDA)    
    $938    $4936   SNE      V9, #36         Skip next instruction if V9 != $36            R:[9]
    $93A    $2658   CALL     $658            Call subroutine at $658                       
    $93C    $E87B   UNKNOWN  $E87B           Unknown Exxx instruction (crashes in CUDA)    
    $93E    $D846   DRW      V8, V4, #6      Draw 6-byte sprite at (V8, V4), VF = collision W:[15] R:[4, 8]
    $940    $FBB4   UNKNOWN  $FBB4           Unknown Fxxx instruction (crashes in CUDA)    
    $942    $F163   UNKNOWN  $F163           Unknown Fxxx instruction (crashes in CUDA)    
    $944    $8A6A   UNKNOWN  $8A6A           Unknown 8xxx instruction (crashes in CUDA)    
    $946    $4EA1   SNE      VE, #A1         Skip next instruction if VE != $A1            R:[14]
    $948    $8D08   UNKNOWN  $8D08           Unknown 8xxx instruction (crashes in CUDA)    
    $94A    $F17A   UNKNOWN  $F17A           Unknown Fxxx instruction (crashes in CUDA)    
    $94C    $D3CE   DRW      V3, VC, #E      Draw 14-byte sprite at (V3, VC), VF = collision W:[15] R:[3, 12]
    $94E    $819C   UNKNOWN  $819C           Unknown 8xxx instruction (crashes in CUDA)    
    $950    $5F68   UNKNOWN  $5F68           Unknown 5xxx instruction (crashes in CUDA)    
>>> $952    $409C   SNE      V0, #9C         Skip next instruction if V0 != $9C            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
>>> $954    $5E60   SE       VE, V6          Skip next instruction if VE == V6             R:[6, 14]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $956    $EC05   UNKNOWN  $EC05           Unknown Exxx instruction (crashes in CUDA)    
    $958    $2C36   CALL     $C36            Call subroutine at $C36                       
    $95A    $25AA   CALL     $5AA            Call subroutine at $5AA                       
    $95C    $AFCB   LD       I, $FCB         Load $FCB into I register                     
    $95E    $F0B8   UNKNOWN  $F0B8           Unknown Fxxx instruction (crashes in CUDA)    
    $960    $577D   UNKNOWN  $577D           Unknown 5xxx instruction (crashes in CUDA)    
>>> $962    $313D   SE       V1, #3D         Skip next instruction if V1 == $3D            R:[1]
          ^-- SORTING RELATED: Compares sorted registers V[1]
    $964    $38BD   SE       V8, #BD         Skip next instruction if V8 == $BD            R:[8]
    $966    $A912   LD       I, $912         Load $912 into I register                     
    $968    $0DC2   NOP      $0DC2           No operation (ignored by CUDA kernel)         
    $96A    $D1D9   DRW      V1, VD, #9      Draw 9-byte sprite at (V1, VD), VF = collision W:[15] R:[1, 13]
    $96C    $03CC   NOP      $03CC           No operation (ignored by CUDA kernel)         
    $96E    $385B   SE       V8, #5B         Skip next instruction if V8 == $5B            R:[8]
    $970    $FD24   UNKNOWN  $FD24           Unknown Fxxx instruction (crashes in CUDA)    
    $972    $A4F0   LD       I, $4F0         Load $4F0 into I register                     
    $974    $4A5F   SNE      VA, #5F         Skip next instruction if VA != $5F            R:[10]
    $976    $A309   LD       I, $309         Load $309 into I register                     
    $978    $20A5   CALL     $0A5            Call subroutine at $0A5                       
    $97A    $2873   CALL     $873            Call subroutine at $873                       
    $97C    $572C   UNKNOWN  $572C           Unknown 5xxx instruction (crashes in CUDA)    
    $97E    $D881   DRW      V8, V8, #1      Draw 1-byte sprite at (V8, V8), VF = collision W:[15] R:[8]
    $980    $3905   SE       V9, #05         Skip next instruction if V9 == $05            R:[9]
    $982    $143F   JP       $43F            Jump to address $43F                          
    $984    $4B6C   SNE      VB, #6C         Skip next instruction if VB != $6C            R:[11]
    $986    $0FAD   NOP      $0FAD           No operation (ignored by CUDA kernel)         
    $988    $7FD3   ADD      VF, #D3         Add $D3 to VF (VF = (VF + $D3) & 0xFF)        W:[15] R:[15]
    $98A    $6E0B   LD       VE, #0B         Load $0B into VE                              W:[14]
>>> $98C    $762D   ADD      V6, #2D         Add $2D to V6 (V6 = (V6 + $2D) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $98E    $05A8   NOP      $05A8           No operation (ignored by CUDA kernel)         
    $990    $878D   UNKNOWN  $878D           Unknown 8xxx instruction (crashes in CUDA)    
    $992    $881F   UNKNOWN  $881F           Unknown 8xxx instruction (crashes in CUDA)    
    $994    $51D6   UNKNOWN  $51D6           Unknown 5xxx instruction (crashes in CUDA)    
    $996    $EDBA   UNKNOWN  $EDBA           Unknown Exxx instruction (crashes in CUDA)    
>>> $998    $47FD   SNE      V7, #FD         Skip next instruction if V7 != $FD            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $99A    $5228   UNKNOWN  $5228           Unknown 5xxx instruction (crashes in CUDA)    
    $99C    $B01F   JP       V0, $01F        Jump to $01F + V0                             R:[0]
    $99E    $48D4   SNE      V8, #D4         Skip next instruction if V8 != $D4            R:[8]
    $9A0    $0E2D   NOP      $0E2D           No operation (ignored by CUDA kernel)         
    $9A2    $FAC8   UNKNOWN  $FAC8           Unknown Fxxx instruction (crashes in CUDA)    
    $9A4    $F18B   UNKNOWN  $F18B           Unknown Fxxx instruction (crashes in CUDA)    
>>> $9A6    $77A6   ADD      V7, #A6         Add $A6 to V7 (V7 = (V7 + $A6) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $9A8    $56B5   UNKNOWN  $56B5           Unknown 5xxx instruction (crashes in CUDA)    
    $9AA    $4DD5   SNE      VD, #D5         Skip next instruction if VD != $D5            R:[13]
    $9AC    $007A   NOP      $007A           No operation (ignored by CUDA kernel)         
    $9AE    $7CAB   ADD      VC, #AB         Add $AB to VC (VC = (VC + $AB) & 0xFF)        W:[12] R:[12]
>>> $9B0    $8231   OR       V2, V3          V2 = V2 OR V3, VF = 0                         W:[2, 15] R:[2, 3]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $9B2    $DFB3   DRW      VF, VB, #3      Draw 3-byte sprite at (VF, VB), VF = collision W:[15] R:[11, 15]
    $9B4    $DF1D   DRW      VF, V1, #D      Draw 13-byte sprite at (VF, V1), VF = collision W:[15] R:[1, 15]
>>> $9B6    $C2A2   RND      V2, #A2         V2 = random() AND $A2                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $9B8    $CCE8   RND      VC, #E8         VC = random() AND $E8                         W:[12]
    $9BA    $DAC5   DRW      VA, VC, #5      Draw 5-byte sprite at (VA, VC), VF = collision W:[15] R:[10, 12]
    $9BC    $4A50   SNE      VA, #50         Skip next instruction if VA != $50            R:[10]
    $9BE    $BAD8   JP       V0, $AD8        Jump to $AD8 + V0                             R:[0]
    $9C0    $16DF   JP       $6DF            Jump to address $6DF                          
    $9C2    $EA6D   UNKNOWN  $EA6D           Unknown Exxx instruction (crashes in CUDA)    
    $9C4    $4C2C   SNE      VC, #2C         Skip next instruction if VC != $2C            R:[12]
    $9C6    $DE05   DRW      VE, V0, #5      Draw 5-byte sprite at (VE, V0), VF = collision W:[15] R:[0, 14]
>>> $9C8    $8287   SUBN     V2, V8          V2 = (V8 - V2) & 0xFF, VF = NOT borrow        W:[2, 15] R:[2, 8]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $9CA    $65CA   LD       V5, #CA         Load $CA into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
>>> $9CC    $47D2   SNE      V7, #D2         Skip next instruction if V7 != $D2            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $9CE    $CCF9   RND      VC, #F9         VC = random() AND $F9                         W:[12]
    $9D0    $5DE8   UNKNOWN  $5DE8           Unknown 5xxx instruction (crashes in CUDA)    
>>> $9D2    $77E7   ADD      V7, #E7         Add $E7 to V7 (V7 = (V7 + $E7) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
>>> $9D4    $872E   SHL      V7              V7 = (V7 << 1) & 0xFF, VF = MSB               W:[7, 15] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
>>> $9D6    $65E8   LD       V5, #E8         Load $E8 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $9D8    $2527   CALL     $527            Call subroutine at $527                       
>>> $9DA    $6588   LD       V5, #88         Load $88 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $9DC    $1B7C   JP       $B7C            Jump to address $B7C                          
    $9DE    $CE0B   RND      VE, #0B         VE = random() AND $0B                         W:[14]
    $9E0    $AD87   LD       I, $D87         Load $D87 into I register                     
>>> $9E2    $709C   ADD      V0, #9C         Add $9C to V0 (V0 = (V0 + $9C) & 0xFF)        W:[0] R:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $9E4    $1301   JP       $301            Jump to address $301                          
    $9E6    $1D3E   JP       $D3E            Jump to address $D3E                          
    $9E8    $038A   NOP      $038A           No operation (ignored by CUDA kernel)         
    $9EA    $9E0A   UNKNOWN  $9E0A           Unknown 9xxx instruction (crashes in CUDA)    
    $9EC    $ECB6   UNKNOWN  $ECB6           Unknown Exxx instruction (crashes in CUDA)    
    $9EE    $2B84   CALL     $B84            Call subroutine at $B84                       
    $9F0    $D623   DRW      V6, V2, #3      Draw 3-byte sprite at (V6, V2), VF = collision W:[15] R:[2, 6]
    $9F2    $EE03   UNKNOWN  $EE03           Unknown Exxx instruction (crashes in CUDA)    
    $9F4    $683C   LD       V8, #3C         Load $3C into V8                              W:[8]
    $9F6    $BE31   JP       V0, $E31        Jump to $E31 + V0                             R:[0]
    $9F8    $2475   CALL     $475            Call subroutine at $475                       
    $9FA    $4EC9   SNE      VE, #C9         Skip next instruction if VE != $C9            R:[14]
    $9FC    $D613   DRW      V6, V1, #3      Draw 3-byte sprite at (V6, V1), VF = collision W:[15] R:[1, 6]
    $9FE    $6847   LD       V8, #47         Load $47 into V8                              W:[8]
    $A00    $55D2   UNKNOWN  $55D2           Unknown 5xxx instruction (crashes in CUDA)    
    $A02    $1C3B   JP       $C3B            Jump to address $C3B                          
    $A04    $B7B6   JP       V0, $7B6        Jump to $7B6 + V0                             R:[0]
    $A06    $0ADE   NOP      $0ADE           No operation (ignored by CUDA kernel)         
    $A08    $E8A2   UNKNOWN  $E8A2           Unknown Exxx instruction (crashes in CUDA)    
    $A0A    $97E2   UNKNOWN  $97E2           Unknown 9xxx instruction (crashes in CUDA)    
    $A0C    $202B   CALL     $02B            Call subroutine at $02B                       
>>> $A0E    $5D30   SE       VD, V3          Skip next instruction if VD == V3             R:[3, 13]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $A10    $0840   NOP      $0840           No operation (ignored by CUDA kernel)         
    $A12    $2CE3   CALL     $CE3            Call subroutine at $CE3                       
    $A14    $CD0F   RND      VD, #0F         VD = random() AND $0F                         W:[13]
    $A16    $1777   JP       $777            Jump to address $777                          
    $A18    $ECA7   UNKNOWN  $ECA7           Unknown Exxx instruction (crashes in CUDA)    
    $A1A    $CF0C   RND      VF, #0C         VF = random() AND $0C                         W:[15]
    $A1C    $D548   DRW      V5, V4, #8      Draw 8-byte sprite at (V5, V4), VF = collision W:[15] R:[4, 5]
    $A1E    $E70B   UNKNOWN  $E70B           Unknown Exxx instruction (crashes in CUDA)    
>>> $A20    $53A0   SE       V3, VA          Skip next instruction if V3 == VA             R:[3, 10]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $A22    $3EBA   SE       VE, #BA         Skip next instruction if VE == $BA            R:[14]
    $A24    $AC3A   LD       I, $C3A         Load $C3A into I register                     
    $A26    $ED67   UNKNOWN  $ED67           Unknown Exxx instruction (crashes in CUDA)    
>>> $A28    $67CC   LD       V7, #CC         Load $CC into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $A2A    $B620   JP       V0, $620        Jump to $620 + V0                             R:[0]
    $A2C    $FC34   UNKNOWN  $FC34           Unknown Fxxx instruction (crashes in CUDA)    
    $A2E    $989D   UNKNOWN  $989D           Unknown 9xxx instruction (crashes in CUDA)    
    $A30    $E1B7   UNKNOWN  $E1B7           Unknown Exxx instruction (crashes in CUDA)    
    $A32    $F7EF   UNKNOWN  $F7EF           Unknown Fxxx instruction (crashes in CUDA)    
    $A34    $5DBD   UNKNOWN  $5DBD           Unknown 5xxx instruction (crashes in CUDA)    
>>> $A36    $8593   XOR      V5, V9          V5 = V5 XOR V9, VF = 0                        W:[5, 15] R:[5, 9]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $A38    $2898   CALL     $898            Call subroutine at $898                       
    $A3A    $E1AF   UNKNOWN  $E1AF           Unknown Exxx instruction (crashes in CUDA)    
    $A3C    $0BE9   NOP      $0BE9           No operation (ignored by CUDA kernel)         
    $A3E    $97F1   UNKNOWN  $97F1           Unknown 9xxx instruction (crashes in CUDA)    
    $A40    $5CD5   UNKNOWN  $5CD5           Unknown 5xxx instruction (crashes in CUDA)    
>>> $A42    $67AE   LD       V7, #AE         Load $AE into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $A44    $9B19   UNKNOWN  $9B19           Unknown 9xxx instruction (crashes in CUDA)    
    $A46    $1075   JP       $075            Jump to address $075                          
    $A48    $9584   UNKNOWN  $9584           Unknown 9xxx instruction (crashes in CUDA)    
    $A4A    $BCD5   JP       V0, $CD5        Jump to $CD5 + V0                             R:[0]
>>> $A4C    $37AA   SE       V7, #AA         Skip next instruction if V7 == $AA            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
>>> $A4E    $67FC   LD       V7, #FC         Load $FC into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $A50    $945C   UNKNOWN  $945C           Unknown 9xxx instruction (crashes in CUDA)    
>>> $A52    $C007   RND      V0, #07         V0 = random() AND $07                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $A54    $0963   NOP      $0963           No operation (ignored by CUDA kernel)         
    $A56    $A20C   LD       I, $20C         Load $20C into I register                     
    $A58    $3F4E   SE       VF, #4E         Skip next instruction if VF == $4E            R:[15]
    $A5A    $F4AE   UNKNOWN  $F4AE           Unknown Fxxx instruction (crashes in CUDA)    
    $A5C    $9F0D   UNKNOWN  $9F0D           Unknown 9xxx instruction (crashes in CUDA)    
    $A5E    $22CB   CALL     $2CB            Call subroutine at $2CB                       
>>> $A60    $7199   ADD      V1, #99         Add $99 to V1 (V1 = (V1 + $99) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $A62    $220E   CALL     $20E            Call subroutine at $20E                       
    $A64    $E7C4   UNKNOWN  $E7C4           Unknown Exxx instruction (crashes in CUDA)    
    $A66    $3957   SE       V9, #57         Skip next instruction if V9 == $57            R:[9]
    $A68    $AF5A   LD       I, $F5A         Load $F5A into I register                     
>>> $A6A    $71FB   ADD      V1, #FB         Add $FB to V1 (V1 = (V1 + $FB) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $A6C    $BE85   JP       V0, $E85        Jump to $E85 + V0                             R:[0]
    $A6E    $10D9   JP       $0D9            Jump to address $0D9                          
    $A70    $176A   JP       $76A            Jump to address $76A                          
    $A72    $9789   UNKNOWN  $9789           Unknown 9xxx instruction (crashes in CUDA)    
    $A74    $B60D   JP       V0, $60D        Jump to $60D + V0                             R:[0]
    $A76    $E7BE   UNKNOWN  $E7BE           Unknown Exxx instruction (crashes in CUDA)    
    $A78    $84F8   UNKNOWN  $84F8           Unknown 8xxx instruction (crashes in CUDA)    
    $A7A    $83F8   UNKNOWN  $83F8           Unknown 8xxx instruction (crashes in CUDA)    
    $A7C    $F2D1   UNKNOWN  $F2D1           Unknown Fxxx instruction (crashes in CUDA)    
>>> $A7E    $43DC   SNE      V3, #DC         Skip next instruction if V3 != $DC            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $A80    $E073   UNKNOWN  $E073           Unknown Exxx instruction (crashes in CUDA)    
    $A82    $A32E   LD       I, $32E         Load $32E into I register                     
>>> $A84    $422D   SNE      V2, #2D         Skip next instruction if V2 != $2D            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $A86    $50C6   UNKNOWN  $50C6           Unknown 5xxx instruction (crashes in CUDA)    
>>> $A88    $65C0   LD       V5, #C0         Load $C0 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
>>> $A8A    $416B   SNE      V1, #6B         Skip next instruction if V1 != $6B            R:[1]
          ^-- SORTING RELATED: Compares sorted registers V[1]
>>> $A8C    $FB65   LD       VB, [I]         Load V0-VB from [I], then I += 12             W:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
          ^-- SORTING RELATED: Modifies sorted registers V[0, 1, 2, 3, 4, 5, 6, 7]
>>> $A8E    $8B11   OR       VB, V1          VB = VB OR V1, VF = 0                         W:[11, 15] R:[1, 11]
          ^-- SORTING RELATED: Logical operation on V[1] (sets VF=0 in CUDA)
    $A90    $06E5   NOP      $06E5           No operation (ignored by CUDA kernel)         
    $A92    $0AA2   NOP      $0AA2           No operation (ignored by CUDA kernel)         
    $A94    $6F9E   LD       VF, #9E         Load $9E into VF                              W:[15]
    $A96    $1E86   JP       $E86            Jump to address $E86                          
    $A98    $D012   DRW      V0, V1, #2      Draw 2-byte sprite at (V0, V1), VF = collision W:[15] R:[0, 1]
    $A9A    $01E8   NOP      $01E8           No operation (ignored by CUDA kernel)         
    $A9C    $D631   DRW      V6, V3, #1      Draw 1-byte sprite at (V6, V3), VF = collision W:[15] R:[3, 6]
    $A9E    $DDA5   DRW      VD, VA, #5      Draw 5-byte sprite at (VD, VA), VF = collision W:[15] R:[10, 13]
    $AA0    $5693   UNKNOWN  $5693           Unknown 5xxx instruction (crashes in CUDA)    
    $AA2    $07F8   NOP      $07F8           No operation (ignored by CUDA kernel)         
    $AA4    $D36D   DRW      V3, V6, #D      Draw 13-byte sprite at (V3, V6), VF = collision W:[15] R:[3, 6]
    $AA6    $4A42   SNE      VA, #42         Skip next instruction if VA != $42            R:[10]
    $AA8    $92EE   UNKNOWN  $92EE           Unknown 9xxx instruction (crashes in CUDA)    
    $AAA    $B55B   JP       V0, $55B        Jump to $55B + V0                             R:[0]
    $AAC    $0C8D   NOP      $0C8D           No operation (ignored by CUDA kernel)         
    $AAE    $0BEC   NOP      $0BEC           No operation (ignored by CUDA kernel)         
    $AB0    $524C   UNKNOWN  $524C           Unknown 5xxx instruction (crashes in CUDA)    
    $AB2    $F14B   UNKNOWN  $F14B           Unknown Fxxx instruction (crashes in CUDA)    
    $AB4    $28C8   CALL     $8C8            Call subroutine at $8C8                       
    $AB6    $9A19   UNKNOWN  $9A19           Unknown 9xxx instruction (crashes in CUDA)    
    $AB8    $279B   CALL     $79B            Call subroutine at $79B                       
    $ABA    $DA8E   DRW      VA, V8, #E      Draw 14-byte sprite at (VA, V8), VF = collision W:[15] R:[8, 10]
>>> $ABC    $C696   RND      V6, #96         V6 = random() AND $96                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $ABE    $0405   NOP      $0405           No operation (ignored by CUDA kernel)         
    $AC0    $CA3A   RND      VA, #3A         VA = random() AND $3A                         W:[10]
    $AC2    $065B   NOP      $065B           No operation (ignored by CUDA kernel)         
    $AC4    $ED22   UNKNOWN  $ED22           Unknown Exxx instruction (crashes in CUDA)    
    $AC6    $683F   LD       V8, #3F         Load $3F into V8                              W:[8]
    $AC8    $0E55   NOP      $0E55           No operation (ignored by CUDA kernel)         
    $ACA    $D49C   DRW      V4, V9, #C      Draw 12-byte sprite at (V4, V9), VF = collision W:[15] R:[4, 9]
    $ACC    $92E3   UNKNOWN  $92E3           Unknown 9xxx instruction (crashes in CUDA)    
    $ACE    $FD04   UNKNOWN  $FD04           Unknown Fxxx instruction (crashes in CUDA)    
>>> $AD0    $438B   SNE      V3, #8B         Skip next instruction if V3 != $8B            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $AD2    $F0A1   UNKNOWN  $F0A1           Unknown Fxxx instruction (crashes in CUDA)    
    $AD4    $FB0A   LD       VB, K           Wait for key press, store key in VB (HALTS until key) W:[11]
    $AD6    $6A4D   LD       VA, #4D         Load $4D into VA                              W:[10]
>>> $AD8    $4572   SNE      V5, #72         Skip next instruction if V5 != $72            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $ADA    $2FF5   CALL     $FF5            Call subroutine at $FF5                       
>>> $ADC    $C71F   RND      V7, #1F         V7 = random() AND $1F                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $ADE    $99E9   UNKNOWN  $99E9           Unknown 9xxx instruction (crashes in CUDA)    
    $AE0    $1777   JP       $777            Jump to address $777                          
    $AE2    $6F7B   LD       VF, #7B         Load $7B into VF                              W:[15]
    $AE4    $0ED5   NOP      $0ED5           No operation (ignored by CUDA kernel)         
    $AE6    $CB26   RND      VB, #26         VB = random() AND $26                         W:[11]
    $AE8    $26FD   CALL     $6FD            Call subroutine at $6FD                       
    $AEA    $AE4F   LD       I, $E4F         Load $E4F into I register                     
    $AEC    $B033   JP       V0, $033        Jump to $033 + V0                             R:[0]
>>> $AEE    $C404   RND      V4, #04         V4 = random() AND $04                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $AF0    $48B6   SNE      V8, #B6         Skip next instruction if V8 != $B6            R:[8]
>>> $AF2    $7517   ADD      V5, #17         Add $17 to V5 (V5 = (V5 + $17) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $AF4    $78A7   ADD      V8, #A7         Add $A7 to V8 (V8 = (V8 + $A7) & 0xFF)        W:[8] R:[8]
    $AF6    $7CE6   ADD      VC, #E6         Add $E6 to VC (VC = (VC + $E6) & 0xFF)        W:[12] R:[12]
    $AF8    $E457   UNKNOWN  $E457           Unknown Exxx instruction (crashes in CUDA)    
    $AFA    $5556   UNKNOWN  $5556           Unknown 5xxx instruction (crashes in CUDA)    
    $AFC    $F328   UNKNOWN  $F328           Unknown Fxxx instruction (crashes in CUDA)    
>>> $AFE    $C056   RND      V0, #56         V0 = random() AND $56                         W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $B00    $A9FD   LD       I, $9FD         Load $9FD into I register                     
    $B02    $F94E   UNKNOWN  $F94E           Unknown Fxxx instruction (crashes in CUDA)    
    $B04    $9961   UNKNOWN  $9961           Unknown 9xxx instruction (crashes in CUDA)    
    $B06    $7F0E   ADD      VF, #0E         Add $0E to VF (VF = (VF + $0E) & 0xFF)        W:[15] R:[15]
    $B08    $1DE0   JP       $DE0            Jump to address $DE0                          
    $B0A    $9497   UNKNOWN  $9497           Unknown 9xxx instruction (crashes in CUDA)    
    $B0C    $0B89   NOP      $0B89           No operation (ignored by CUDA kernel)         
    $B0E    $D3F0   DRW      V3, VF, #0      Draw 0-byte sprite at (V3, VF), VF = collision W:[15] R:[3, 15]
>>> $B10    $C236   RND      V2, #36         V2 = random() AND $36                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
>>> $B12    $8A31   OR       VA, V3          VA = VA OR V3, VF = 0                         W:[10, 15] R:[3, 10]
          ^-- SORTING RELATED: Logical operation on V[3] (sets VF=0 in CUDA)
    $B14    $B12D   JP       V0, $12D        Jump to $12D + V0                             R:[0]
    $B16    $E2B2   UNKNOWN  $E2B2           Unknown Exxx instruction (crashes in CUDA)    
    $B18    $BC86   JP       V0, $C86        Jump to $C86 + V0                             R:[0]
>>> $B1A    $46D1   SNE      V6, #D1         Skip next instruction if V6 != $D1            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $B1C    $4B68   SNE      VB, #68         Skip next instruction if VB != $68            R:[11]
    $B1E    $FF80   UNKNOWN  $FF80           Unknown Fxxx instruction (crashes in CUDA)    
    $B20    $A963   LD       I, $963         Load $963 into I register                     
    $B22    $981E   UNKNOWN  $981E           Unknown 9xxx instruction (crashes in CUDA)    
>>> $B24    $621B   LD       V2, #1B         Load $1B into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $B26    $9864   UNKNOWN  $9864           Unknown 9xxx instruction (crashes in CUDA)    
    $B28    $DEB6   DRW      VE, VB, #6      Draw 6-byte sprite at (VE, VB), VF = collision W:[15] R:[11, 14]
    $B2A    $A4DD   LD       I, $4DD         Load $4DD into I register                     
    $B2C    $DFCB   DRW      VF, VC, #B      Draw 11-byte sprite at (VF, VC), VF = collision W:[15] R:[12, 15]
    $B2E    $1DAF   JP       $DAF            Jump to address $DAF                          
    $B30    $1420   JP       $420            Jump to address $420                          
>>> $B32    $442A   SNE      V4, #2A         Skip next instruction if V4 != $2A            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $B34    $3AC2   SE       VA, #C2         Skip next instruction if VA == $C2            R:[10]
    $B36    $3F44   SE       VF, #44         Skip next instruction if VF == $44            R:[15]
    $B38    $D28D   DRW      V2, V8, #D      Draw 13-byte sprite at (V2, V8), VF = collision W:[15] R:[2, 8]
>>> $B3A    $778B   ADD      V7, #8B         Add $8B to V7 (V7 = (V7 + $8B) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $B3C    $241E   CALL     $41E            Call subroutine at $41E                       
    $B3E    $0E96   NOP      $0E96           No operation (ignored by CUDA kernel)         
>>> $B40    $62B9   LD       V2, #B9         Load $B9 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $B42    $9194   UNKNOWN  $9194           Unknown 9xxx instruction (crashes in CUDA)    
    $B44    $2DE1   CALL     $DE1            Call subroutine at $DE1                       
    $B46    $87E8   UNKNOWN  $87E8           Unknown 8xxx instruction (crashes in CUDA)    
    $B48    $EE57   UNKNOWN  $EE57           Unknown Exxx instruction (crashes in CUDA)    
    $B4A    $DE9E   DRW      VE, V9, #E      Draw 14-byte sprite at (VE, V9), VF = collision W:[15] R:[9, 14]
    $B4C    $1AD9   JP       $AD9            Jump to address $AD9                          
    $B4E    $4DE8   SNE      VD, #E8         Skip next instruction if VD != $E8            R:[13]
>>> $B50    $43E5   SNE      V3, #E5         Skip next instruction if V3 != $E5            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $B52    $2661   CALL     $661            Call subroutine at $661                       
>>> $B54    $C161   RND      V1, #61         V1 = random() AND $61                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $B56    $C870   RND      V8, #70         V8 = random() AND $70                         W:[8]
>>> $B58    $4305   SNE      V3, #05         Skip next instruction if V3 != $05            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $B5A    $494B   SNE      V9, #4B         Skip next instruction if V9 != $4B            R:[9]
    $B5C    $B4E2   JP       V0, $4E2        Jump to $4E2 + V0                             R:[0]
    $B5E    $B840   JP       V0, $840        Jump to $840 + V0                             R:[0]
>>> $B60    $6521   LD       V5, #21         Load $21 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $B62    $3F1E   SE       VF, #1E         Skip next instruction if VF == $1E            R:[15]
    $B64    $273C   CALL     $73C            Call subroutine at $73C                       
    $B66    $B679   JP       V0, $679        Jump to $679 + V0                             R:[0]
    $B68    $2B78   CALL     $B78            Call subroutine at $B78                       
>>> $B6A    $4185   SNE      V1, #85         Skip next instruction if V1 != $85            R:[1]
          ^-- SORTING RELATED: Compares sorted registers V[1]
    $B6C    $3E47   SE       VE, #47         Skip next instruction if VE == $47            R:[14]
    $B6E    $ABF7   LD       I, $BF7         Load $BF7 into I register                     
>>> $B70    $60F2   LD       V0, #F2         Load $F2 into V0                              W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $B72    $6C2D   LD       VC, #2D         Load $2D into VC                              W:[12]
    $B74    $F000   UNKNOWN  $F000           Unknown Fxxx instruction (crashes in CUDA)    
    $B76    $BF6B   JP       V0, $F6B        Jump to $F6B + V0                             R:[0]
>>> $B78    $C234   RND      V2, #34         V2 = random() AND $34                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $B7A    $021C   NOP      $021C           No operation (ignored by CUDA kernel)         
    $B7C    $0585   NOP      $0585           No operation (ignored by CUDA kernel)         
    $B7E    $5CC7   UNKNOWN  $5CC7           Unknown 5xxx instruction (crashes in CUDA)    
    $B80    $B24F   JP       V0, $24F        Jump to $24F + V0                             R:[0]
    $B82    $8F8E   SHL      VF              VF = (VF << 1) & 0xFF, VF = MSB               W:[15] R:[15]
>>> $B84    $405E   SNE      V0, #5E         Skip next instruction if V0 != $5E            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
>>> $B86    $C2DB   RND      V2, #DB         V2 = random() AND $DB                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $B88    $FDCB   UNKNOWN  $FDCB           Unknown Fxxx instruction (crashes in CUDA)    
    $B8A    $5ACC   UNKNOWN  $5ACC           Unknown 5xxx instruction (crashes in CUDA)    
    $B8C    $948A   UNKNOWN  $948A           Unknown 9xxx instruction (crashes in CUDA)    
    $B8E    $D789   DRW      V7, V8, #9      Draw 9-byte sprite at (V7, V8), VF = collision W:[15] R:[7, 8]
    $B90    $B4FF   JP       V0, $4FF        Jump to $4FF + V0                             R:[0]
>>> $B92    $64D6   LD       V4, #D6         Load $D6 into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
>>> $B94    $3418   SE       V4, #18         Skip next instruction if V4 == $18            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $B96    $83AD   UNKNOWN  $83AD           Unknown 8xxx instruction (crashes in CUDA)    
    $B98    $2177   CALL     $177            Call subroutine at $177                       
    $B9A    $A71A   LD       I, $71A         Load $71A into I register                     
>>> $B9C    $76A0   ADD      V6, #A0         Add $A0 to V6 (V6 = (V6 + $A0) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $B9E    $9E6A   UNKNOWN  $9E6A           Unknown 9xxx instruction (crashes in CUDA)    
    $BA0    $1D1B   JP       $D1B            Jump to address $D1B                          
    $BA2    $7979   ADD      V9, #79         Add $79 to V9 (V9 = (V9 + $79) & 0xFF)        W:[9] R:[9]
    $BA4    $CAAE   RND      VA, #AE         VA = random() AND $AE                         W:[10]
    $BA6    $BA2C   JP       V0, $A2C        Jump to $A2C + V0                             R:[0]
    $BA8    $2132   CALL     $132            Call subroutine at $132                       
    $BAA    $00D8   NOP      $00D8           No operation (ignored by CUDA kernel)         
    $BAC    $CF1E   RND      VF, #1E         VF = random() AND $1E                         W:[15]
>>> $BAE    $67BF   LD       V7, #BF         Load $BF into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $BB0    $E993   UNKNOWN  $E993           Unknown Exxx instruction (crashes in CUDA)    
    $BB2    $21CD   CALL     $1CD            Call subroutine at $1CD                       
    $BB4    $0AAD   NOP      $0AAD           No operation (ignored by CUDA kernel)         
    $BB6    $A09F   LD       I, $09F         Load $09F into I register                     
    $BB8    $A117   LD       I, $117         Load $117 into I register                     
    $BBA    $2CD3   CALL     $CD3            Call subroutine at $CD3                       
    $BBC    $CE2A   RND      VE, #2A         VE = random() AND $2A                         W:[14]
    $BBE    $0E57   NOP      $0E57           No operation (ignored by CUDA kernel)         
    $BC0    $BFDA   JP       V0, $FDA        Jump to $FDA + V0                             R:[0]
    $BC2    $DCD6   DRW      VC, VD, #6      Draw 6-byte sprite at (VC, VD), VF = collision W:[15] R:[12, 13]
    $BC4    $5286   UNKNOWN  $5286           Unknown 5xxx instruction (crashes in CUDA)    
    $BC6    $131C   JP       $31C            Jump to address $31C                          
    $BC8    $2815   CALL     $815            Call subroutine at $815                       
>>> $BCA    $3014   SE       V0, #14         Skip next instruction if V0 == $14            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
>>> $BCC    $471E   SNE      V7, #1E         Skip next instruction if V7 != $1E            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $BCE    $DB64   DRW      VB, V6, #4      Draw 4-byte sprite at (VB, V6), VF = collision W:[15] R:[6, 11]
    $BD0    $CE6A   RND      VE, #6A         VE = random() AND $6A                         W:[14]
    $BD2    $ADC5   LD       I, $DC5         Load $DC5 into I register                     
    $BD4    $693D   LD       V9, #3D         Load $3D into V9                              W:[9]
    $BD6    $DA18   DRW      VA, V1, #8      Draw 8-byte sprite at (VA, V1), VF = collision W:[15] R:[1, 10]
    $BD8    $1F39   JP       $F39            Jump to address $F39                          
    $BDA    $A83F   LD       I, $83F         Load $83F into I register                     
    $BDC    $2D73   CALL     $D73            Call subroutine at $D73                       
    $BDE    $D95F   DRW      V9, V5, #F      Draw 15-byte sprite at (V9, V5), VF = collision W:[15] R:[5, 9]
    $BE0    $08B2   NOP      $08B2           No operation (ignored by CUDA kernel)         
    $BE2    $205D   CALL     $05D            Call subroutine at $05D                       
    $BE4    $D79B   DRW      V7, V9, #B      Draw 11-byte sprite at (V7, V9), VF = collision W:[15] R:[7, 9]
    $BE6    $DC7E   DRW      VC, V7, #E      Draw 14-byte sprite at (VC, V7), VF = collision W:[15] R:[7, 12]
    $BE8    $4EF1   SNE      VE, #F1         Skip next instruction if VE != $F1            R:[14]
    $BEA    $F5BB   UNKNOWN  $F5BB           Unknown Fxxx instruction (crashes in CUDA)    
>>> $BEC    $726C   ADD      V2, #6C         Add $6C to V2 (V2 = (V2 + $6C) & 0xFF)        W:[2] R:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $BEE    $F63F   UNKNOWN  $F63F           Unknown Fxxx instruction (crashes in CUDA)    
    $BF0    $D1A8   DRW      V1, VA, #8      Draw 8-byte sprite at (V1, VA), VF = collision W:[15] R:[1, 10]
    $BF2    $CF0D   RND      VF, #0D         VF = random() AND $0D                         W:[15]
    $BF4    $5A01   UNKNOWN  $5A01           Unknown 5xxx instruction (crashes in CUDA)    
>>> $BF6    $46FC   SNE      V6, #FC         Skip next instruction if V6 != $FC            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $BF8    $8FC4   ADD      VF, VC          VF = (VF + VC) & 0xFF, VF = carry             W:[15] R:[12, 15]
    $BFA    $3A90   SE       VA, #90         Skip next instruction if VA == $90            R:[10]
    $BFC    $3A55   SE       VA, #55         Skip next instruction if VA == $55            R:[10]
    $BFE    $D68F   DRW      V6, V8, #F      Draw 15-byte sprite at (V6, V8), VF = collision W:[15] R:[6, 8]
>>> $C00    $80F7   SUBN     V0, VF          V0 = (VF - V0) & 0xFF, VF = NOT borrow        W:[0, 15] R:[0, 15]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $C02    $2B6D   CALL     $B6D            Call subroutine at $B6D                       
    $C04    $4D59   SNE      VD, #59         Skip next instruction if VD != $59            R:[13]
    $C06    $AAC0   LD       I, $AC0         Load $AC0 into I register                     
    $C08    $9C09   UNKNOWN  $9C09           Unknown 9xxx instruction (crashes in CUDA)    
    $C0A    $F38D   UNKNOWN  $F38D           Unknown Fxxx instruction (crashes in CUDA)    
>>> $C0C    $4508   SNE      V5, #08         Skip next instruction if V5 != $08            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $C0E    $18C0   JP       $8C0            Jump to address $8C0                          
    $C10    $12D4   JP       $2D4            Jump to address $2D4                          
    $C12    $5683   UNKNOWN  $5683           Unknown 5xxx instruction (crashes in CUDA)    
    $C14    $6941   LD       V9, #41         Load $41 into V9                              W:[9]
>>> $C16    $457B   SNE      V5, #7B         Skip next instruction if V5 != $7B            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $C18    $5099   UNKNOWN  $5099           Unknown 5xxx instruction (crashes in CUDA)    
    $C1A    $4F13   SNE      VF, #13         Skip next instruction if VF != $13            R:[15]
    $C1C    $2D2A   CALL     $D2A            Call subroutine at $D2A                       
    $C1E    $C873   RND      V8, #73         V8 = random() AND $73                         W:[8]
    $C20    $3EAB   SE       VE, #AB         Skip next instruction if VE == $AB            R:[14]
    $C22    $0FAD   NOP      $0FAD           No operation (ignored by CUDA kernel)         
>>> $C24    $44BE   SNE      V4, #BE         Skip next instruction if V4 != $BE            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
>>> $C26    $C570   RND      V5, #70         V5 = random() AND $70                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $C28    $BCC6   JP       V0, $CC6        Jump to $CC6 + V0                             R:[0]
    $C2A    $2230   CALL     $230            Call subroutine at $230                       
    $C2C    $7AC3   ADD      VA, #C3         Add $C3 to VA (VA = (VA + $C3) & 0xFF)        W:[10] R:[10]
    $C2E    $0754   NOP      $0754           No operation (ignored by CUDA kernel)         
    $C30    $A828   LD       I, $828         Load $828 into I register                     
    $C32    $FE06   UNKNOWN  $FE06           Unknown Fxxx instruction (crashes in CUDA)    
    $C34    $69F9   LD       V9, #F9         Load $F9 into V9                              W:[9]
>>> $C36    $C28C   RND      V2, #8C         V2 = random() AND $8C                         W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $C38    $BEF9   JP       V0, $EF9        Jump to $EF9 + V0                             R:[0]
    $C3A    $F96A   UNKNOWN  $F96A           Unknown Fxxx instruction (crashes in CUDA)    
    $C3C    $8E0A   UNKNOWN  $8E0A           Unknown 8xxx instruction (crashes in CUDA)    
    $C3E    $DEBC   DRW      VE, VB, #C      Draw 12-byte sprite at (VE, VB), VF = collision W:[15] R:[11, 14]
    $C40    $97E9   UNKNOWN  $97E9           Unknown 9xxx instruction (crashes in CUDA)    
    $C42    $D472   DRW      V4, V7, #2      Draw 2-byte sprite at (V4, V7), VF = collision W:[15] R:[4, 7]
    $C44    $0C5B   NOP      $0C5B           No operation (ignored by CUDA kernel)         
    $C46    $55E5   UNKNOWN  $55E5           Unknown 5xxx instruction (crashes in CUDA)    
    $C48    $2FED   CALL     $FED            Call subroutine at $FED                       
    $C4A    $D462   DRW      V4, V6, #2      Draw 2-byte sprite at (V4, V6), VF = collision W:[15] R:[4, 6]
    $C4C    $DF05   DRW      VF, V0, #5      Draw 5-byte sprite at (VF, V0), VF = collision W:[15] R:[0, 15]
    $C4E    $5F49   UNKNOWN  $5F49           Unknown 5xxx instruction (crashes in CUDA)    
    $C50    $0376   NOP      $0376           No operation (ignored by CUDA kernel)         
    $C52    $9B8C   UNKNOWN  $9B8C           Unknown 9xxx instruction (crashes in CUDA)    
    $C54    $DE41   DRW      VE, V4, #1      Draw 1-byte sprite at (VE, V4), VF = collision W:[15] R:[4, 14]
    $C56    $D84C   DRW      V8, V4, #C      Draw 12-byte sprite at (V8, V4), VF = collision W:[15] R:[4, 8]
>>> $C58    $C119   RND      V1, #19         V1 = random() AND $19                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $C5A    $23F5   CALL     $3F5            Call subroutine at $3F5                       
    $C5C    $A187   LD       I, $187         Load $187 into I register                     
    $C5E    $25C7   CALL     $5C7            Call subroutine at $5C7                       
    $C60    $1305   JP       $305            Jump to address $305                          
    $C62    $ED65   UNKNOWN  $ED65           Unknown Exxx instruction (crashes in CUDA)    
    $C64    $293B   CALL     $93B            Call subroutine at $93B                       
    $C66    $030B   NOP      $030B           No operation (ignored by CUDA kernel)         
    $C68    $BC39   JP       V0, $C39        Jump to $C39 + V0                             R:[0]
    $C6A    $F146   UNKNOWN  $F146           Unknown Fxxx instruction (crashes in CUDA)    
    $C6C    $BD9B   JP       V0, $D9B        Jump to $D9B + V0                             R:[0]
    $C6E    $6E33   LD       VE, #33         Load $33 into VE                              W:[14]
    $C70    $FA0E   UNKNOWN  $FA0E           Unknown Fxxx instruction (crashes in CUDA)    
    $C72    $A153   LD       I, $153         Load $153 into I register                     
    $C74    $4E0D   SNE      VE, #0D         Skip next instruction if VE != $0D            R:[14]
    $C76    $83BA   UNKNOWN  $83BA           Unknown 8xxx instruction (crashes in CUDA)    
    $C78    $F39F   UNKNOWN  $F39F           Unknown Fxxx instruction (crashes in CUDA)    
    $C7A    $E340   UNKNOWN  $E340           Unknown Exxx instruction (crashes in CUDA)    
    $C7C    $AF15   LD       I, $F15         Load $F15 into I register                     
    $C7E    $79E1   ADD      V9, #E1         Add $E1 to V9 (V9 = (V9 + $E1) & 0xFF)        W:[9] R:[9]
    $C80    $F883   UNKNOWN  $F883           Unknown Fxxx instruction (crashes in CUDA)    
>>> $C82    $C345   RND      V3, #45         V3 = random() AND $45                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $C84    $03B3   NOP      $03B3           No operation (ignored by CUDA kernel)         
    $C86    $9C29   UNKNOWN  $9C29           Unknown 9xxx instruction (crashes in CUDA)    
    $C88    $D198   DRW      V1, V9, #8      Draw 8-byte sprite at (V1, V9), VF = collision W:[15] R:[1, 9]
    $C8A    $2BB7   CALL     $BB7            Call subroutine at $BB7                       
    $C8C    $8D4C   UNKNOWN  $8D4C           Unknown 8xxx instruction (crashes in CUDA)    
    $C8E    $39EC   SE       V9, #EC         Skip next instruction if V9 == $EC            R:[9]
>>> $C90    $4604   SNE      V6, #04         Skip next instruction if V6 != $04            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $C92    $B9A0   JP       V0, $9A0        Jump to $9A0 + V0                             R:[0]
    $C94    $B1B6   JP       V0, $1B6        Jump to $1B6 + V0                             R:[0]
>>> $C96    $3488   SE       V4, #88         Skip next instruction if V4 == $88            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $C98    $AD93   LD       I, $D93         Load $D93 into I register                     
    $C9A    $B359   JP       V0, $359        Jump to $359 + V0                             R:[0]
    $C9C    $08F7   NOP      $08F7           No operation (ignored by CUDA kernel)         
>>> $C9E    $47BA   SNE      V7, #BA         Skip next instruction if V7 != $BA            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
>>> $CA0    $6206   LD       V2, #06         Load $06 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $CA2    $D1B9   DRW      V1, VB, #9      Draw 9-byte sprite at (V1, VB), VF = collision W:[15] R:[1, 11]
>>> $CA4    $8702   AND      V7, V0          V7 = V7 AND V0, VF = 0                        W:[7, 15] R:[0, 7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $CA6    $F466   UNKNOWN  $F466           Unknown Fxxx instruction (crashes in CUDA)    
    $CA8    $CB6C   RND      VB, #6C         VB = random() AND $6C                         W:[11]
    $CAA    $B664   JP       V0, $664        Jump to $664 + V0                             R:[0]
    $CAC    $F4C7   UNKNOWN  $F4C7           Unknown Fxxx instruction (crashes in CUDA)    
    $CAE    $0B30   NOP      $0B30           No operation (ignored by CUDA kernel)         
    $CB0    $8179   UNKNOWN  $8179           Unknown 8xxx instruction (crashes in CUDA)    
    $CB2    $7BBA   ADD      VB, #BA         Add $BA to VB (VB = (VB + $BA) & 0xFF)        W:[11] R:[11]
    $CB4    $19F6   JP       $9F6            Jump to address $9F6                          
    $CB6    $5A83   UNKNOWN  $5A83           Unknown 5xxx instruction (crashes in CUDA)    
>>> $CB8    $646E   LD       V4, #6E         Load $6E into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $CBA    $56C5   UNKNOWN  $56C5           Unknown 5xxx instruction (crashes in CUDA)    
>>> $CBC    $36D8   SE       V6, #D8         Skip next instruction if V6 == $D8            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $CBE    $A5F1   LD       I, $5F1         Load $5F1 into I register                     
>>> $CC0    $60F1   LD       V0, #F1         Load $F1 into V0                              W:[0]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $CC2    $6C47   LD       VC, #47         Load $47 into VC                              W:[12]
    $CC4    $5FBE   UNKNOWN  $5FBE           Unknown 5xxx instruction (crashes in CUDA)    
    $CC6    $A56F   LD       I, $56F         Load $56F into I register                     
>>> $CC8    $6313   LD       V3, #13         Load $13 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $CCA    $CD64   RND      VD, #64         VD = random() AND $64                         W:[13]
    $CCC    $27E1   CALL     $7E1            Call subroutine at $7E1                       
    $CCE    $AAAE   LD       I, $AAE         Load $AAE into I register                     
    $CD0    $8D5F   UNKNOWN  $8D5F           Unknown 8xxx instruction (crashes in CUDA)    
    $CD2    $3A4F   SE       VA, #4F         Skip next instruction if VA == $4F            R:[10]
>>> $CD4    $36D7   SE       V6, #D7         Skip next instruction if V6 == $D7            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $CD6    $1459   JP       $459            Jump to address $459                          
    $CD8    $F9B7   UNKNOWN  $F9B7           Unknown Fxxx instruction (crashes in CUDA)    
    $CDA    $9ABE   UNKNOWN  $9ABE           Unknown 9xxx instruction (crashes in CUDA)    
    $CDC    $3B36   SE       VB, #36         Skip next instruction if VB == $36            R:[11]
>>> $CDE    $623B   LD       V2, #3B         Load $3B into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $CE0    $7FEF   ADD      VF, #EF         Add $EF to VF (VF = (VF + $EF) & 0xFF)        W:[15] R:[15]
>>> $CE2    $3363   SE       V3, #63         Skip next instruction if V3 == $63            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $CE4    $92DE   UNKNOWN  $92DE           Unknown 9xxx instruction (crashes in CUDA)    
    $CE6    $1DF6   JP       $DF6            Jump to address $DF6                          
    $CE8    $EA0E   UNKNOWN  $EA0E           Unknown Exxx instruction (crashes in CUDA)    
    $CEA    $DEC8   DRW      VE, VC, #8      Draw 8-byte sprite at (VE, VC), VF = collision W:[15] R:[12, 14]
>>> $CEC    $7631   ADD      V6, #31         Add $31 to V6 (V6 = (V6 + $31) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
>>> $CEE    $341B   SE       V4, #1B         Skip next instruction if V4 == $1B            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $CF0    $7927   ADD      V9, #27         Add $27 to V9 (V9 = (V9 + $27) & 0xFF)        W:[9] R:[9]
    $CF2    $2DD3   CALL     $DD3            Call subroutine at $DD3                       
    $CF4    $A10C   LD       I, $10C         Load $10C into I register                     
>>> $CF6    $3656   SE       V6, #56         Skip next instruction if V6 == $56            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $CF8    $2A48   CALL     $A48            Call subroutine at $A48                       
    $CFA    $1680   JP       $680            Jump to address $680                          
    $CFC    $F4B9   UNKNOWN  $F4B9           Unknown Fxxx instruction (crashes in CUDA)    
    $CFE    $B2BE   JP       V0, $2BE        Jump to $2BE + V0                             R:[0]
    $D00    $4B6D   SNE      VB, #6D         Skip next instruction if VB != $6D            R:[11]
    $D02    $ACE0   LD       I, $CE0         Load $CE0 into I register                     
    $D04    $15B8   JP       $5B8            Jump to address $5B8                          
>>> $D06    $76BD   ADD      V6, #BD         Add $BD to V6 (V6 = (V6 + $BD) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $D08    $DD5B   DRW      VD, V5, #B      Draw 11-byte sprite at (VD, V5), VF = collision W:[15] R:[5, 13]
    $D0A    $A77F   LD       I, $77F         Load $77F into I register                     
>>> $D0C    $75F5   ADD      V5, #F5         Add $F5 to V5 (V5 = (V5 + $F5) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $D0E    $3C17   SE       VC, #17         Skip next instruction if VC == $17            R:[12]
    $D10    $4CB9   SNE      VC, #B9         Skip next instruction if VC != $B9            R:[12]
    $D12    $1FBB   JP       $FBB            Jump to address $FBB                          
    $D14    $0511   NOP      $0511           No operation (ignored by CUDA kernel)         
    $D16    $F310   UNKNOWN  $F310           Unknown Fxxx instruction (crashes in CUDA)    
>>> $D18    $7751   ADD      V7, #51         Add $51 to V7 (V7 = (V7 + $51) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $D1A    $2FED   CALL     $FED            Call subroutine at $FED                       
    $D1C    $17B2   JP       $7B2            Jump to address $7B2                          
    $D1E    $BDCB   JP       V0, $DCB        Jump to $DCB + V0                             R:[0]
    $D20    $AB1A   LD       I, $B1A         Load $B1A into I register                     
    $D22    $AE3C   LD       I, $E3C         Load $E3C into I register                     
    $D24    $E3FF   UNKNOWN  $E3FF           Unknown Exxx instruction (crashes in CUDA)    
>>> $D26    $C70E   RND      V7, #0E         V7 = random() AND $0E                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $D28    $2392   CALL     $392            Call subroutine at $392                       
    $D2A    $4F96   SNE      VF, #96         Skip next instruction if VF != $96            R:[15]
    $D2C    $1736   JP       $736            Jump to address $736                          
    $D2E    $ECD3   UNKNOWN  $ECD3           Unknown Exxx instruction (crashes in CUDA)    
    $D30    $8D9E   SHL      VD              VD = (VD << 1) & 0xFF, VF = MSB               W:[13, 15] R:[13]
>>> $D32    $C472   RND      V4, #72         V4 = random() AND $72                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $D34    $E40E   UNKNOWN  $E40E           Unknown Exxx instruction (crashes in CUDA)    
    $D36    $E56E   UNKNOWN  $E56E           Unknown Exxx instruction (crashes in CUDA)    
>>> $D38    $4218   SNE      V2, #18         Skip next instruction if V2 != $18            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $D3A    $A541   LD       I, $541         Load $541 into I register                     
    $D3C    $099A   NOP      $099A           No operation (ignored by CUDA kernel)         
    $D3E    $56F2   UNKNOWN  $56F2           Unknown 5xxx instruction (crashes in CUDA)    
    $D40    $ADE7   LD       I, $DE7         Load $DE7 into I register                     
    $D42    $1EEE   JP       $EEE            Jump to address $EEE                          
    $D44    $5DEE   UNKNOWN  $5DEE           Unknown 5xxx instruction (crashes in CUDA)    
    $D46    $53DC   UNKNOWN  $53DC           Unknown 5xxx instruction (crashes in CUDA)    
    $D48    $014E   NOP      $014E           No operation (ignored by CUDA kernel)         
    $D4A    $96FC   UNKNOWN  $96FC           Unknown 9xxx instruction (crashes in CUDA)    
    $D4C    $AD82   LD       I, $D82         Load $D82 into I register                     
    $D4E    $12D0   JP       $2D0            Jump to address $2D0                          
>>> $D50    $33A2   SE       V3, #A2         Skip next instruction if V3 == $A2            R:[3]
          ^-- SORTING RELATED: Compares sorted registers V[3]
    $D52    $E755   UNKNOWN  $E755           Unknown Exxx instruction (crashes in CUDA)    
    $D54    $2D8F   CALL     $D8F            Call subroutine at $D8F                       
    $D56    $08A5   NOP      $08A5           No operation (ignored by CUDA kernel)         
>>> $D58    $739B   ADD      V3, #9B         Add $9B to V3 (V3 = (V3 + $9B) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $D5A    $C826   RND      V8, #26         V8 = random() AND $26                         W:[8]
    $D5C    $1FE9   JP       $FE9            Jump to address $FE9                          
>>> $D5E    $6294   LD       V2, #94         Load $94 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $D60    $F4F4   UNKNOWN  $F4F4           Unknown Fxxx instruction (crashes in CUDA)    
    $D62    $D97D   DRW      V9, V7, #D      Draw 13-byte sprite at (V9, V7), VF = collision W:[15] R:[7, 9]
    $D64    $5435   UNKNOWN  $5435           Unknown 5xxx instruction (crashes in CUDA)    
    $D66    $CAA7   RND      VA, #A7         VA = random() AND $A7                         W:[10]
>>> $D68    $7644   ADD      V6, #44         Add $44 to V6 (V6 = (V6 + $44) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $D6A    $3B72   SE       VB, #72         Skip next instruction if VB == $72            R:[11]
    $D6C    $2513   CALL     $513            Call subroutine at $513                       
>>> $D6E    $C6F1   RND      V6, #F1         V6 = random() AND $F1                         W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $D70    $AB55   LD       I, $B55         Load $B55 into I register                     
    $D72    $F178   UNKNOWN  $F178           Unknown Fxxx instruction (crashes in CUDA)    
    $D74    $AE89   LD       I, $E89         Load $E89 into I register                     
    $D76    $058B   NOP      $058B           No operation (ignored by CUDA kernel)         
    $D78    $E611   UNKNOWN  $E611           Unknown Exxx instruction (crashes in CUDA)    
    $D7A    $2A9D   CALL     $A9D            Call subroutine at $A9D                       
    $D7C    $955D   UNKNOWN  $955D           Unknown 9xxx instruction (crashes in CUDA)    
    $D7E    $3D95   SE       VD, #95         Skip next instruction if VD == $95            R:[13]
>>> $D80    $6744   LD       V7, #44         Load $44 into V7                              W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $D82    $58C5   UNKNOWN  $58C5           Unknown 5xxx instruction (crashes in CUDA)    
    $D84    $0211   NOP      $0211           No operation (ignored by CUDA kernel)         
    $D86    $DF78   DRW      VF, V7, #8      Draw 8-byte sprite at (VF, V7), VF = collision W:[15] R:[7, 15]
    $D88    $CF3C   RND      VF, #3C         VF = random() AND $3C                         W:[15]
    $D8A    $DB65   DRW      VB, V6, #5      Draw 5-byte sprite at (VB, V6), VF = collision W:[15] R:[6, 11]
>>> $D8C    $3716   SE       V7, #16         Skip next instruction if V7 == $16            R:[7]
          ^-- SORTING RELATED: Compares sorted registers V[7]
    $D8E    $B40A   JP       V0, $40A        Jump to $40A + V0                             R:[0]
    $D90    $8558   UNKNOWN  $8558           Unknown 8xxx instruction (crashes in CUDA)    
>>> $D92    $3617   SE       V6, #17         Skip next instruction if V6 == $17            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
>>> $D94    $8532   AND      V5, V3          V5 = V5 AND V3, VF = 0                        W:[5, 15] R:[3, 5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $D96    $D76E   DRW      V7, V6, #E      Draw 14-byte sprite at (V7, V6), VF = collision W:[15] R:[6, 7]
    $D98    $4C43   SNE      VC, #43         Skip next instruction if VC != $43            R:[12]
>>> $D9A    $3678   SE       V6, #78         Skip next instruction if V6 == $78            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $D9C    $FCA9   UNKNOWN  $FCA9           Unknown Fxxx instruction (crashes in CUDA)    
    $D9E    $49EB   SNE      V9, #EB         Skip next instruction if V9 != $EB            R:[9]
    $DA0    $8718   UNKNOWN  $8718           Unknown 8xxx instruction (crashes in CUDA)    
    $DA2    $C843   RND      V8, #43         V8 = random() AND $43                         W:[8]
    $DA4    $3887   SE       V8, #87         Skip next instruction if V8 == $87            R:[8]
    $DA6    $D8A7   DRW      V8, VA, #7      Draw 7-byte sprite at (V8, VA), VF = collision W:[15] R:[8, 10]
    $DA8    $10BD   JP       $0BD            Jump to address $0BD                          
    $DAA    $043B   NOP      $043B           No operation (ignored by CUDA kernel)         
    $DAC    $9171   UNKNOWN  $9171           Unknown 9xxx instruction (crashes in CUDA)    
    $DAE    $DD0F   DRW      VD, V0, #F      Draw 15-byte sprite at (VD, V0), VF = collision W:[15] R:[0, 13]
    $DB0    $E1F0   UNKNOWN  $E1F0           Unknown Exxx instruction (crashes in CUDA)    
    $DB2    $6EF6   LD       VE, #F6         Load $F6 into VE                              W:[14]
    $DB4    $99FF   UNKNOWN  $99FF           Unknown 9xxx instruction (crashes in CUDA)    
    $DB6    $AE84   LD       I, $E84         Load $E84 into I register                     
    $DB8    $F5F0   UNKNOWN  $F5F0           Unknown Fxxx instruction (crashes in CUDA)    
    $DBA    $58EB   UNKNOWN  $58EB           Unknown 5xxx instruction (crashes in CUDA)    
    $DBC    $8BEB   UNKNOWN  $8BEB           Unknown 8xxx instruction (crashes in CUDA)    
    $DBE    $9E63   UNKNOWN  $9E63           Unknown 9xxx instruction (crashes in CUDA)    
    $DC0    $B847   JP       V0, $847        Jump to $847 + V0                             R:[0]
>>> $DC2    $34E2   SE       V4, #E2         Skip next instruction if V4 == $E2            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $DC4    $BE01   JP       V0, $E01        Jump to $E01 + V0                             R:[0]
    $DC6    $EEFD   UNKNOWN  $EEFD           Unknown Exxx instruction (crashes in CUDA)    
    $DC8    $03AB   NOP      $03AB           No operation (ignored by CUDA kernel)         
>>> $DCA    $9650   SNE      V6, V5          Skip next instruction if V6 != V5             R:[5, 6]
          ^-- SORTING RELATED: Compares sorted registers V[5, 6]
    $DCC    $DEEA   DRW      VE, VE, #A      Draw 10-byte sprite at (VE, VE), VF = collision W:[15] R:[14]
    $DCE    $9794   UNKNOWN  $9794           Unknown 9xxx instruction (crashes in CUDA)    
    $DD0    $4C7A   SNE      VC, #7A         Skip next instruction if VC != $7A            R:[12]
    $DD2    $E75F   UNKNOWN  $E75F           Unknown Exxx instruction (crashes in CUDA)    
    $DD4    $FC4A   UNKNOWN  $FC4A           Unknown Fxxx instruction (crashes in CUDA)    
    $DD6    $1C7F   JP       $C7F            Jump to address $C7F                          
    $DD8    $8CAC   UNKNOWN  $8CAC           Unknown 8xxx instruction (crashes in CUDA)    
    $DDA    $A360   LD       I, $360         Load $360 into I register                     
    $DDC    $6BEC   LD       VB, #EC         Load $EC into VB                              W:[11]
>>> $DDE    $C351   RND      V3, #51         V3 = random() AND $51                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $DE0    $E755   UNKNOWN  $E755           Unknown Exxx instruction (crashes in CUDA)    
    $DE2    $0CF4   NOP      $0CF4           No operation (ignored by CUDA kernel)         
    $DE4    $4CA7   SNE      VC, #A7         Skip next instruction if VC != $A7            R:[12]
    $DE6    $DF96   DRW      VF, V9, #6      Draw 6-byte sprite at (VF, V9), VF = collision W:[15] R:[9, 15]
    $DE8    $AB8B   LD       I, $B8B         Load $B8B into I register                     
    $DEA    $5FF2   UNKNOWN  $5FF2           Unknown 5xxx instruction (crashes in CUDA)    
    $DEC    $0DF0   NOP      $0DF0           No operation (ignored by CUDA kernel)         
    $DEE    $F052   UNKNOWN  $F052           Unknown Fxxx instruction (crashes in CUDA)    
    $DF0    $4A6D   SNE      VA, #6D         Skip next instruction if VA != $6D            R:[10]
    $DF2    $5BC6   UNKNOWN  $5BC6           Unknown 5xxx instruction (crashes in CUDA)    
    $DF4    $8F88   UNKNOWN  $8F88           Unknown 8xxx instruction (crashes in CUDA)    
    $DF6    $9FA0   SNE      VF, VA          Skip next instruction if VF != VA             R:[10, 15]
    $DF8    $5C18   UNKNOWN  $5C18           Unknown 5xxx instruction (crashes in CUDA)    
    $DFA    $D054   DRW      V0, V5, #4      Draw 4-byte sprite at (V0, V5), VF = collision W:[15] R:[0, 5]
    $DFC    $4F50   SNE      VF, #50         Skip next instruction if VF != $50            R:[15]
>>> $DFE    $42A5   SNE      V2, #A5         Skip next instruction if V2 != $A5            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $E00    $10A0   JP       $0A0            Jump to address $0A0                          
>>> $E02    $736E   ADD      V3, #6E         Add $6E to V3 (V3 = (V3 + $6E) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
>>> $E04    $30B5   SE       V0, #B5         Skip next instruction if V0 == $B5            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $E06    $F2D4   UNKNOWN  $F2D4           Unknown Fxxx instruction (crashes in CUDA)    
>>> $E08    $6563   LD       V5, #63         Load $63 into V5                              W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $E0A    $4B91   SNE      VB, #91         Skip next instruction if VB != $91            R:[11]
>>> $E0C    $6392   LD       V3, #92         Load $92 into V3                              W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $E0E    $B3F1   JP       V0, $3F1        Jump to $3F1 + V0                             R:[0]
    $E10    $29CE   CALL     $9CE            Call subroutine at $9CE                       
    $E12    $FE1A   UNKNOWN  $FE1A           Unknown Fxxx instruction (crashes in CUDA)    
    $E14    $1024   JP       $024            Jump to address $024                          
>>> $E16    $C32A   RND      V3, #2A         V3 = random() AND $2A                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $E18    $ED27   UNKNOWN  $ED27           Unknown Exxx instruction (crashes in CUDA)    
    $E1A    $25A8   CALL     $5A8            Call subroutine at $5A8                       
    $E1C    $1EFE   JP       $EFE            Jump to address $EFE                          
    $E1E    $133D   JP       $33D            Jump to address $33D                          
    $E20    $0907   NOP      $0907           No operation (ignored by CUDA kernel)         
    $E22    $2199   CALL     $199            Call subroutine at $199                       
    $E24    $F542   UNKNOWN  $F542           Unknown Fxxx instruction (crashes in CUDA)    
>>> $E26    $C5AE   RND      V5, #AE         V5 = random() AND $AE                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $E28    $7F50   ADD      VF, #50         Add $50 to VF (VF = (VF + $50) & 0xFF)        W:[15] R:[15]
>>> $E2A    $C495   RND      V4, #95         V4 = random() AND $95                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $E2C    $F947   UNKNOWN  $F947           Unknown Fxxx instruction (crashes in CUDA)    
    $E2E    $D63A   DRW      V6, V3, #A      Draw 10-byte sprite at (V6, V3), VF = collision W:[15] R:[3, 6]
    $E30    $1EF4   JP       $EF4            Jump to address $EF4                          
>>> $E32    $8742   AND      V7, V4          V7 = V7 AND V4, VF = 0                        W:[7, 15] R:[4, 7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $E34    $D881   DRW      V8, V8, #1      Draw 1-byte sprite at (V8, V8), VF = collision W:[15] R:[8]
>>> $E36    $C34A   RND      V3, #4A         V3 = random() AND $4A                         W:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $E38    $6DA1   LD       VD, #A1         Load $A1 into VD                              W:[13]
    $E3A    $2453   CALL     $453            Call subroutine at $453                       
    $E3C    $59B9   UNKNOWN  $59B9           Unknown 5xxx instruction (crashes in CUDA)    
    $E3E    $11AA   JP       $1AA            Jump to address $1AA                          
    $E40    $531E   UNKNOWN  $531E           Unknown 5xxx instruction (crashes in CUDA)    
    $E42    $24B3   CALL     $4B3            Call subroutine at $4B3                       
    $E44    $231C   CALL     $31C            Call subroutine at $31C                       
    $E46    $85BF   UNKNOWN  $85BF           Unknown 8xxx instruction (crashes in CUDA)    
    $E48    $6A55   LD       VA, #55         Load $55 into VA                              W:[10]
    $E4A    $3E58   SE       VE, #58         Skip next instruction if VE == $58            R:[14]
    $E4C    $39B8   SE       V9, #B8         Skip next instruction if V9 == $B8            R:[9]
>>> $E4E    $8D53   XOR      VD, V5          VD = VD XOR V5, VF = 0                        W:[13, 15] R:[5, 13]
          ^-- SORTING RELATED: Logical operation on V[5] (sets VF=0 in CUDA)
    $E50    $F61C   UNKNOWN  $F61C           Unknown Fxxx instruction (crashes in CUDA)    
    $E52    $9285   UNKNOWN  $9285           Unknown 9xxx instruction (crashes in CUDA)    
    $E54    $7D9D   ADD      VD, #9D         Add $9D to VD (VD = (VD + $9D) & 0xFF)        W:[13] R:[13]
    $E56    $495E   SNE      V9, #5E         Skip next instruction if V9 != $5E            R:[9]
    $E58    $1D05   JP       $D05            Jump to address $D05                          
>>> $E5A    $6150   LD       V1, #50         Load $50 into V1                              W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $E5C    $4AE6   SNE      VA, #E6         Skip next instruction if VA != $E6            R:[10]
>>> $E5E    $F855   LD       [I], V8         Store V0-V8 at [I], then I += 9               R:[0, 1, 2, 3, 4, 5, 6, 7, 8]
          ^-- SORTING RELATED: Register transfer involving V[0, 1, 2, 3, 4, 5, 6, 7]
    $E60    $6FCE   LD       VF, #CE         Load $CE into VF                              W:[15]
    $E62    $E7C7   UNKNOWN  $E7C7           Unknown Exxx instruction (crashes in CUDA)    
    $E64    $79A0   ADD      V9, #A0         Add $A0 to V9 (V9 = (V9 + $A0) & 0xFF)        W:[9] R:[9]
    $E66    $490C   SNE      V9, #0C         Skip next instruction if V9 != $0C            R:[9]
    $E68    $4D90   SNE      VD, #90         Skip next instruction if VD != $90            R:[13]
    $E6A    $2162   CALL     $162            Call subroutine at $162                       
>>> $E6C    $3401   SE       V4, #01         Skip next instruction if V4 == $01            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $E6E    $B38A   JP       V0, $38A        Jump to $38A + V0                             R:[0]
>>> $E70    $7528   ADD      V5, #28         Add $28 to V5 (V5 = (V5 + $28) & 0xFF)        W:[5] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
>>> $E72    $8641   OR       V6, V4          V6 = V6 OR V4, VF = 0                         W:[6, 15] R:[4, 6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $E74    $2C2C   CALL     $C2C            Call subroutine at $C2C                       
    $E76    $EF9C   UNKNOWN  $EF9C           Unknown Exxx instruction (crashes in CUDA)    
    $E78    $E1AB   UNKNOWN  $E1AB           Unknown Exxx instruction (crashes in CUDA)    
    $E7A    $EE32   UNKNOWN  $EE32           Unknown Exxx instruction (crashes in CUDA)    
    $E7C    $A4E6   LD       I, $4E6         Load $4E6 into I register                     
>>> $E7E    $7704   ADD      V7, #04         Add $04 to V7 (V7 = (V7 + $04) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $E80    $4E9D   SNE      VE, #9D         Skip next instruction if VE != $9D            R:[14]
    $E82    $926A   UNKNOWN  $926A           Unknown 9xxx instruction (crashes in CUDA)    
    $E84    $DCC3   DRW      VC, VC, #3      Draw 3-byte sprite at (VC, VC), VF = collision W:[15] R:[12]
    $E86    $834B   UNKNOWN  $834B           Unknown 8xxx instruction (crashes in CUDA)    
    $E88    $6B39   LD       VB, #39         Load $39 into VB                              W:[11]
    $E8A    $7F1E   ADD      VF, #1E         Add $1E to VF (VF = (VF + $1E) & 0xFF)        W:[15] R:[15]
    $E8C    $BD0E   JP       V0, $D0E        Jump to $D0E + V0                             R:[0]
    $E8E    $9203   UNKNOWN  $9203           Unknown 9xxx instruction (crashes in CUDA)    
    $E90    $17FD   JP       $7FD            Jump to address $7FD                          
>>> $E92    $C7E9   RND      V7, #E9         V7 = random() AND $E9                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $E94    $E27A   UNKNOWN  $E27A           Unknown Exxx instruction (crashes in CUDA)    
    $E96    $FA06   UNKNOWN  $FA06           Unknown Fxxx instruction (crashes in CUDA)    
>>> $E98    $6279   LD       V2, #79         Load $79 into V2                              W:[2]
          ^-- SORTING RELATED: Modifies sorted registers V[2]
    $E9A    $E9E3   UNKNOWN  $E9E3           Unknown Exxx instruction (crashes in CUDA)    
    $E9C    $D0A0   DRW      V0, VA, #0      Draw 0-byte sprite at (V0, VA), VF = collision W:[15] R:[0, 10]
    $E9E    $CEEF   RND      VE, #EF         VE = random() AND $EF                         W:[14]
    $EA0    $2755   CALL     $755            Call subroutine at $755                       
    $EA2    $6EC5   LD       VE, #C5         Load $C5 into VE                              W:[14]
    $EA4    $1E6D   JP       $E6D            Jump to address $E6D                          
    $EA6    $FC11   UNKNOWN  $FC11           Unknown Fxxx instruction (crashes in CUDA)    
    $EA8    $A8CB   LD       I, $8CB         Load $8CB into I register                     
    $EAA    $E885   UNKNOWN  $E885           Unknown Exxx instruction (crashes in CUDA)    
    $EAC    $A7A0   LD       I, $7A0         Load $7A0 into I register                     
    $EAE    $1996   JP       $996            Jump to address $996                          
    $EB0    $1AD5   JP       $AD5            Jump to address $AD5                          
    $EB2    $2167   CALL     $167            Call subroutine at $167                       
>>> $EB4    $8187   SUBN     V1, V8          V1 = (V8 - V1) & 0xFF, VF = NOT borrow        W:[1, 15] R:[1, 8]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
>>> $EB6    $442F   SNE      V4, #2F         Skip next instruction if V4 != $2F            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
>>> $EB8    $4557   SNE      V5, #57         Skip next instruction if V5 != $57            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $EBA    $39BF   SE       V9, #BF         Skip next instruction if V9 == $BF            R:[9]
    $EBC    $DE00   DRW      VE, V0, #0      Draw 0-byte sprite at (VE, V0), VF = collision W:[15] R:[0, 14]
    $EBE    $D852   DRW      V8, V5, #2      Draw 2-byte sprite at (V8, V5), VF = collision W:[15] R:[5, 8]
    $EC0    $FCE8   UNKNOWN  $FCE8           Unknown Fxxx instruction (crashes in CUDA)    
    $EC2    $1DC3   JP       $DC3            Jump to address $DC3                          
    $EC4    $BBE0   JP       V0, $BE0        Jump to $BE0 + V0                             R:[0]
    $EC6    $2632   CALL     $632            Call subroutine at $632                       
    $EC8    $5E2F   UNKNOWN  $5E2F           Unknown 5xxx instruction (crashes in CUDA)    
    $ECA    $9624   UNKNOWN  $9624           Unknown 9xxx instruction (crashes in CUDA)    
    $ECC    $5E0D   UNKNOWN  $5E0D           Unknown 5xxx instruction (crashes in CUDA)    
    $ECE    $0590   NOP      $0590           No operation (ignored by CUDA kernel)         
    $ED0    $9A36   UNKNOWN  $9A36           Unknown 9xxx instruction (crashes in CUDA)    
    $ED2    $AFE1   LD       I, $FE1         Load $FE1 into I register                     
    $ED4    $0A9E   NOP      $0A9E           No operation (ignored by CUDA kernel)         
>>> $ED6    $C545   RND      V5, #45         V5 = random() AND $45                         W:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $ED8    $497D   SNE      V9, #7D         Skip next instruction if V9 != $7D            R:[9]
>>> $EDA    $648F   LD       V4, #8F         Load $8F into V4                              W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $EDC    $E503   UNKNOWN  $E503           Unknown Exxx instruction (crashes in CUDA)    
    $EDE    $1E37   JP       $E37            Jump to address $E37                          
    $EE0    $D3EB   DRW      V3, VE, #B      Draw 11-byte sprite at (V3, VE), VF = collision W:[15] R:[3, 14]
    $EE2    $49A2   SNE      V9, #A2         Skip next instruction if V9 != $A2            R:[9]
    $EE4    $F6BA   UNKNOWN  $F6BA           Unknown Fxxx instruction (crashes in CUDA)    
    $EE6    $C82B   RND      V8, #2B         V8 = random() AND $2B                         W:[8]
>>> $EE8    $41EB   SNE      V1, #EB         Skip next instruction if V1 != $EB            R:[1]
          ^-- SORTING RELATED: Compares sorted registers V[1]
    $EEA    $B29E   JP       V0, $29E        Jump to $29E + V0                             R:[0]
>>> $EEC    $6154   LD       V1, #54         Load $54 into V1                              W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $EEE    $7AA7   ADD      VA, #A7         Add $A7 to VA (VA = (VA + $A7) & 0xFF)        W:[10] R:[10]
    $EF0    $9DB5   UNKNOWN  $9DB5           Unknown 9xxx instruction (crashes in CUDA)    
    $EF2    $9081   UNKNOWN  $9081           Unknown 9xxx instruction (crashes in CUDA)    
    $EF4    $B7AB   JP       V0, $7AB        Jump to $7AB + V0                             R:[0]
    $EF6    $152B   JP       $52B            Jump to address $52B                          
    $EF8    $CD3C   RND      VD, #3C         VD = random() AND $3C                         W:[13]
>>> $EFA    $9B00   SNE      VB, V0          Skip next instruction if VB != V0             R:[0, 11]
          ^-- SORTING RELATED: Compares sorted registers V[0]
>>> $EFC    $73BD   ADD      V3, #BD         Add $BD to V3 (V3 = (V3 + $BD) & 0xFF)        W:[3] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $EFE    $49A1   SNE      V9, #A1         Skip next instruction if V9 != $A1            R:[9]
    $F00    $5732   UNKNOWN  $5732           Unknown 5xxx instruction (crashes in CUDA)    
    $F02    $88EF   UNKNOWN  $88EF           Unknown 8xxx instruction (crashes in CUDA)    
    $F04    $05A6   NOP      $05A6           No operation (ignored by CUDA kernel)         
    $F06    $8EE9   UNKNOWN  $8EE9           Unknown 8xxx instruction (crashes in CUDA)    
    $F08    $7805   ADD      V8, #05         Add $05 to V8 (V8 = (V8 + $05) & 0xFF)        W:[8] R:[8]
    $F0A    $2A63   CALL     $A63            Call subroutine at $A63                       
    $F0C    $293E   CALL     $93E            Call subroutine at $93E                       
    $F0E    $A3D7   LD       I, $3D7         Load $3D7 into I register                     
    $F10    $C853   RND      V8, #53         V8 = random() AND $53                         W:[8]
    $F12    $7F71   ADD      VF, #71         Add $71 to VF (VF = (VF + $71) & 0xFF)        W:[15] R:[15]
    $F14    $A937   LD       I, $937         Load $937 into I register                     
    $F16    $6B7C   LD       VB, #7C         Load $7C into VB                              W:[11]
    $F18    $4DAD   SNE      VD, #AD         Skip next instruction if VD != $AD            R:[13]
    $F1A    $B4C9   JP       V0, $4C9        Jump to $4C9 + V0                             R:[0]
    $F1C    $FB14   UNKNOWN  $FB14           Unknown Fxxx instruction (crashes in CUDA)    
    $F1E    $A7CE   LD       I, $7CE         Load $7CE into I register                     
>>> $F20    $8552   AND      V5, V5          V5 = V5 AND V5, VF = 0                        W:[5, 15] R:[5]
          ^-- SORTING RELATED: Modifies sorted registers V[5]
    $F22    $EEB4   UNKNOWN  $EEB4           Unknown Exxx instruction (crashes in CUDA)    
    $F24    $9071   UNKNOWN  $9071           Unknown 9xxx instruction (crashes in CUDA)    
    $F26    $5E05   UNKNOWN  $5E05           Unknown 5xxx instruction (crashes in CUDA)    
>>> $F28    $4674   SNE      V6, #74         Skip next instruction if V6 != $74            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $F2A    $B825   JP       V0, $825        Jump to $825 + V0                             R:[0]
    $F2C    $4C72   SNE      VC, #72         Skip next instruction if VC != $72            R:[12]
    $F2E    $4EA6   SNE      VE, #A6         Skip next instruction if VE != $A6            R:[14]
    $F30    $3B2F   SE       VB, #2F         Skip next instruction if VB == $2F            R:[11]
>>> $F32    $328B   SE       V2, #8B         Skip next instruction if V2 == $8B            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $F34    $26D9   CALL     $6D9            Call subroutine at $6D9                       
    $F36    $BB72   JP       V0, $B72        Jump to $B72 + V0                             R:[0]
    $F38    $A637   LD       I, $637         Load $637 into I register                     
    $F3A    $0991   NOP      $0991           No operation (ignored by CUDA kernel)         
    $F3C    $3EBD   SE       VE, #BD         Skip next instruction if VE == $BD            R:[14]
    $F3E    $7E02   ADD      VE, #02         Add $02 to VE (VE = (VE + $02) & 0xFF)        W:[14] R:[14]
    $F40    $DB7A   DRW      VB, V7, #A      Draw 10-byte sprite at (VB, V7), VF = collision W:[15] R:[7, 11]
    $F42    $20D4   CALL     $0D4            Call subroutine at $0D4                       
    $F44    $86BD   UNKNOWN  $86BD           Unknown 8xxx instruction (crashes in CUDA)    
>>> $F46    $664A   LD       V6, #4A         Load $4A into V6                              W:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
    $F48    $23EC   CALL     $3EC            Call subroutine at $3EC                       
>>> $F4A    $761B   ADD      V6, #1B         Add $1B to V6 (V6 = (V6 + $1B) & 0xFF)        W:[6] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[6]
>>> $F4C    $C76F   RND      V7, #6F         V7 = random() AND $6F                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
>>> $F4E    $C1E0   RND      V1, #E0         V1 = random() AND $E0                         W:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $F50    $08EF   NOP      $08EF           No operation (ignored by CUDA kernel)         
    $F52    $500E   UNKNOWN  $500E           Unknown 5xxx instruction (crashes in CUDA)    
>>> $F54    $9130   SNE      V1, V3          Skip next instruction if V1 != V3             R:[1, 3]
          ^-- SORTING RELATED: Compares sorted registers V[1, 3]
    $F56    $BF2C   JP       V0, $F2C        Jump to $F2C + V0                             R:[0]
>>> $F58    $3247   SE       V2, #47         Skip next instruction if V2 == $47            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $F5A    $B102   JP       V0, $102        Jump to $102 + V0                             R:[0]
    $F5C    $5035   UNKNOWN  $5035           Unknown 5xxx instruction (crashes in CUDA)    
    $F5E    $DA37   DRW      VA, V3, #7      Draw 7-byte sprite at (VA, V3), VF = collision W:[15] R:[3, 10]
>>> $F60    $42D1   SNE      V2, #D1         Skip next instruction if V2 != $D1            R:[2]
          ^-- SORTING RELATED: Compares sorted registers V[2]
    $F62    $2ACF   CALL     $ACF            Call subroutine at $ACF                       
>>> $F64    $C49F   RND      V4, #9F         V4 = random() AND $9F                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $F66    $FC34   UNKNOWN  $FC34           Unknown Fxxx instruction (crashes in CUDA)    
>>> $F68    $8071   OR       V0, V7          V0 = V0 OR V7, VF = 0                         W:[0, 15] R:[0, 7]
          ^-- SORTING RELATED: Modifies sorted registers V[0]
    $F6A    $D499   DRW      V4, V9, #9      Draw 9-byte sprite at (V4, V9), VF = collision W:[15] R:[4, 9]
    $F6C    $CC52   RND      VC, #52         VC = random() AND $52                         W:[12]
    $F6E    $2C32   CALL     $C32            Call subroutine at $C32                       
    $F70    $14DF   JP       $4DF            Jump to address $4DF                          
    $F72    $D32C   DRW      V3, V2, #C      Draw 12-byte sprite at (V3, V2), VF = collision W:[15] R:[2, 3]
    $F74    $51C6   UNKNOWN  $51C6           Unknown 5xxx instruction (crashes in CUDA)    
    $F76    $7D05   ADD      VD, #05         Add $05 to VD (VD = (VD + $05) & 0xFF)        W:[13] R:[13]
>>> $F78    $8360   LD       V3, V6          Load V6 into V3                               W:[3] R:[6]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $F7A    $AF31   LD       I, $F31         Load $F31 into I register                     
    $F7C    $AAA3   LD       I, $AA3         Load $AA3 into I register                     
    $F7E    $B91B   JP       V0, $91B        Jump to $91B + V0                             R:[0]
    $F80    $E670   UNKNOWN  $E670           Unknown Exxx instruction (crashes in CUDA)    
    $F82    $A1E0   LD       I, $1E0         Load $1E0 into I register                     
    $F84    $FA41   UNKNOWN  $FA41           Unknown Fxxx instruction (crashes in CUDA)    
    $F86    $2CD8   CALL     $CD8            Call subroutine at $CD8                       
    $F88    $B421   JP       V0, $421        Jump to $421 + V0                             R:[0]
    $F8A    $B987   JP       V0, $987        Jump to $987 + V0                             R:[0]
    $F8C    $5858   UNKNOWN  $5858           Unknown 5xxx instruction (crashes in CUDA)    
    $F8E    $BBD2   JP       V0, $BD2        Jump to $BD2 + V0                             R:[0]
    $F90    $1124   JP       $124            Jump to address $124                          
>>> $F92    $C79A   RND      V7, #9A         V7 = random() AND $9A                         W:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $F94    $563E   UNKNOWN  $563E           Unknown 5xxx instruction (crashes in CUDA)    
    $F96    $4F73   SNE      VF, #73         Skip next instruction if VF != $73            R:[15]
    $F98    $1179   JP       $179            Jump to address $179                          
>>> $F9A    $358A   SE       V5, #8A         Skip next instruction if V5 == $8A            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $F9C    $A516   LD       I, $516         Load $516 into I register                     
    $F9E    $D37C   DRW      V3, V7, #C      Draw 12-byte sprite at (V3, V7), VF = collision W:[15] R:[3, 7]
    $FA0    $B105   JP       V0, $105        Jump to $105 + V0                             R:[0]
    $FA2    $EA1A   UNKNOWN  $EA1A           Unknown Exxx instruction (crashes in CUDA)    
    $FA4    $E332   UNKNOWN  $E332           Unknown Exxx instruction (crashes in CUDA)    
>>> $FA6    $839E   SHL      V3              V3 = (V3 << 1) & 0xFF, VF = MSB               W:[3, 15] R:[3]
          ^-- SORTING RELATED: Modifies sorted registers V[3]
    $FA8    $EBD0   UNKNOWN  $EBD0           Unknown Exxx instruction (crashes in CUDA)    
    $FAA    $2274   CALL     $274            Call subroutine at $274                       
    $FAC    $6EA3   LD       VE, #A3         Load $A3 into VE                              W:[14]
>>> $FAE    $4675   SNE      V6, #75         Skip next instruction if V6 != $75            R:[6]
          ^-- SORTING RELATED: Compares sorted registers V[6]
    $FB0    $81D8   UNKNOWN  $81D8           Unknown 8xxx instruction (crashes in CUDA)    
    $FB2    $9AFF   UNKNOWN  $9AFF           Unknown 9xxx instruction (crashes in CUDA)    
    $FB4    $ECDB   UNKNOWN  $ECDB           Unknown Exxx instruction (crashes in CUDA)    
>>> $FB6    $3479   SE       V4, #79         Skip next instruction if V4 == $79            R:[4]
          ^-- SORTING RELATED: Compares sorted registers V[4]
    $FB8    $2DE4   CALL     $DE4            Call subroutine at $DE4                       
    $FBA    $DB5C   DRW      VB, V5, #C      Draw 12-byte sprite at (VB, V5), VF = collision W:[15] R:[5, 11]
    $FBC    $E25D   UNKNOWN  $E25D           Unknown Exxx instruction (crashes in CUDA)    
    $FBE    $978B   UNKNOWN  $978B           Unknown 9xxx instruction (crashes in CUDA)    
>>> $FC0    $7199   ADD      V1, #99         Add $99 to V1 (V1 = (V1 + $99) & 0xFF)        W:[1] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $FC2    $8CD5   SUB      VC, VD          VC = (VC - VD) & 0xFF, VF = NOT borrow        W:[12, 15] R:[12, 13]
    $FC4    $E873   UNKNOWN  $E873           Unknown Exxx instruction (crashes in CUDA)    
    $FC6    $57B1   UNKNOWN  $57B1           Unknown 5xxx instruction (crashes in CUDA)    
>>> $FC8    $30A7   SE       V0, #A7         Skip next instruction if V0 == $A7            R:[0]
          ^-- SORTING RELATED: Compares sorted registers V[0]
    $FCA    $0289   NOP      $0289           No operation (ignored by CUDA kernel)         
    $FCC    $0E0F   NOP      $0E0F           No operation (ignored by CUDA kernel)         
>>> $FCE    $776B   ADD      V7, #6B         Add $6B to V7 (V7 = (V7 + $6B) & 0xFF)        W:[7] R:[7]
          ^-- SORTING RELATED: Modifies sorted registers V[7]
    $FD0    $50A6   UNKNOWN  $50A6           Unknown 5xxx instruction (crashes in CUDA)    
    $FD2    $A767   LD       I, $767         Load $767 into I register                     
    $FD4    $93C7   UNKNOWN  $93C7           Unknown 9xxx instruction (crashes in CUDA)    
    $FD6    $3E99   SE       VE, #99         Skip next instruction if VE == $99            R:[14]
    $FD8    $6CEF   LD       VC, #EF         Load $EF into VC                              W:[12]
    $FDA    $7E5F   ADD      VE, #5F         Add $5F to VE (VE = (VE + $5F) & 0xFF)        W:[14] R:[14]
    $FDC    $00E8   NOP      $00E8           No operation (ignored by CUDA kernel)         
    $FDE    $11E0   JP       $1E0            Jump to address $1E0                          
    $FE0    $01C3   NOP      $01C3           No operation (ignored by CUDA kernel)         
    $FE2    $B736   JP       V0, $736        Jump to $736 + V0                             R:[0]
>>> $FE4    $353C   SE       V5, #3C         Skip next instruction if V5 == $3C            R:[5]
          ^-- SORTING RELATED: Compares sorted registers V[5]
    $FE6    $B9FC   JP       V0, $9FC        Jump to $9FC + V0                             R:[0]
    $FE8    $3818   SE       V8, #18         Skip next instruction if V8 == $18            R:[8]
>>> $FEA    $81D6   SHR      V1              V1 = V1 >> 1, VF = LSB                        W:[1, 15] R:[1]
          ^-- SORTING RELATED: Modifies sorted registers V[1]
    $FEC    $F4F7   UNKNOWN  $F4F7           Unknown Fxxx instruction (crashes in CUDA)    
    $FEE    $49F4   SNE      V9, #F4         Skip next instruction if V9 != $F4            R:[9]
    $FF0    $2320   CALL     $320            Call subroutine at $320                       
    $FF2    $4E20   SNE      VE, #20         Skip next instruction if VE != $20            R:[14]
    $FF4    $5958   UNKNOWN  $5958           Unknown 5xxx instruction (crashes in CUDA)    
>>> $FF6    $8802   AND      V8, V0          V8 = V8 AND V0, VF = 0                        W:[8, 15] R:[0, 8]
          ^-- SORTING RELATED: Logical operation on V[0] (sets VF=0 in CUDA)
    $FF8    $57F8   UNKNOWN  $57F8           Unknown 5xxx instruction (crashes in CUDA)    
>>> $FFA    $C47B   RND      V4, #7B         V4 = random() AND $7B                         W:[4]
          ^-- SORTING RELATED: Modifies sorted registers V[4]
    $FFC    $ED4F   UNKNOWN  $ED4F           Unknown Exxx instruction (crashes in CUDA)    
    $FFE    $91E3   UNKNOWN  $91E3           Unknown 9xxx instruction (crashes in CUDA)    

================================================================================
REGISTER FLOW ANALYSIS
================================================================================

Register modifications (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: $21A, $316, $33C, $3C2, $3E8, $4F8, $55C, $5EA, $670, $680, $6BE, $814, $81C, $84C, $90C, $9E2, $A52, $A8C, $AFE, $B70, $C00, $CC0, $F68
  V1: Modified at 32 locations
       Addresses: $20A, $20C, $244, $2EC, $354, $394, $41A, $470, $4BC, $51E, $65A, $65C, $6B4, $6C0, $728, $762, $784, $7BC, $81C, $85A, $8C4, $A60, $A6A, $A8C, $B54, $C58, $E5A, $EB4, $EEC, $F4E, $FC0, $FEA
  V2: Modified at 32 locations
       Addresses: $206, $22C, $27C, $2AE, $2C6, $312, $37E, $3BC, $50A, $516, $5A8, $60C, $624, $66A, $6F4, $81C, $92E, $9B0, $9B6, $9C8, $A8C, $B10, $B24, $B40, $B78, $B86, $BEC, $C36, $CA0, $CDE, $D5E, $E98
  V3: Modified at 28 locations
       Addresses: $21E, $268, $2E8, $3A0, $3AC, $536, $54E, $550, $586, $66C, $6F6, $72A, $7FA, $81C, $820, $888, $A8C, $C82, $CC8, $D58, $DDE, $E02, $E0C, $E16, $E36, $EFC, $F78, $FA6
  V4: Modified at 23 locations
       Addresses: $372, $392, $3B8, $40C, $4BE, $518, $546, $584, $5DC, $690, $700, $7CE, $81C, $83E, $A8C, $AEE, $B92, $CB8, $D32, $E2A, $EDA, $F64, $FFA
  V5: Modified at 26 locations
       Addresses: $27E, $318, $31E, $350, $416, $47E, $5BE, $616, $81C, $826, $9CA, $9D6, $9DA, $A36, $A88, $A8C, $AF2, $B60, $C26, $D0C, $D94, $E08, $E26, $E70, $ED6, $F20
  V6: Modified at 21 locations
       Addresses: $26A, $31A, $406, $53E, $67A, $6D6, $81C, $83C, $87E, $8CC, $98C, $A8C, $ABC, $B9C, $CEC, $D06, $D68, $D6E, $E72, $F46, $F4A
  V7: Modified at 39 locations
       Addresses: $200, $248, $2CE, $308, $362, $3E4, $44E, $494, $496, $4FE, $62A, $6AE, $6EE, $734, $760, $76A, $794, $81C, $892, $9A6, $9D2, $9D4, $A28, $A42, $A4E, $A8C, $ADC, $B3A, $BAE, $CA4, $D18, $D26, $D80, $E32, $E7E, $E92, $F4C, $F92, $FCE

================================================================================
CONTROL FLOW ANALYSIS
================================================================================

248 control transfers detected:
  $216 → $8EB (FORWARD)
  $236 → $926 (FORWARD)
  $238 → $3CB (FORWARD)
  $242 → $9BA (FORWARD)
  $24A → $62F (FORWARD)
  $254 → $804 (FORWARD)
  $258 → $8A7 (FORWARD)
  $25C → $3B1 (FORWARD)
  $25E → $1D9 (LOOP)
  $26C → $05D (LOOP)
  $28E → $9CB (FORWARD)
  $2A0 → $AB2 (FORWARD)
  $2BE → $BD3 (FORWARD)
  $2C8 → $7D0 (FORWARD)
  $2D4 → $C67 (FORWARD)
  $2DC → $A2A (FORWARD)
  $2EE → $A86 (FORWARD)
  $324 → $12F (LOOP)
  $336 → $6FB (FORWARD)
  $340 → $8A6 (FORWARD)
  $358 → $874 (FORWARD)
  $378 → $998 (FORWARD)
  $3AE → $7AD (FORWARD)
  $3B2 → $ECB (FORWARD)
  $3E0 → $944 (FORWARD)
  $3E6 → $21F (LOOP)
  $3F2 → $6AD (FORWARD)
  $420 → $64F (FORWARD)
  $44A → $05F (LOOP)
  $44C → $213 (LOOP)
  $458 → $555 (FORWARD)
  $464 → $D5A (FORWARD)
  $466 → $1D5 (LOOP)
  $4B0 → $107 (LOOP)
  $4B8 → $822 (FORWARD)
  $4BA → $851 (FORWARD)
  $4C0 → $F1A (FORWARD)
  $4D0 → $547 (FORWARD)
  $4E6 → $1A9 (LOOP)
  $504 → $FAA (FORWARD)
  $508 → $FF2 (FORWARD)
  $520 → $A8A (FORWARD)
  $528 → $5E2 (FORWARD)
  $534 → $D2B (FORWARD)
  $558 → $2AA (LOOP)
  $574 → $837 (FORWARD)
  $57E → $1D3 (LOOP)
  $598 → $F7D (FORWARD)
  $59E → $B47 (FORWARD)
  $5A0 → $633 (FORWARD)
  $5A2 → $F0D (FORWARD)
  $5AE → $0CB (LOOP)
  $5B6 → $699 (FORWARD)
  $5E4 → $075 (LOOP)
  $5FA → $160 (LOOP)
  $604 → $21B (LOOP)
  $612 → $7C2 (FORWARD)
  $61A → $25D (LOOP)
  $632 → $419 (LOOP)
  $63A → $B88 (FORWARD)
  $648 → $BF0 (FORWARD)
  $654 → $A5D (FORWARD)
  $658 → $F2B (FORWARD)
  $664 → $F1A (FORWARD)
  $668 → $22E (LOOP)
  $66E → $788 (FORWARD)
  $688 → $081 (LOOP)
  $69A → $552 (LOOP)
  $6B2 → $99D (FORWARD)
  $6B8 → $E7C (FORWARD)
  $6D8 → $B6E (FORWARD)
  $6DA → $2DE (LOOP)
  $6E6 → $2C2 (LOOP)
  $6EC → $930 (FORWARD)
  $6FE → $1AA (LOOP)
  $704 → $941 (FORWARD)
  $70A → $F49 (FORWARD)
  $70C → $DA4 (FORWARD)
  $710 → $52C (LOOP)
  $712 → $ED9 (FORWARD)
  $714 → $6AD (LOOP)
  $718 → $CAB (FORWARD)
  $71C → $4AC (LOOP)
  $724 → $56B (LOOP)
  $738 → $D4B (FORWARD)
  $742 → $FBD (FORWARD)
  $744 → $76D (FORWARD)
  $746 → $2C7 (LOOP)
  $774 → $7BF (FORWARD)
  $77E → $76A (LOOP)
  $782 → $B21 (FORWARD)
  $7AA → $F0F (FORWARD)
  $7C0 → $4EF (LOOP)
  $7D8 → $047 (LOOP)
  $7DA → $DE7 (FORWARD)
  $7DC → $032 (LOOP)
  $7EE → $860 (FORWARD)
  $7F8 → $994 (FORWARD)
  $802 → $D31 (FORWARD)
  $80C → $144 (LOOP)
  $828 → $73B (LOOP)
  $844 → $64F (LOOP)
  $85E → $B82 (FORWARD)
  $86A → $899 (FORWARD)
  $86C → $294 (LOOP)
  $87A → $699 (LOOP)
  $88A → $D67 (FORWARD)
  $88C → $DFE (FORWARD)
  $89E → $6C9 (LOOP)
  $8B2 → $F70 (FORWARD)
  $8B4 → $A15 (FORWARD)
  $8BA → $66A (LOOP)
  $8BE → $42A (LOOP)
  $8D0 → $F25 (FORWARD)
  $8D6 → $88F (LOOP)
  $8DA → $28B (LOOP)
  $8E8 → $810 (LOOP)
  $8EC → $836 (LOOP)
  $8F2 → $FFE (FORWARD)
  $8F4 → $A3B (FORWARD)
  $8F8 → $9A0 (FORWARD)
  $8FA → $29E (LOOP)
  $8FC → $D2C (FORWARD)
  $902 → $8AC (LOOP)
  $908 → $CDC (FORWARD)
  $90A → $9FC (FORWARD)
  $914 → $37C (LOOP)
  $916 → $D54 (FORWARD)
  $93A → $658 (LOOP)
  $958 → $C36 (FORWARD)
  $95A → $5AA (LOOP)
  $978 → $0A5 (LOOP)
  $97A → $873 (LOOP)
  $982 → $43F (LOOP)
  $9C0 → $6DF (LOOP)
  $9D8 → $527 (LOOP)
  $9DC → $B7C (FORWARD)
  $9E4 → $301 (LOOP)
  $9E6 → $D3E (FORWARD)
  $9EE → $B84 (FORWARD)
  $9F8 → $475 (LOOP)
  $A02 → $C3B (FORWARD)
  $A0C → $02B (LOOP)
  $A12 → $CE3 (FORWARD)
  $A16 → $777 (LOOP)
  $A38 → $898 (LOOP)
  $A46 → $075 (LOOP)
  $A5E → $2CB (LOOP)
  $A62 → $20E (LOOP)
  $A6E → $0D9 (LOOP)
  $A70 → $76A (LOOP)
  $A96 → $E86 (FORWARD)
  $AB4 → $8C8 (LOOP)
  $AB8 → $79B (LOOP)
  $ADA → $FF5 (FORWARD)
  $AE0 → $777 (LOOP)
  $AE8 → $6FD (LOOP)
  $B08 → $DE0 (FORWARD)
  $B2E → $DAF (FORWARD)
  $B30 → $420 (LOOP)
  $B3C → $41E (LOOP)
  $B44 → $DE1 (FORWARD)
  $B4C → $AD9 (LOOP)
  $B52 → $661 (LOOP)
  $B64 → $73C (LOOP)
  $B68 → $B78 (FORWARD)
  $B98 → $177 (LOOP)
  $BA0 → $D1B (FORWARD)
  $BA8 → $132 (LOOP)
  $BB2 → $1CD (LOOP)
  $BBA → $CD3 (FORWARD)
  $BC6 → $31C (LOOP)
  $BC8 → $815 (LOOP)
  $BD8 → $F39 (FORWARD)
  $BDC → $D73 (FORWARD)
  $BE2 → $05D (LOOP)
  $C02 → $B6D (LOOP)
  $C0E → $8C0 (LOOP)
  $C10 → $2D4 (LOOP)
  $C1C → $D2A (FORWARD)
  $C2A → $230 (LOOP)
  $C48 → $FED (FORWARD)
  $C5A → $3F5 (LOOP)
  $C5E → $5C7 (LOOP)
  $C60 → $305 (LOOP)
  $C64 → $93B (LOOP)
  $C8A → $BB7 (LOOP)
  $CB4 → $9F6 (LOOP)
  $CCC → $7E1 (LOOP)
  $CD6 → $459 (LOOP)
  $CE6 → $DF6 (FORWARD)
  $CF2 → $DD3 (FORWARD)
  $CF8 → $A48 (LOOP)
  $CFA → $680 (LOOP)
  $D04 → $5B8 (LOOP)
  $D12 → $FBB (FORWARD)
  $D1A → $FED (FORWARD)
  $D1C → $7B2 (LOOP)
  $D28 → $392 (LOOP)
  $D2C → $736 (LOOP)
  $D42 → $EEE (FORWARD)
  $D4E → $2D0 (LOOP)
  $D54 → $D8F (FORWARD)
  $D5C → $FE9 (FORWARD)
  $D6C → $513 (LOOP)
  $D7A → $A9D (LOOP)
  $DA8 → $0BD (LOOP)
  $DD6 → $C7F (LOOP)
  $E00 → $0A0 (LOOP)
  $E10 → $9CE (LOOP)
  $E14 → $024 (LOOP)
  $E1A → $5A8 (LOOP)
  $E1C → $EFE (FORWARD)
  $E1E → $33D (LOOP)
  $E22 → $199 (LOOP)
  $E30 → $EF4 (FORWARD)
  $E3A → $453 (LOOP)
  $E3E → $1AA (LOOP)
  $E42 → $4B3 (LOOP)
  $E44 → $31C (LOOP)
  $E58 → $D05 (LOOP)
  $E6A → $162 (LOOP)
  $E74 → $C2C (LOOP)
  $E90 → $7FD (LOOP)
  $EA0 → $755 (LOOP)
  $EA4 → $E6D (LOOP)
  $EAE → $996 (LOOP)
  $EB0 → $AD5 (LOOP)
  $EB2 → $167 (LOOP)
  $EC2 → $DC3 (LOOP)
  $EC6 → $632 (LOOP)
  $EDE → $E37 (LOOP)
  $EF6 → $52B (LOOP)
  $F0A → $A63 (LOOP)
  $F0C → $93E (LOOP)
  $F34 → $6D9 (LOOP)
  $F42 → $0D4 (LOOP)
  $F48 → $3EC (LOOP)
  $F62 → $ACF (LOOP)
  $F6E → $C32 (LOOP)
  $F70 → $4DF (LOOP)
  $F86 → $CD8 (LOOP)
  $F90 → $124 (LOOP)
  $F98 → $179 (LOOP)
  $FAA → $274 (LOOP)
  $FB8 → $DE4 (LOOP)
  $FDE → $1E0 (LOOP)
  $FF0 → $320 (LOOP)

================================================================================
SORTING INSTRUCTION ANALYSIS
================================================================================

333 instructions identified as sorting-related:

Modifies sorted registers V[7]: 37 instructions
  $200: RND  V7, #D2      ; V7 = random() AND $D2[Writes:[7] ]
  $248: RND  V7, #29      ; V7 = random() AND $29[Writes:[7] ]
  $2CE: RND  V7, #DC      ; V7 = random() AND $DC[Writes:[7] ]
  $308: LD   V7, #69      ; Load $69 into V7[Writes:[7] ]
  $362: LD   V7, #7A      ; Load $7A into V7[Writes:[7] ]
  $3E4: ADD  V7, #4B      ; Add $4B to V7 (V7 = (V7 + $4B) & 0xFF)[Writes:[7] Reads:[7]]
  $44E: LD   V7, #D4      ; Load $D4 into V7[Writes:[7] ]
  $494: RND  V7, #55      ; V7 = random() AND $55[Writes:[7] ]
  $496: ADD  V7, #B4      ; Add $B4 to V7 (V7 = (V7 + $B4) & 0xFF)[Writes:[7] Reads:[7]]
  $4FE: OR   V7, VD       ; V7 = V7 OR VD, VF = 0[Writes:[7, 15] Reads:[7, 13]]
  $62A: ADD  V7, VA       ; V7 = (V7 + VA) & 0xFF, VF = carry[Writes:[7, 15] Reads:[7, 10]]
  $6AE: RND  V7, #97      ; V7 = random() AND $97[Writes:[7] ]
  $6EE: ADD  V7, #49      ; Add $49 to V7 (V7 = (V7 + $49) & 0xFF)[Writes:[7] Reads:[7]]
  $734: ADD  V7, #8E      ; Add $8E to V7 (V7 = (V7 + $8E) & 0xFF)[Writes:[7] Reads:[7]]
  $760: RND  V7, #94      ; V7 = random() AND $94[Writes:[7] ]
  $76A: RND  V7, #8F      ; V7 = random() AND $8F[Writes:[7] ]
  $794: SUBN V7, V4       ; V7 = (V4 - V7) & 0xFF, VF = NOT borrow[Writes:[7, 15] Reads:[4, 7]]
  $892: LD   V7, #27      ; Load $27 into V7[Writes:[7] ]
  $9A6: ADD  V7, #A6      ; Add $A6 to V7 (V7 = (V7 + $A6) & 0xFF)[Writes:[7] Reads:[7]]
  $9D2: ADD  V7, #E7      ; Add $E7 to V7 (V7 = (V7 + $E7) & 0xFF)[Writes:[7] Reads:[7]]
  $9D4: SHL  V7           ; V7 = (V7 << 1) & 0xFF, VF = MSB[Writes:[7, 15] Reads:[7]]
  $A28: LD   V7, #CC      ; Load $CC into V7[Writes:[7] ]
  $A42: LD   V7, #AE      ; Load $AE into V7[Writes:[7] ]
  $A4E: LD   V7, #FC      ; Load $FC into V7[Writes:[7] ]
  $ADC: RND  V7, #1F      ; V7 = random() AND $1F[Writes:[7] ]
  $B3A: ADD  V7, #8B      ; Add $8B to V7 (V7 = (V7 + $8B) & 0xFF)[Writes:[7] Reads:[7]]
  $BAE: LD   V7, #BF      ; Load $BF into V7[Writes:[7] ]
  $CA4: AND  V7, V0       ; V7 = V7 AND V0, VF = 0[Writes:[7, 15] Reads:[0, 7]]
  $D18: ADD  V7, #51      ; Add $51 to V7 (V7 = (V7 + $51) & 0xFF)[Writes:[7] Reads:[7]]
  $D26: RND  V7, #0E      ; V7 = random() AND $0E[Writes:[7] ]
  $D80: LD   V7, #44      ; Load $44 into V7[Writes:[7] ]
  $E32: AND  V7, V4       ; V7 = V7 AND V4, VF = 0[Writes:[7, 15] Reads:[4, 7]]
  $E7E: ADD  V7, #04      ; Add $04 to V7 (V7 = (V7 + $04) & 0xFF)[Writes:[7] Reads:[7]]
  $E92: RND  V7, #E9      ; V7 = random() AND $E9[Writes:[7] ]
  $F4C: RND  V7, #6F      ; V7 = random() AND $6F[Writes:[7] ]
  $F92: RND  V7, #9A      ; V7 = random() AND $9A[Writes:[7] ]
  $FCE: ADD  V7, #6B      ; Add $6B to V7 (V7 = (V7 + $6B) & 0xFF)[Writes:[7] Reads:[7]]

Modifies sorted registers V[2]: 30 instructions
  $206: LD   V2, #A4      ; Load $A4 into V2[Writes:[2] ]
  $22C: ADD  V2, #31      ; Add $31 to V2 (V2 = (V2 + $31) & 0xFF)[Writes:[2] Reads:[2]]
  $27C: LD   V2, #B2      ; Load $B2 into V2[Writes:[2] ]
  $2AE: LD   V2, VC       ; Load VC into V2[Writes:[2] Reads:[12]]
  $2C6: OR   V2, VE       ; V2 = V2 OR VE, VF = 0[Writes:[2, 15] Reads:[2, 14]]
  $312: ADD  V2, #A8      ; Add $A8 to V2 (V2 = (V2 + $A8) & 0xFF)[Writes:[2] Reads:[2]]
  $37E: SHR  V2           ; V2 = V2 >> 1, VF = LSB[Writes:[2, 15] Reads:[2]]
  $3BC: SUB  V2, V8       ; V2 = (V2 - V8) & 0xFF, VF = NOT borrow[Writes:[2, 15] Reads:[2, 8]]
  $50A: LD   V2, #B2      ; Load $B2 into V2[Writes:[2] ]
  $516: ADD  V2, #7A      ; Add $7A to V2 (V2 = (V2 + $7A) & 0xFF)[Writes:[2] Reads:[2]]
  $5A8: ADD  V2, #71      ; Add $71 to V2 (V2 = (V2 + $71) & 0xFF)[Writes:[2] Reads:[2]]
  $60C: LD   V2, #A6      ; Load $A6 into V2[Writes:[2] ]
  $624: RND  V2, #D1      ; V2 = random() AND $D1[Writes:[2] ]
  $66A: LD   V2, #08      ; Load $08 into V2[Writes:[2] ]
  $6F4: ADD  V2, #1E      ; Add $1E to V2 (V2 = (V2 + $1E) & 0xFF)[Writes:[2] Reads:[2]]
  $92E: LD   V2, #5C      ; Load $5C into V2[Writes:[2] ]
  $9B0: OR   V2, V3       ; V2 = V2 OR V3, VF = 0[Writes:[2, 15] Reads:[2, 3]]
  $9B6: RND  V2, #A2      ; V2 = random() AND $A2[Writes:[2] ]
  $9C8: SUBN V2, V8       ; V2 = (V8 - V2) & 0xFF, VF = NOT borrow[Writes:[2, 15] Reads:[2, 8]]
  $B10: RND  V2, #36      ; V2 = random() AND $36[Writes:[2] ]
  $B24: LD   V2, #1B      ; Load $1B into V2[Writes:[2] ]
  $B40: LD   V2, #B9      ; Load $B9 into V2[Writes:[2] ]
  $B78: RND  V2, #34      ; V2 = random() AND $34[Writes:[2] ]
  $B86: RND  V2, #DB      ; V2 = random() AND $DB[Writes:[2] ]
  $BEC: ADD  V2, #6C      ; Add $6C to V2 (V2 = (V2 + $6C) & 0xFF)[Writes:[2] Reads:[2]]
  $C36: RND  V2, #8C      ; V2 = random() AND $8C[Writes:[2] ]
  $CA0: LD   V2, #06      ; Load $06 into V2[Writes:[2] ]
  $CDE: LD   V2, #3B      ; Load $3B into V2[Writes:[2] ]
  $D5E: LD   V2, #94      ; Load $94 into V2[Writes:[2] ]
  $E98: LD   V2, #79      ; Load $79 into V2[Writes:[2] ]

Modifies sorted registers V[1]: 30 instructions
  $20A: RND  V1, #1B      ; V1 = random() AND $1B[Writes:[1] ]
  $20C: ADD  V1, #70      ; Add $70 to V1 (V1 = (V1 + $70) & 0xFF)[Writes:[1] Reads:[1]]
  $244: ADD  V1, #93      ; Add $93 to V1 (V1 = (V1 + $93) & 0xFF)[Writes:[1] Reads:[1]]
  $2EC: RND  V1, #88      ; V1 = random() AND $88[Writes:[1] ]
  $354: LD   V1, V2       ; Load V2 into V1[Writes:[1] Reads:[2]]
  $394: LD   V1, #A5      ; Load $A5 into V1[Writes:[1] ]
  $41A: RND  V1, #95      ; V1 = random() AND $95[Writes:[1] ]
  $470: LD   V1, #E9      ; Load $E9 into V1[Writes:[1] ]
  $4BC: ADD  V1, #8F      ; Add $8F to V1 (V1 = (V1 + $8F) & 0xFF)[Writes:[1] Reads:[1]]
  $51E: LD   V1, #B6      ; Load $B6 into V1[Writes:[1] ]
  $65A: ADD  V1, #EE      ; Add $EE to V1 (V1 = (V1 + $EE) & 0xFF)[Writes:[1] Reads:[1]]
  $65C: LD   V1, #4A      ; Load $4A into V1[Writes:[1] ]
  $6B4: ADD  V1, #42      ; Add $42 to V1 (V1 = (V1 + $42) & 0xFF)[Writes:[1] Reads:[1]]
  $6C0: XOR  V1, VF       ; V1 = V1 XOR VF, VF = 0[Writes:[1, 15] Reads:[1, 15]]
  $728: RND  V1, #2C      ; V1 = random() AND $2C[Writes:[1] ]
  $762: ADD  V1, #00      ; Add $00 to V1 (V1 = (V1 + $00) & 0xFF)[Writes:[1] Reads:[1]]
  $784: ADD  V1, #1B      ; Add $1B to V1 (V1 = (V1 + $1B) & 0xFF)[Writes:[1] Reads:[1]]
  $7BC: ADD  V1, #23      ; Add $23 to V1 (V1 = (V1 + $23) & 0xFF)[Writes:[1] Reads:[1]]
  $85A: RND  V1, #92      ; V1 = random() AND $92[Writes:[1] ]
  $8C4: LD   V1, #FB      ; Load $FB into V1[Writes:[1] ]
  $A60: ADD  V1, #99      ; Add $99 to V1 (V1 = (V1 + $99) & 0xFF)[Writes:[1] Reads:[1]]
  $A6A: ADD  V1, #FB      ; Add $FB to V1 (V1 = (V1 + $FB) & 0xFF)[Writes:[1] Reads:[1]]
  $B54: RND  V1, #61      ; V1 = random() AND $61[Writes:[1] ]
  $C58: RND  V1, #19      ; V1 = random() AND $19[Writes:[1] ]
  $E5A: LD   V1, #50      ; Load $50 into V1[Writes:[1] ]
  $EB4: SUBN V1, V8       ; V1 = (V8 - V1) & 0xFF, VF = NOT borrow[Writes:[1, 15] Reads:[1, 8]]
  $EEC: LD   V1, #54      ; Load $54 into V1[Writes:[1] ]
  $F4E: RND  V1, #E0      ; V1 = random() AND $E0[Writes:[1] ]
  $FC0: ADD  V1, #99      ; Add $99 to V1 (V1 = (V1 + $99) & 0xFF)[Writes:[1] Reads:[1]]
  $FEA: SHR  V1           ; V1 = V1 >> 1, VF = LSB[Writes:[1, 15] Reads:[1]]

Modifies sorted registers V[0]: 21 instructions
  $21A: ADD  V0, #D6      ; Add $D6 to V0 (V0 = (V0 + $D6) & 0xFF)[Writes:[0] Reads:[0]]
  $316: ADD  V0, #97      ; Add $97 to V0 (V0 = (V0 + $97) & 0xFF)[Writes:[0] Reads:[0]]
  $33C: ADD  V0, #55      ; Add $55 to V0 (V0 = (V0 + $55) & 0xFF)[Writes:[0] Reads:[0]]
  $3C2: RND  V0, #09      ; V0 = random() AND $09[Writes:[0] ]
  $3E8: RND  V0, #CD      ; V0 = random() AND $CD[Writes:[0] ]
  $4F8: RND  V0, #07      ; V0 = random() AND $07[Writes:[0] ]
  $55C: RND  V0, #CD      ; V0 = random() AND $CD[Writes:[0] ]
  $5EA: ADD  V0, #E2      ; Add $E2 to V0 (V0 = (V0 + $E2) & 0xFF)[Writes:[0] Reads:[0]]
  $670: RND  V0, #38      ; V0 = random() AND $38[Writes:[0] ]
  $680: RND  V0, #E5      ; V0 = random() AND $E5[Writes:[0] ]
  $6BE: LD   V0, #28      ; Load $28 into V0[Writes:[0] ]
  $814: ADD  V0, #82      ; Add $82 to V0 (V0 = (V0 + $82) & 0xFF)[Writes:[0] Reads:[0]]
  $84C: RND  V0, #BE      ; V0 = random() AND $BE[Writes:[0] ]
  $90C: ADD  V0, #FB      ; Add $FB to V0 (V0 = (V0 + $FB) & 0xFF)[Writes:[0] Reads:[0]]
  $9E2: ADD  V0, #9C      ; Add $9C to V0 (V0 = (V0 + $9C) & 0xFF)[Writes:[0] Reads:[0]]
  $A52: RND  V0, #07      ; V0 = random() AND $07[Writes:[0] ]
  $AFE: RND  V0, #56      ; V0 = random() AND $56[Writes:[0] ]
  $B70: LD   V0, #F2      ; Load $F2 into V0[Writes:[0] ]
  $C00: SUBN V0, VF       ; V0 = (VF - V0) & 0xFF, VF = NOT borrow[Writes:[0, 15] Reads:[0, 15]]
  $CC0: LD   V0, #F1      ; Load $F1 into V0[Writes:[0] ]
  $F68: OR   V0, V7       ; V0 = V0 OR V7, VF = 0[Writes:[0, 15] Reads:[0, 7]]

Modifies sorted registers V[3]: 26 instructions
  $21E: RND  V3, #C5      ; V3 = random() AND $C5[Writes:[3] ]
  $268: RND  V3, #A6      ; V3 = random() AND $A6[Writes:[3] ]
  $2E8: ADD  V3, #5C      ; Add $5C to V3 (V3 = (V3 + $5C) & 0xFF)[Writes:[3] Reads:[3]]
  $3A0: ADD  V3, #BB      ; Add $BB to V3 (V3 = (V3 + $BB) & 0xFF)[Writes:[3] Reads:[3]]
  $3AC: ADD  V3, #80      ; Add $80 to V3 (V3 = (V3 + $80) & 0xFF)[Writes:[3] Reads:[3]]
  $536: RND  V3, #54      ; V3 = random() AND $54[Writes:[3] ]
  $54E: LD   V3, #57      ; Load $57 into V3[Writes:[3] ]
  $550: RND  V3, #D3      ; V3 = random() AND $D3[Writes:[3] ]
  $586: XOR  V3, V6       ; V3 = V3 XOR V6, VF = 0[Writes:[3, 15] Reads:[3, 6]]
  $66C: LD   V3, #18      ; Load $18 into V3[Writes:[3] ]
  $6F6: LD   V3, #04      ; Load $04 into V3[Writes:[3] ]
  $72A: ADD  V3, #F5      ; Add $F5 to V3 (V3 = (V3 + $F5) & 0xFF)[Writes:[3] Reads:[3]]
  $7FA: LD   V3, #67      ; Load $67 into V3[Writes:[3] ]
  $820: XOR  V3, VD       ; V3 = V3 XOR VD, VF = 0[Writes:[3, 15] Reads:[3, 13]]
  $888: ADD  V3, #2F      ; Add $2F to V3 (V3 = (V3 + $2F) & 0xFF)[Writes:[3] Reads:[3]]
  $C82: RND  V3, #45      ; V3 = random() AND $45[Writes:[3] ]
  $CC8: LD   V3, #13      ; Load $13 into V3[Writes:[3] ]
  $D58: ADD  V3, #9B      ; Add $9B to V3 (V3 = (V3 + $9B) & 0xFF)[Writes:[3] Reads:[3]]
  $DDE: RND  V3, #51      ; V3 = random() AND $51[Writes:[3] ]
  $E02: ADD  V3, #6E      ; Add $6E to V3 (V3 = (V3 + $6E) & 0xFF)[Writes:[3] Reads:[3]]
  $E0C: LD   V3, #92      ; Load $92 into V3[Writes:[3] ]
  $E16: RND  V3, #2A      ; V3 = random() AND $2A[Writes:[3] ]
  $E36: RND  V3, #4A      ; V3 = random() AND $4A[Writes:[3] ]
  $EFC: ADD  V3, #BD      ; Add $BD to V3 (V3 = (V3 + $BD) & 0xFF)[Writes:[3] Reads:[3]]
  $F78: LD   V3, V6       ; Load V6 into V3[Writes:[3] Reads:[6]]
  $FA6: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB[Writes:[3, 15] Reads:[3]]

Compares sorted registers V[3]: 19 instructions
  $226: SE   V3, #6E      ; Skip next instruction if V3 == $6E[ Reads:[3]]
  $29A: SE   V3, #B5      ; Skip next instruction if V3 == $B5[ Reads:[3]]
  $2DE: SE   V3, #5F      ; Skip next instruction if V3 == $5F[ Reads:[3]]
  $42A: SNE  V3, #54      ; Skip next instruction if V3 != $54[ Reads:[3]]
  $506: SE   V3, #D7      ; Skip next instruction if V3 == $D7[ Reads:[3]]
  $55A: SNE  VF, V3       ; Skip next instruction if VF != V3[ Reads:[3, 15]]
  $78E: SNE  V3, #4E      ; Skip next instruction if V3 != $4E[ Reads:[3]]
  $7BE: SE   V3, #22      ; Skip next instruction if V3 == $22[ Reads:[3]]
  $824: SE   VA, V3       ; Skip next instruction if VA == V3[ Reads:[3, 10]]
  $852: SE   V3, #EF      ; Skip next instruction if V3 == $EF[ Reads:[3]]
  $926: SNE  V3, #9C      ; Skip next instruction if V3 != $9C[ Reads:[3]]
  $A0E: SE   VD, V3       ; Skip next instruction if VD == V3[ Reads:[3, 13]]
  $A20: SE   V3, VA       ; Skip next instruction if V3 == VA[ Reads:[3, 10]]
  $A7E: SNE  V3, #DC      ; Skip next instruction if V3 != $DC[ Reads:[3]]
  $AD0: SNE  V3, #8B      ; Skip next instruction if V3 != $8B[ Reads:[3]]
  $B50: SNE  V3, #E5      ; Skip next instruction if V3 != $E5[ Reads:[3]]
  $B58: SNE  V3, #05      ; Skip next instruction if V3 != $05[ Reads:[3]]
  $CE2: SE   V3, #63      ; Skip next instruction if V3 == $63[ Reads:[3]]
  $D50: SE   V3, #A2      ; Skip next instruction if V3 == $A2[ Reads:[3]]

Compares sorted registers V[5]: 16 instructions
  $256: SNE  V5, #A4      ; Skip next instruction if V5 != $A4[ Reads:[5]]
  $278: SE   V5, #B9      ; Skip next instruction if V5 == $B9[ Reads:[5]]
  $28C: SNE  V5, #31      ; Skip next instruction if V5 != $31[ Reads:[5]]
  $42C: SE   V5, #94      ; Skip next instruction if V5 == $94[ Reads:[5]]
  $54A: SE   V5, #1F      ; Skip next instruction if V5 == $1F[ Reads:[5]]
  $560: SE   V5, #A9      ; Skip next instruction if V5 == $A9[ Reads:[5]]
  $622: SNE  V5, #AA      ; Skip next instruction if V5 != $AA[ Reads:[5]]
  $656: SNE  VF, V5       ; Skip next instruction if VF != V5[ Reads:[5, 15]]
  $75E: SNE  V5, #C9      ; Skip next instruction if V5 != $C9[ Reads:[5]]
  $7F6: SE   V5, #61      ; Skip next instruction if V5 == $61[ Reads:[5]]
  $AD8: SNE  V5, #72      ; Skip next instruction if V5 != $72[ Reads:[5]]
  $C0C: SNE  V5, #08      ; Skip next instruction if V5 != $08[ Reads:[5]]
  $C16: SNE  V5, #7B      ; Skip next instruction if V5 != $7B[ Reads:[5]]
  $EB8: SNE  V5, #57      ; Skip next instruction if V5 != $57[ Reads:[5]]
  $F9A: SE   V5, #8A      ; Skip next instruction if V5 == $8A[ Reads:[5]]
  $FE4: SE   V5, #3C      ; Skip next instruction if V5 == $3C[ Reads:[5]]

Compares sorted registers V[0]: 13 instructions
  $262: SNE  V0, #6B      ; Skip next instruction if V0 != $6B[ Reads:[0]]
  $274: SE   V0, #0D      ; Skip next instruction if V0 == $0D[ Reads:[0]]
  $452: SNE  V0, #79      ; Skip next instruction if V0 != $79[ Reads:[0]]
  $5AA: SE   V0, #7F      ; Skip next instruction if V0 == $7F[ Reads:[0]]
  $772: SE   V0, #57      ; Skip next instruction if V0 == $57[ Reads:[0]]
  $804: SE   V0, #D7      ; Skip next instruction if V0 == $D7[ Reads:[0]]
  $8F6: SE   V0, #35      ; Skip next instruction if V0 == $35[ Reads:[0]]
  $952: SNE  V0, #9C      ; Skip next instruction if V0 != $9C[ Reads:[0]]
  $B84: SNE  V0, #5E      ; Skip next instruction if V0 != $5E[ Reads:[0]]
  $BCA: SE   V0, #14      ; Skip next instruction if V0 == $14[ Reads:[0]]
  $E04: SE   V0, #B5      ; Skip next instruction if V0 == $B5[ Reads:[0]]
  $EFA: SNE  VB, V0       ; Skip next instruction if VB != V0[ Reads:[0, 11]]
  $FC8: SE   V0, #A7      ; Skip next instruction if V0 == $A7[ Reads:[0]]

Modifies sorted registers V[6]: 19 instructions
  $26A: RND  V6, #40      ; V6 = random() AND $40[Writes:[6] ]
  $31A: LD   V6, #C2      ; Load $C2 into V6[Writes:[6] ]
  $406: ADD  V6, #89      ; Add $89 to V6 (V6 = (V6 + $89) & 0xFF)[Writes:[6] Reads:[6]]
  $53E: LD   V6, #FC      ; Load $FC into V6[Writes:[6] ]
  $67A: RND  V6, #86      ; V6 = random() AND $86[Writes:[6] ]
  $6D6: ADD  V6, #B8      ; Add $B8 to V6 (V6 = (V6 + $B8) & 0xFF)[Writes:[6] Reads:[6]]
  $83C: LD   V6, #5C      ; Load $5C into V6[Writes:[6] ]
  $87E: LD   V6, #ED      ; Load $ED into V6[Writes:[6] ]
  $8CC: LD   V6, #35      ; Load $35 into V6[Writes:[6] ]
  $98C: ADD  V6, #2D      ; Add $2D to V6 (V6 = (V6 + $2D) & 0xFF)[Writes:[6] Reads:[6]]
  $ABC: RND  V6, #96      ; V6 = random() AND $96[Writes:[6] ]
  $B9C: ADD  V6, #A0      ; Add $A0 to V6 (V6 = (V6 + $A0) & 0xFF)[Writes:[6] Reads:[6]]
  $CEC: ADD  V6, #31      ; Add $31 to V6 (V6 = (V6 + $31) & 0xFF)[Writes:[6] Reads:[6]]
  $D06: ADD  V6, #BD      ; Add $BD to V6 (V6 = (V6 + $BD) & 0xFF)[Writes:[6] Reads:[6]]
  $D68: ADD  V6, #44      ; Add $44 to V6 (V6 = (V6 + $44) & 0xFF)[Writes:[6] Reads:[6]]
  $D6E: RND  V6, #F1      ; V6 = random() AND $F1[Writes:[6] ]
  $E72: OR   V6, V4       ; V6 = V6 OR V4, VF = 0[Writes:[6, 15] Reads:[4, 6]]
  $F46: LD   V6, #4A      ; Load $4A into V6[Writes:[6] ]
  $F4A: ADD  V6, #1B      ; Add $1B to V6 (V6 = (V6 + $1B) & 0xFF)[Writes:[6] Reads:[6]]

Modifies sorted registers V[5]: 24 instructions
  $27E: ADD  V5, #C0      ; Add $C0 to V5 (V5 = (V5 + $C0) & 0xFF)[Writes:[5] Reads:[5]]
  $318: AND  V5, VE       ; V5 = V5 AND VE, VF = 0[Writes:[5, 15] Reads:[5, 14]]
  $31E: LD   V5, V9       ; Load V9 into V5[Writes:[5] Reads:[9]]
  $350: ADD  V5, #0D      ; Add $0D to V5 (V5 = (V5 + $0D) & 0xFF)[Writes:[5] Reads:[5]]
  $416: ADD  V5, #3C      ; Add $3C to V5 (V5 = (V5 + $3C) & 0xFF)[Writes:[5] Reads:[5]]
  $47E: ADD  V5, #68      ; Add $68 to V5 (V5 = (V5 + $68) & 0xFF)[Writes:[5] Reads:[5]]
  $5BE: ADD  V5, #BD      ; Add $BD to V5 (V5 = (V5 + $BD) & 0xFF)[Writes:[5] Reads:[5]]
  $616: LD   V5, #35      ; Load $35 into V5[Writes:[5] ]
  $826: RND  V5, #9D      ; V5 = random() AND $9D[Writes:[5] ]
  $9CA: LD   V5, #CA      ; Load $CA into V5[Writes:[5] ]
  $9D6: LD   V5, #E8      ; Load $E8 into V5[Writes:[5] ]
  $9DA: LD   V5, #88      ; Load $88 into V5[Writes:[5] ]
  $A36: XOR  V5, V9       ; V5 = V5 XOR V9, VF = 0[Writes:[5, 15] Reads:[5, 9]]
  $A88: LD   V5, #C0      ; Load $C0 into V5[Writes:[5] ]
  $AF2: ADD  V5, #17      ; Add $17 to V5 (V5 = (V5 + $17) & 0xFF)[Writes:[5] Reads:[5]]
  $B60: LD   V5, #21      ; Load $21 into V5[Writes:[5] ]
  $C26: RND  V5, #70      ; V5 = random() AND $70[Writes:[5] ]
  $D0C: ADD  V5, #F5      ; Add $F5 to V5 (V5 = (V5 + $F5) & 0xFF)[Writes:[5] Reads:[5]]
  $D94: AND  V5, V3       ; V5 = V5 AND V3, VF = 0[Writes:[5, 15] Reads:[3, 5]]
  $E08: LD   V5, #63      ; Load $63 into V5[Writes:[5] ]
  $E26: RND  V5, #AE      ; V5 = random() AND $AE[Writes:[5] ]
  $E70: ADD  V5, #28      ; Add $28 to V5 (V5 = (V5 + $28) & 0xFF)[Writes:[5] Reads:[5]]
  $ED6: RND  V5, #45      ; V5 = random() AND $45[Writes:[5] ]
  $F20: AND  V5, V5       ; V5 = V5 AND V5, VF = 0[Writes:[5, 15] Reads:[5]]

Compares sorted registers V[1]: 6 instructions
  $290: SNE  V1, #15      ; Skip next instruction if V1 != $15[ Reads:[1]]
  $422: SNE  V1, #8F      ; Skip next instruction if V1 != $8F[ Reads:[1]]
  $962: SE   V1, #3D      ; Skip next instruction if V1 == $3D[ Reads:[1]]
  $A8A: SNE  V1, #6B      ; Skip next instruction if V1 != $6B[ Reads:[1]]
  $B6A: SNE  V1, #85      ; Skip next instruction if V1 != $85[ Reads:[1]]
  $EE8: SNE  V1, #EB      ; Skip next instruction if V1 != $EB[ Reads:[1]]

Compares sorted registers V[7]: 14 instructions
  $2A2: SE   V7, #8D      ; Skip next instruction if V7 == $8D[ Reads:[7]]
  $3FE: SE   V7, #6B      ; Skip next instruction if V7 == $6B[ Reads:[7]]
  $428: SE   V7, #D9      ; Skip next instruction if V7 == $D9[ Reads:[7]]
  $4B6: SNE  V7, #C0      ; Skip next instruction if V7 != $C0[ Reads:[7]]
  $4DA: SNE  V7, #D8      ; Skip next instruction if V7 != $D8[ Reads:[7]]
  $5C6: SNE  V7, #4F      ; Skip next instruction if V7 != $4F[ Reads:[7]]
  $79A: SE   V7, #0E      ; Skip next instruction if V7 == $0E[ Reads:[7]]
  $86E: SE   V7, #7B      ; Skip next instruction if V7 == $7B[ Reads:[7]]
  $998: SNE  V7, #FD      ; Skip next instruction if V7 != $FD[ Reads:[7]]
  $9CC: SNE  V7, #D2      ; Skip next instruction if V7 != $D2[ Reads:[7]]
  $A4C: SE   V7, #AA      ; Skip next instruction if V7 == $AA[ Reads:[7]]
  $BCC: SNE  V7, #1E      ; Skip next instruction if V7 != $1E[ Reads:[7]]
  $C9E: SNE  V7, #BA      ; Skip next instruction if V7 != $BA[ Reads:[7]]
  $D8C: SE   V7, #16      ; Skip next instruction if V7 == $16[ Reads:[7]]

Compares sorted registers V[0, 4]: 1 instructions
  $2B6: SE   V0, V4       ; Skip next instruction if V0 == V4[ Reads:[0, 4]]

Compares sorted registers V[6]: 15 instructions
  $314: SNE  V6, #2D      ; Skip next instruction if V6 != $2D[ Reads:[6]]
  $3CC: SNE  V6, #18      ; Skip next instruction if V6 != $18[ Reads:[6]]
  $46C: SE   V6, #CD      ; Skip next instruction if V6 == $CD[ Reads:[6]]
  $4C4: SNE  V6, #EE      ; Skip next instruction if V6 != $EE[ Reads:[6]]
  $954: SE   VE, V6       ; Skip next instruction if VE == V6[ Reads:[6, 14]]
  $B1A: SNE  V6, #D1      ; Skip next instruction if V6 != $D1[ Reads:[6]]
  $BF6: SNE  V6, #FC      ; Skip next instruction if V6 != $FC[ Reads:[6]]
  $C90: SNE  V6, #04      ; Skip next instruction if V6 != $04[ Reads:[6]]
  $CBC: SE   V6, #D8      ; Skip next instruction if V6 == $D8[ Reads:[6]]
  $CD4: SE   V6, #D7      ; Skip next instruction if V6 == $D7[ Reads:[6]]
  $CF6: SE   V6, #56      ; Skip next instruction if V6 == $56[ Reads:[6]]
  $D92: SE   V6, #17      ; Skip next instruction if V6 == $17[ Reads:[6]]
  $D9A: SE   V6, #78      ; Skip next instruction if V6 == $78[ Reads:[6]]
  $F28: SNE  V6, #74      ; Skip next instruction if V6 != $74[ Reads:[6]]
  $FAE: SNE  V6, #75      ; Skip next instruction if V6 != $75[ Reads:[6]]

Compares sorted registers V[2]: 11 instructions
  $326: SNE  V2, #C8      ; Skip next instruction if V2 != $C8[ Reads:[2]]
  $43A: SNE  V2, #AD      ; Skip next instruction if V2 != $AD[ Reads:[2]]
  $646: SNE  V2, #F0      ; Skip next instruction if V2 != $F0[ Reads:[2]]
  $684: SE   V2, #36      ; Skip next instruction if V2 == $36[ Reads:[2]]
  $71A: SE   V2, #8E      ; Skip next instruction if V2 == $8E[ Reads:[2]]
  $A84: SNE  V2, #2D      ; Skip next instruction if V2 != $2D[ Reads:[2]]
  $D38: SNE  V2, #18      ; Skip next instruction if V2 != $18[ Reads:[2]]
  $DFE: SNE  V2, #A5      ; Skip next instruction if V2 != $A5[ Reads:[2]]
  $F32: SE   V2, #8B      ; Skip next instruction if V2 == $8B[ Reads:[2]]
  $F58: SE   V2, #47      ; Skip next instruction if V2 == $47[ Reads:[2]]
  $F60: SNE  V2, #D1      ; Skip next instruction if V2 != $D1[ Reads:[2]]

Logical operation on V[1] (sets VF=0 in CUDA): 3 instructions
  $32E: AND  VE, V1       ; VE = VE AND V1, VF = 0[Writes:[14, 15] Reads:[1, 14]]
  $920: OR   VB, V1       ; VB = VB OR V1, VF = 0[Writes:[11, 15] Reads:[1, 11]]
  $A8E: OR   VB, V1       ; VB = VB OR V1, VF = 0[Writes:[11, 15] Reads:[1, 11]]

Modifies sorted registers V[4]: 21 instructions
  $372: RND  V4, #5B      ; V4 = random() AND $5B[Writes:[4] ]
  $392: ADD  V4, #35      ; Add $35 to V4 (V4 = (V4 + $35) & 0xFF)[Writes:[4] Reads:[4]]
  $3B8: ADD  V4, #E2      ; Add $E2 to V4 (V4 = (V4 + $E2) & 0xFF)[Writes:[4] Reads:[4]]
  $40C: RND  V4, #69      ; V4 = random() AND $69[Writes:[4] ]
  $4BE: RND  V4, #B4      ; V4 = random() AND $B4[Writes:[4] ]
  $518: ADD  V4, #67      ; Add $67 to V4 (V4 = (V4 + $67) & 0xFF)[Writes:[4] Reads:[4]]
  $546: ADD  V4, #37      ; Add $37 to V4 (V4 = (V4 + $37) & 0xFF)[Writes:[4] Reads:[4]]
  $584: ADD  V4, #5C      ; Add $5C to V4 (V4 = (V4 + $5C) & 0xFF)[Writes:[4] Reads:[4]]
  $5DC: LD   V4, #42      ; Load $42 into V4[Writes:[4] ]
  $690: RND  V4, #30      ; V4 = random() AND $30[Writes:[4] ]
  $700: RND  V4, #9F      ; V4 = random() AND $9F[Writes:[4] ]
  $7CE: RND  V4, #7C      ; V4 = random() AND $7C[Writes:[4] ]
  $83E: LD   V4, #0C      ; Load $0C into V4[Writes:[4] ]
  $AEE: RND  V4, #04      ; V4 = random() AND $04[Writes:[4] ]
  $B92: LD   V4, #D6      ; Load $D6 into V4[Writes:[4] ]
  $CB8: LD   V4, #6E      ; Load $6E into V4[Writes:[4] ]
  $D32: RND  V4, #72      ; V4 = random() AND $72[Writes:[4] ]
  $E2A: RND  V4, #95      ; V4 = random() AND $95[Writes:[4] ]
  $EDA: LD   V4, #8F      ; Load $8F into V4[Writes:[4] ]
  $F64: RND  V4, #9F      ; V4 = random() AND $9F[Writes:[4] ]
  $FFA: RND  V4, #7B      ; V4 = random() AND $7B[Writes:[4] ]

Compares sorted registers V[4]: 14 instructions
  $3F8: SNE  V4, V4       ; Skip next instruction if V4 != V4[ Reads:[4]]
  $456: SE   V4, #0F      ; Skip next instruction if V4 == $0F[ Reads:[4]]
  $59C: SNE  V4, #5C      ; Skip next instruction if V4 != $5C[ Reads:[4]]
  $6E2: SNE  V4, #1D      ; Skip next instruction if V4 != $1D[ Reads:[4]]
  $80A: SE   V4, #3A      ; Skip next instruction if V4 == $3A[ Reads:[4]]
  $B32: SNE  V4, #2A      ; Skip next instruction if V4 != $2A[ Reads:[4]]
  $B94: SE   V4, #18      ; Skip next instruction if V4 == $18[ Reads:[4]]
  $C24: SNE  V4, #BE      ; Skip next instruction if V4 != $BE[ Reads:[4]]
  $C96: SE   V4, #88      ; Skip next instruction if V4 == $88[ Reads:[4]]
  $CEE: SE   V4, #1B      ; Skip next instruction if V4 == $1B[ Reads:[4]]
  $DC2: SE   V4, #E2      ; Skip next instruction if V4 == $E2[ Reads:[4]]
  $E6C: SE   V4, #01      ; Skip next instruction if V4 == $01[ Reads:[4]]
  $EB6: SNE  V4, #2F      ; Skip next instruction if V4 != $2F[ Reads:[4]]
  $FB6: SE   V4, #79      ; Skip next instruction if V4 == $79[ Reads:[4]]

Arithmetic on sorted registers V[7]: 1 instructions
  $59A: ADD  VD, V7       ; VD = (VD + V7) & 0xFF, VF = carry[Writes:[13, 15] Reads:[7, 13]]

Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
  $60E: XOR  V8, V2       ; V8 = V8 XOR V2, VF = 0[Writes:[8, 15] Reads:[2, 8]]

Compares sorted registers V[2, 4]: 1 instructions
  $7D4: SE   V2, V4       ; Skip next instruction if V2 == V4[ Reads:[2, 4]]

Modifies sorted registers V[0, 1, 2, 3, 4, 5, 6, 7]: 2 instructions
  $81C: LD   VC, [I]      ; Load V0-VC from [I], then I += 13[Writes:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] ]
  $A8C: LD   VB, [I]      ; Load V0-VB from [I], then I += 12[Writes:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] ]

Compares sorted registers V[1, 4]: 1 instructions
  $88E: SNE  V4, V1       ; Skip next instruction if V4 != V1[ Reads:[1, 4]]

Arithmetic on sorted registers V[6]: 1 instructions
  $912: SUB  VF, V6       ; VF = (VF - V6) & 0xFF, VF = NOT borrow[Writes:[15] Reads:[6, 15]]

Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
  $B12: OR   VA, V3       ; VA = VA OR V3, VF = 0[Writes:[10, 15] Reads:[3, 10]]

Compares sorted registers V[5, 6]: 1 instructions
  $DCA: SNE  V6, V5       ; Skip next instruction if V6 != V5[ Reads:[5, 6]]

Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
  $E4E: XOR  VD, V5       ; VD = VD XOR V5, VF = 0[Writes:[13, 15] Reads:[5, 13]]

Register transfer involving V[0, 1, 2, 3, 4, 5, 6, 7]: 1 instructions
  $E5E: LD   [I], V8      ; Store V0-V8 at [I], then I += 9[ Reads:[0, 1, 2, 3, 4, 5, 6, 7, 8]]

Compares sorted registers V[1, 3]: 1 instructions
  $F54: SNE  V1, V3       ; Skip next instruction if V1 != V3[ Reads:[1, 3]]

Logical operation on V[0] (sets VF=0 in CUDA): 1 instructions
  $FF6: AND  V8, V0       ; V8 = V8 AND V0, VF = 0[Writes:[8, 15] Reads:[0, 8]]

================================================================================
END OF ANALYSIS
================================================================================

====================================================================================================

=== OVERALL ANALYSIS SUMMARY ===

Total ROMs analyzed: 1

AUTHENTICITY ANALYSIS:
  Genuine sorting algorithms: 0
  Coincidental consecutive values: 1
  ⚠️  NO GENUINE SORTING FOUND - All appear to be coincidental!