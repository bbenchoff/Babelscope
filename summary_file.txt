=== SORTING ROM ANALYSIS: LONGPARTIAL_B0001D01_V2-V7_L6_DES_C20_ea22a2d3.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 95 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 20

CUDA EXECUTION STATISTICS:
  Total register operations: 0
  Register reads: 11
  Register writes: 8
  Register writes per cycle: 0.400

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 20 locations
       Addresses: ['$23A', '$37A', '$3B0', '$3F0', '$424', '$4C4', '$4EA', '$610']
       ... and 12 more
  V1: Modified at 24 locations
       Addresses: ['$21E', '$2C8', '$468', '$4B4', '$53C', '$63C', '$68C', '$6B8']
       ... and 16 more
  V2: Modified at 22 locations
       Addresses: ['$200', '$258', '$2F4', '$548', '$620', '$6FA', '$7E6', '$9A0']
       ... and 14 more
  V3: Modified at 33 locations
       Addresses: ['$212', '$24C', '$270', '$334', '$34A', '$39E', '$3D0', '$3EC']
       ... and 25 more
  V4: Modified at 25 locations
       Addresses: ['$220', '$2B6', '$2FC', '$306', '$36E', '$430', '$4B2', '$546']
       ... and 17 more
  V5: Modified at 39 locations
       Addresses: ['$206', '$22E', '$25E', '$2A6', '$302', '$324', '$46C', '$4F2']
       ... and 31 more
  V6: Modified at 31 locations
       Addresses: ['$330', '$352', '$35A', '$362', '$47A', '$480', '$4D8', '$526']
       ... and 23 more
  V7: Modified at 17 locations
       Addresses: ['$234', '$242', '$304', '$386', '$4AC', '$56C', '$67A', '$760']
       ... and 9 more

CONTROL FLOW ANALYSIS:
  248 control transfers detected:
    $210 ‚Üí $539
    $21A ‚Üí $015 (LOOP)
    $236 ‚Üí $8A3
    $24E ‚Üí $C4F
    $250 ‚Üí $0E5 (LOOP)
    ... and 243 more transfers
  Potential sorting loops: 134 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  265 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 22 instructions
      $200: ADD  V2, #03      ; Add $03 to V2 (V2 = (V2 + $03) & 0xFF)
      $258: ADD  V2, #04      ; Add $04 to V2 (V2 = (V2 + $04) & 0xFF)
      $2F4: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB
      ... and 19 more
    Modifies sorted registers V[5]: 39 instructions
      $206: RND  V5, #F1      ; V5 = random() AND $F1
      $22E: RND  V5, #D6      ; V5 = random() AND $D6
      $25E: ADD  V5, #31      ; Add $31 to V5 (V5 = (V5 + $31) & 0xFF)
      ... and 36 more
    Modifies sorted registers V[3]: 33 instructions
      $212: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $24C: RND  V3, #CC      ; V3 = random() AND $CC
      $270: ADD  V3, #78      ; Add $78 to V3 (V3 = (V3 + $78) & 0xFF)
      ... and 30 more
    Compares sorted registers V[5]: 13 instructions
      $216: SNE  V5, #D1      ; Skip next instruction if V5 != $D1
      $254: SE   V5, #70      ; Skip next instruction if V5 == $70
      $39C: SE   V5, #5F      ; Skip next instruction if V5 == $5F
      ... and 10 more
    Modifies sorted registers V[4]: 25 instructions
      $220: RND  V4, #04      ; V4 = random() AND $04
      $2B6: LD   V4, #1A      ; Load $1A into V4
      $2FC: LD   V4, #AC      ; Load $AC into V4
      ... and 22 more
    Compares sorted registers V[2]: 18 instructions
      $232: SE   V2, #71      ; Skip next instruction if V2 == $71
      $25A: SE   V2, #2A      ; Skip next instruction if V2 == $2A
      $274: SNE  V2, #CB      ; Skip next instruction if V2 != $CB
      ... and 15 more
    Modifies sorted registers V[7]: 17 instructions
      $234: RND  V7, #5A      ; V7 = random() AND $5A
      $242: LD   V7, #86      ; Load $86 into V7
      $304: RND  V7, #8C      ; V7 = random() AND $8C
      ... and 14 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $2C8: OR   V1, V2       ; V1 = V1 OR V2, VF = 0
    Compares sorted registers V[4]: 12 instructions
      $2D4: SE   V4, #38      ; Skip next instruction if V4 == $38
      $366: SE   V4, #5C      ; Skip next instruction if V4 == $5C
      $3E8: SE   V4, #5B      ; Skip next instruction if V4 == $5B
      ... and 9 more
    Modifies sorted registers V[6]: 31 instructions
      $330: ADD  V6, #E3      ; Add $E3 to V6 (V6 = (V6 + $E3) & 0xFF)
      $352: ADD  V6, #82      ; Add $82 to V6 (V6 = (V6 + $82) & 0xFF)
      $35A: LD   V6, #A8      ; Load $A8 into V6
      ... and 28 more
    Compares sorted registers V[6]: 13 instructions
      $332: SNE  V6, #07      ; Skip next instruction if V6 != $07
      $3FA: SNE  V6, #D3      ; Skip next instruction if V6 != $D3
      $4DA: SE   V6, V8       ; Skip next instruction if V6 == V8
      ... and 10 more
    Compares sorted registers V[3]: 16 instructions
      $356: SE   V3, VF       ; Skip next instruction if V3 == VF
      $3C8: SNE  V3, #50      ; Skip next instruction if V3 != $50
      $4A0: SNE  V3, #CF      ; Skip next instruction if V3 != $CF
      ... and 13 more
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $37A: OR   V0, V7       ; V0 = V0 OR V7, VF = 0
      $F32: OR   V0, V7       ; V0 = V0 OR V7, VF = 0
    Register transfer involving V[4]: 1 instructions
      $424: LD   V0, V4       ; Load V4 into V0
    Compares sorted registers V[3, 5]: 2 instructions
      $494: SE   V5, V3       ; Skip next instruction if V5 == V3
      $8D8: SE   V3, V5       ; Skip next instruction if V3 == V5
    Compares sorted registers V[7]: 12 instructions
      $6E6: SE   V7, #AB      ; Skip next instruction if V7 == $AB
      $752: SE   V7, #E5      ; Skip next instruction if V7 == $E5
      $8D2: SNE  V7, #AA      ; Skip next instruction if V7 != $AA
      ... and 9 more
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $872: AND  VA, V6       ; VA = VA AND V6, VF = 0
      $9CE: OR   VC, V6       ; VC = VC OR V6, VF = 0
    Arithmetic on sorted registers V[5]: 2 instructions
      $A6E: SUBN V1, V5       ; V1 = (V5 - V1) & 0xFF, VF = NOT borrow
      $EB4: SUBN V8, V5       ; V8 = (V5 - V8) & 0xFF, VF = NOT borrow
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $BEC: OR   V8, V5       ; V8 = V8 OR V5, VF = 0
    Compares sorted registers V[3, 6]: 1 instructions
      $D00: SNE  V6, V3       ; Skip next instruction if V6 != V3
    Register transfer involving V[6]: 1 instructions
      $E6E: LD   VC, V6       ; Load V6 into VC
    Arithmetic on sorted registers V[7]: 1 instructions
      $E80: SUB  VB, V7       ; VB = (VB - V7) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 460 (25.7%)
    LD: 263 (14.7%)
    JP: 207 (11.6%)
    DRW: 127 (7.1%)
    CALL: 126 (7.0%)
    SE: 124 (6.9%)
    SNE: 117 (6.5%)
    ADD: 113 (6.3%)
    NOP: 106 (5.9%)
    RND: 95 (5.3%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 761
  Based on: 265 sorting instructions + 248 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B0420D01_V2-V7_L6_DES_C80_f159c15d.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 114 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 80

CUDA EXECUTION STATISTICS:
  Total register operations: 6
  Register reads: 34
  Register writes: 63
  Register writes per cycle: 0.787

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 21 locations
       Addresses: ['$2A6', '$2AC', '$3A6', '$4BA', '$4D6', '$4FE', '$584', '$5DC']
       ... and 13 more
  V1: Modified at 25 locations
       Addresses: ['$212', '$220', '$284', '$364', '$41E', '$51A', '$558', '$578']
       ... and 17 more
  V2: Modified at 33 locations
       Addresses: ['$208', '$242', '$2C6', '$32E', '$434', '$450', '$490', '$4E4']
       ... and 25 more
  V3: Modified at 28 locations
       Addresses: ['$37C', '$3A0', '$3D8', '$486', '$5DE', '$5F0', '$672', '$6BE']
       ... and 20 more
  V4: Modified at 22 locations
       Addresses: ['$20E', '$2CC', '$454', '$47A', '$4FC', '$650', '$740', '$750']
       ... and 14 more
  V5: Modified at 24 locations
       Addresses: ['$226', '$256', '$316', '$3F6', '$4F0', '$548', '$790', '$7C0']
       ... and 16 more
  V6: Modified at 28 locations
       Addresses: ['$268', '$270', '$2B8', '$300', '$388', '$4FA', '$632', '$6B6']
       ... and 20 more
  V7: Modified at 13 locations
       Addresses: ['$4D8', '$564', '$636', '$6E8', '$7FC', '$A92', '$AC2', '$ADE']
       ... and 5 more

CONTROL FLOW ANALYSIS:
  216 control transfers detected:
    $20C ‚Üí $EFF
    $214 ‚Üí $105 (LOOP)
    $22A ‚Üí $64B
    $236 ‚Üí $8BC
    $246 ‚Üí $152 (LOOP)
    ... and 211 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  266 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 33 instructions
      $208: RND  V2, #AF      ; V2 = random() AND $AF
      $242: ADD  V2, #57      ; Add $57 to V2 (V2 = (V2 + $57) & 0xFF)
      $2C6: ADD  V2, #4B      ; Add $4B to V2 (V2 = (V2 + $4B) & 0xFF)
      ... and 30 more
    Modifies sorted registers V[4]: 22 instructions
      $20E: LD   V4, #E2      ; Load $E2 into V4
      $2CC: ADD  V4, #43      ; Add $43 to V4 (V4 = (V4 + $43) & 0xFF)
      $454: LD   V4, #CA      ; Load $CA into V4
      ... and 19 more
    Compares sorted registers V[6]: 24 instructions
      $210: SNE  V6, #C4      ; Skip next instruction if V6 != $C4
      $2AE: SE   V6, #B6      ; Skip next instruction if V6 == $B6
      $312: SNE  V6, #CD      ; Skip next instruction if V6 != $CD
      ... and 21 more
    Modifies sorted registers V[5]: 24 instructions
      $226: RND  V5, #4B      ; V5 = random() AND $4B
      $256: AND  V5, V2       ; V5 = V5 AND V2, VF = 0
      $316: RND  V5, #38      ; V5 = random() AND $38
      ... and 21 more
    Arithmetic on sorted registers V[7]: 1 instructions
      $250: SUB  VD, V7       ; VD = (VD - V7) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[6]: 28 instructions
      $268: RND  V6, #74      ; V6 = random() AND $74
      $270: LD   V6, #89      ; Load $89 into V6
      $2B8: ADD  V6, #05      ; Add $05 to V6 (V6 = (V6 + $05) & 0xFF)
      ... and 25 more
    Compares sorted registers V[7]: 15 instructions
      $2A4: SE   V7, #F0      ; Skip next instruction if V7 == $F0
      $45C: SNE  V7, #DD      ; Skip next instruction if V7 != $DD
      $7B2: SE   V7, #9F      ; Skip next instruction if V7 == $9F
      ... and 12 more
    Compares sorted registers V[5]: 14 instructions
      $2E4: SNE  V5, #39      ; Skip next instruction if V5 != $39
      $372: SE   V5, #B9      ; Skip next instruction if V5 == $B9
      $3C0: SE   V5, #79      ; Skip next instruction if V5 == $79
      ... and 11 more
    Compares sorted registers V[3]: 15 instructions
      $352: SE   V3, #D0      ; Skip next instruction if V3 == $D0
      $44E: SNE  V3, #93      ; Skip next instruction if V3 != $93
      $520: SE   V3, #06      ; Skip next instruction if V3 == $06
      ... and 12 more
    Compares sorted registers V[4]: 13 instructions
      $36E: SNE  V4, #4D      ; Skip next instruction if V4 != $4D
      $40C: SNE  V4, #64      ; Skip next instruction if V4 != $64
      $40E: SE   V4, #64      ; Skip next instruction if V4 == $64
      ... and 10 more
    Modifies sorted registers V[3]: 28 instructions
      $37C: RND  V3, #9A      ; V3 = random() AND $9A
      $3A0: LD   V3, #17      ; Load $17 into V3
      $3D8: ADD  V3, #84      ; Add $84 to V3 (V3 = (V3 + $84) & 0xFF)
      ... and 25 more
    Compares sorted registers V[2]: 16 instructions
      $3C8: SE   V2, #36      ; Skip next instruction if V2 == $36
      $404: SNE  V2, #76      ; Skip next instruction if V2 != $76
      $4B8: SE   V2, #CC      ; Skip next instruction if V2 == $CC
      ... and 13 more
    Register transfer involving V[7]: 1 instructions
      $3E0: LD   B, V7        ; Store BCD of V7 at [I], [I+1], [I+2]
    Arithmetic on sorted registers V[5]: 1 instructions
      $4B0: SUBN V9, V5       ; V9 = (V5 - V9) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[7]: 13 instructions
      $4D8: RND  V7, #E9      ; V7 = random() AND $E9
      $564: RND  V7, #C0      ; V7 = random() AND $C0
      $636: AND  V7, V6       ; V7 = V7 AND V6, VF = 0
      ... and 10 more
    Logical operation on V[2] (sets VF=0 in CUDA): 2 instructions
      $58A: OR   VD, V2       ; VD = VD OR V2, VF = 0
      $610: XOR  V0, V2       ; V0 = V0 XOR V2, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $60A: ADD  VD, V6       ; VD = (VD + V6) & 0xFF, VF = carry
    Compares sorted registers V[2, 6]: 1 instructions
      $662: SNE  V6, V2       ; Skip next instruction if V6 != V2
    Logical operation on V[6] (sets VF=0 in CUDA): 5 instructions
      $850: AND  V0, V6       ; V0 = V0 AND V6, VF = 0
      $AE2: AND  VB, V6       ; VB = VB AND V6, VF = 0
      $B2C: XOR  VB, V6       ; VB = VB XOR V6, VF = 0
      ... and 2 more
    Register transfer involving V[6]: 1 instructions
      $858: LD   F, V6        ; I = font_address(V6 & 0xF) = 0x50 + (V6 & 0xF) * 5
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $910: AND  VE, V5       ; VE = VE AND V5, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $916: XOR  V8, V7       ; V8 = V8 XOR V7, VF = 0
    Arithmetic on sorted registers V[3]: 2 instructions
      $938: ADD  V8, V3       ; V8 = (V8 + V3) & 0xFF, VF = carry
      $A18: ADD  VC, V3       ; VC = (VC + V3) & 0xFF, VF = carry
    Register transfer involving V[2]: 1 instructions
      $A76: LD   V1, V2       ; Load V2 into V1
    Arithmetic on sorted registers V[2]: 1 instructions
      $B38: SUB  V9, V2       ; V9 = (V9 - V2) & 0xFF, VF = NOT borrow
    Register transfer involving V[4]: 1 instructions
      $B7C: LD   VA, V4       ; Load V4 into VA
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $FFC: AND  V0, V4       ; V0 = V0 AND V4, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 474 (26.5%)
    LD: 238 (13.3%)
    JP: 221 (12.3%)
    SE: 125 (7.0%)
    ADD: 118 (6.6%)
    CALL: 117 (6.5%)
    RND: 114 (6.4%)
    SNE: 114 (6.4%)
    NOP: 109 (6.1%)
    DRW: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 698
  Based on: 266 sorting instructions + 216 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B0884D01_V1-V6_L6_ASC_C90_e0e372a0.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Perfect consecutive sequence [0, 1, 2, 3, 4, 5] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 104 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [0, 1, 2, 3, 4, 5]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [1, 0, 1, 2, 3, 4, 5, 65]
  Changes: V0: 8‚Üí1, V1: 3‚Üí0, V2: 6‚Üí1, V3: 1‚Üí2, V4: 7‚Üí3, V5: 2‚Üí4, V7: 4‚Üí65
  ‚úì Correct initial test pattern detected
  Achievement cycle: 90

CUDA EXECUTION STATISTICS:
  Total register operations: 11
  Register reads: 48
  Register writes: 69
  Register writes per cycle: 0.767

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 28 locations
       Addresses: ['$2E6', '$358', '$406', '$52A', '$596', '$59C', '$5D0', '$6A4']
       ... and 20 more
  V1: Modified at 22 locations
       Addresses: ['$206', '$318', '$330', '$408', '$54A', '$5EA', '$6FC', '$74E']
       ... and 14 more
  V2: Modified at 33 locations
       Addresses: ['$202', '$248', '$26E', '$322', '$3AA', '$3C8', '$422', '$466']
       ... and 25 more
  V3: Modified at 30 locations
       Addresses: ['$24E', '$262', '$2C8', '$342', '$37A', '$436', '$440', '$448']
       ... and 22 more
  V4: Modified at 18 locations
       Addresses: ['$3B0', '$54E', '$58E', '$694', '$6A0', '$744', '$74E', '$87A']
       ... and 10 more
  V5: Modified at 29 locations
       Addresses: ['$200', '$3E0', '$446', '$44C', '$492', '$498', '$50C', '$532']
       ... and 21 more
  V6: Modified at 22 locations
       Addresses: ['$29A', '$35C', '$3BE', '$3EA', '$48C', '$48E', '$5C4', '$61A']
       ... and 14 more
  V7: Modified at 31 locations
       Addresses: ['$256', '$2F2', '$3A2', '$3A6', '$3AE', '$3BA', '$3D0', '$472']
       ... and 23 more

CONTROL FLOW ANALYSIS:
  228 control transfers detected:
    $208 ‚Üí $943
    $210 ‚Üí $89B
    $224 ‚Üí $65E
    $226 ‚Üí $E70
    $228 ‚Üí $C00
    ... and 223 more transfers
  Potential sorting loops: 133 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  258 instructions identified as sorting-related:
    Modifies sorted registers V[5]: 28 instructions
      $200: ADD  V5, #9B      ; Add $9B to V5 (V5 = (V5 + $9B) & 0xFF)
      $3E0: LD   V5, #E1      ; Load $E1 into V5
      $446: RND  V5, #E3      ; V5 = random() AND $E3
      ... and 25 more
    Modifies sorted registers V[2]: 32 instructions
      $202: LD   V2, #3D      ; Load $3D into V2
      $248: LD   V2, #BD      ; Load $BD into V2
      $26E: RND  V2, #84      ; V2 = random() AND $84
      ... and 29 more
    Modifies sorted registers V[1]: 21 instructions
      $206: RND  V1, #76      ; V1 = random() AND $76
      $318: RND  V1, #E9      ; V1 = random() AND $E9
      $330: ADD  V1, #93      ; Add $93 to V1 (V1 = (V1 + $93) & 0xFF)
      ... and 18 more
    Compares sorted registers V[2]: 17 instructions
      $212: SNE  V2, #55      ; Skip next instruction if V2 != $55
      $2E8: SNE  V2, #B6      ; Skip next instruction if V2 != $B6
      $4DE: SNE  V2, #B1      ; Skip next instruction if V2 != $B1
      ... and 14 more
    Compares sorted registers V[6]: 20 instructions
      $22C: SE   V6, #F9      ; Skip next instruction if V6 == $F9
      $276: SNE  V6, #84      ; Skip next instruction if V6 != $84
      $4EE: SNE  V6, #E5      ; Skip next instruction if V6 != $E5
      ... and 17 more
    Modifies sorted registers V[3]: 29 instructions
      $24E: ADD  V3, #35      ; Add $35 to V3 (V3 = (V3 + $35) & 0xFF)
      $262: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $2C8: LD   V3, V6       ; Load V6 into V3
      ... and 26 more
    Compares sorted registers V[4]: 9 instructions
      $260: SNE  V4, #B9      ; Skip next instruction if V4 != $B9
      $434: SNE  V4, #10      ; Skip next instruction if V4 != $10
      $598: SE   V4, #78      ; Skip next instruction if V4 == $78
      ... and 6 more
    Modifies sorted registers V[6]: 21 instructions
      $29A: LD   V6, #61      ; Load $61 into V6
      $35C: LD   V6, #D5      ; Load $D5 into V6
      $3BE: ADD  V6, #0E      ; Add $0E to V6 (V6 = (V6 + $0E) & 0xFF)
      ... and 18 more
    Compares sorted registers V[3]: 14 instructions
      $2B8: SNE  V3, #96      ; Skip next instruction if V3 != $96
      $300: SE   V3, #D4      ; Skip next instruction if V3 == $D4
      $4A6: SE   V3, #29      ; Skip next instruction if V3 == $29
      ... and 11 more
    Compares sorted registers V[5]: 19 instructions
      $31C: SNE  V5, #0A      ; Skip next instruction if V5 != $0A
      $3A4: SE   V5, #74      ; Skip next instruction if V5 == $74
      $4BA: SNE  V5, #E7      ; Skip next instruction if V5 != $E7
      ... and 16 more
    Modifies sorted registers V[4]: 17 instructions
      $3B0: OR   V4, V7       ; V4 = V4 OR V7, VF = 0
      $54E: RND  V4, #80      ; V4 = random() AND $80
      $58E: ADD  V4, #96      ; Add $96 to V4 (V4 = (V4 + $96) & 0xFF)
      ... and 14 more
    Compares sorted registers V[1]: 15 instructions
      $3CE: SE   V1, #7F      ; Skip next instruction if V1 == $7F
      $3DA: SE   V1, #AA      ; Skip next instruction if V1 == $AA
      $4C6: SE   V1, #4E      ; Skip next instruction if V1 == $4E
      ... and 12 more
    Arithmetic on sorted registers V[4]: 2 instructions
      $52A: SUB  V0, V4       ; V0 = (V0 - V4) & 0xFF, VF = NOT borrow
      $A5C: SUBN VF, V4       ; VF = (V4 - VF) & 0xFF, VF = NOT borrow
    Register transfer involving V[5]: 1 instructions
      $59C: LD   V0, V5       ; Load V5 into V0
    Register transfer involving V[2]: 1 instructions
      $62A: LD   B, V2        ; Store BCD of V2 at [I], [I+1], [I+2]
    Compares sorted registers V[3, 4]: 1 instructions
      $6BE: SE   V4, V3       ; Skip next instruction if V4 == V3
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 1 instructions
      $74E: LD   V7, [I]      ; Load V0-V7 from [I], then I += 8
    Logical operation on V[4] (sets VF=0 in CUDA): 3 instructions
      $844: XOR  VE, V4       ; VE = VE XOR V4, VF = 0
      $914: AND  V7, V4       ; V7 = V7 AND V4, VF = 0
      $EBC: OR   V9, V4       ; V9 = V9 OR V4, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $A8A: AND  V7, V3       ; V7 = V7 AND V3, VF = 0
    Register transfer involving V[4]: 1 instructions
      $BFA: LD   DT, V4       ; Load V4 into delay timer
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $C4A: XOR  VA, V2       ; VA = VA XOR V2, VF = 0
    Arithmetic on sorted registers V[5]: 2 instructions
      $D96: ADD  VB, V5       ; VB = (VB + V5) & 0xFF, VF = carry
      $F10: ADD  VF, V5       ; VF = (VF + V5) & 0xFF, VF = carry
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $DC6: AND  V9, V5       ; V9 = V9 AND V5, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $DD2: ADD  VD, V6       ; VD = (VD + V6) & 0xFF, VF = carry

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 488 (27.2%)
    LD: 229 (12.8%)
    JP: 227 (12.7%)
    ADD: 126 (7.0%)
    CALL: 115 (6.4%)
    SNE: 115 (6.4%)
    SE: 114 (6.4%)
    DRW: 112 (6.2%)
    NOP: 106 (5.9%)
    RND: 104 (5.8%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 714
  Based on: 258 sorting instructions + 228 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B0928D01_V2-V7_L6_DES_C13660_2f961508.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 103 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [165, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí165, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 13660

CUDA EXECUTION STATISTICS:
  Total register operations: 0
  Register reads: 1024
  Register writes: 2395
  Register writes per cycle: 0.175

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 31 locations
       Addresses: ['$29A', '$30C', '$42C', '$49C', '$50C', '$510', '$540', '$5A6']
       ... and 23 more
  V1: Modified at 19 locations
       Addresses: ['$408', '$648', '$674', '$71C', '$816', '$860', '$87A', '$8E2']
       ... and 11 more
  V2: Modified at 18 locations
       Addresses: ['$2E4', '$354', '$37A', '$3C0', '$46C', '$4FA', '$548', '$6CE']
       ... and 10 more
  V3: Modified at 22 locations
       Addresses: ['$2EA', '$2F8', '$456', '$4B6', '$4DC', '$598', '$692', '$6A8']
       ... and 14 more
  V4: Modified at 31 locations
       Addresses: ['$3A0', '$3BE', '$3D6', '$58C', '$658', '$6C6', '$6D2', '$744']
       ... and 23 more
  V5: Modified at 20 locations
       Addresses: ['$32A', '$386', '$3A8', '$4A4', '$554', '$57C', '$642', '$68A']
       ... and 12 more
  V6: Modified at 32 locations
       Addresses: ['$2DA', '$406', '$496', '$4D6', '$5C2', '$5D8', '$5EC', '$6AE']
       ... and 24 more
  V7: Modified at 30 locations
       Addresses: ['$212', '$2CC', '$4EA', '$50A', '$52C', '$664', '$6DE', '$72A']
       ... and 22 more

CONTROL FLOW ANALYSIS:
  201 control transfers detected:
    $20E ‚Üí $EAE
    $210 ‚Üí $FC7
    $21C ‚Üí $C58
    $224 ‚Üí $D5F
    $23E ‚Üí $978
    ... and 196 more transfers
  Potential sorting loops: 103 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  260 instructions identified as sorting-related:
    Compares sorted registers V[6]: 14 instructions
      $200: SNE  V6, #30      ; Skip next instruction if V6 != $30
      $22A: SE   V6, #AB      ; Skip next instruction if V6 == $AB
      $560: SNE  V6, #6F      ; Skip next instruction if V6 != $6F
      ... and 11 more
    Modifies sorted registers V[7]: 30 instructions
      $212: RND  V7, #44      ; V7 = random() AND $44
      $2CC: ADD  V7, #11      ; Add $11 to V7 (V7 = (V7 + $11) & 0xFF)
      $4EA: LD   V7, #61      ; Load $61 into V7
      ... and 27 more
    Compares sorted registers V[7]: 20 instructions
      $238: SNE  V7, #98      ; Skip next instruction if V7 != $98
      $24A: SE   V7, #F2      ; Skip next instruction if V7 == $F2
      $2E2: SE   V7, #81      ; Skip next instruction if V7 == $81
      ... and 17 more
    Compares sorted registers V[2]: 8 instructions
      $24E: SNE  V2, VE       ; Skip next instruction if V2 != VE
      $258: SNE  V2, #BC      ; Skip next instruction if V2 != $BC
      $30A: SE   V2, #56      ; Skip next instruction if V2 == $56
      ... and 5 more
    Compares sorted registers V[5]: 20 instructions
      $296: SNE  V5, #54      ; Skip next instruction if V5 != $54
      $358: SE   VE, V5       ; Skip next instruction if VE == V5
      $494: SE   V5, #D1      ; Skip next instruction if V5 == $D1
      ... and 17 more
    Logical operation on V[5] (sets VF=0 in CUDA): 3 instructions
      $2C2: AND  VE, V5       ; VE = VE AND V5, VF = 0
      $DB4: OR   V1, V5       ; V1 = V1 OR V5, VF = 0
      $EB4: XOR  VA, V5       ; VA = VA XOR V5, VF = 0
    Modifies sorted registers V[6]: 32 instructions
      $2DA: ADD  V6, #6B      ; Add $6B to V6 (V6 = (V6 + $6B) & 0xFF)
      $406: SHR  V6           ; V6 = V6 >> 1, VF = LSB
      $496: RND  V6, #5E      ; V6 = random() AND $5E
      ... and 29 more
    Modifies sorted registers V[2]: 17 instructions
      $2E4: ADD  V2, #82      ; Add $82 to V2 (V2 = (V2 + $82) & 0xFF)
      $354: ADD  V2, #05      ; Add $05 to V2 (V2 = (V2 + $05) & 0xFF)
      $37A: LD   V2, #01      ; Load $01 into V2
      ... and 14 more
    Modifies sorted registers V[3]: 21 instructions
      $2EA: ADD  V3, #26      ; Add $26 to V3 (V3 = (V3 + $26) & 0xFF)
      $2F8: RND  V3, #8D      ; V3 = random() AND $8D
      $456: LD   V3, #FC      ; Load $FC into V3
      ... and 18 more
    Compares sorted registers V[3]: 15 instructions
      $2FC: SNE  V3, #84      ; Skip next instruction if V3 != $84
      $38A: SNE  VA, V3       ; Skip next instruction if VA != V3
      $3CC: SNE  V3, #C7      ; Skip next instruction if V3 != $C7
      ... and 12 more
    Register transfer involving V[3]: 1 instructions
      $30C: LD   V0, V3       ; Load V3 into V0
    Modifies sorted registers V[5]: 20 instructions
      $32A: RND  V5, #7F      ; V5 = random() AND $7F
      $386: LD   V5, #67      ; Load $67 into V5
      $3A8: SUBN V5, V5       ; V5 = (V5 - V5) & 0xFF, VF = NOT borrow
      ... and 17 more
    Compares sorted registers V[4]: 22 instructions
      $39A: SNE  V4, #68      ; Skip next instruction if V4 != $68
      $47A: SE   V4, #79      ; Skip next instruction if V4 == $79
      $552: SNE  V4, #99      ; Skip next instruction if V4 != $99
      ... and 19 more
    Modifies sorted registers V[4]: 30 instructions
      $3A0: ADD  V4, #F0      ; Add $F0 to V4 (V4 = (V4 + $F0) & 0xFF)
      $3BE: RND  V4, #29      ; V4 = random() AND $29
      $3D6: RND  V4, #1E      ; V4 = random() AND $1E
      ... and 27 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $5BC: SUB  V0, V4       ; V0 = (V0 - V4) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $8E2: OR   V1, V3       ; V1 = V1 OR V3, VF = 0
    Register transfer involving V[4]: 1 instructions
      $928: LD   VE, V4       ; Load V4 into VE
    Arithmetic on sorted registers V[3]: 1 instructions
      $B7A: SUB  VC, V3       ; VC = (VC - V3) & 0xFF, VF = NOT borrow
    Compares sorted registers V[5, 7]: 1 instructions
      $CF0: SNE  V5, V7       ; Skip next instruction if V5 != V7
    Modifies sorted registers V[2, 3, 4]: 1 instructions
      $D5A: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5
    Arithmetic on sorted registers V[7]: 1 instructions
      $F22: ADD  VD, V7       ; VD = (VD + V7) & 0xFF, VF = carry

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 472 (26.3%)
    LD: 251 (14.0%)
    JP: 209 (11.7%)
    SNE: 126 (7.0%)
    DRW: 124 (6.9%)
    ADD: 122 (6.8%)
    SE: 121 (6.8%)
    NOP: 116 (6.5%)
    RND: 103 (5.7%)
    CALL: 102 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 662
  Based on: 260 sorting instructions + 201 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1406D01_V2-V7_L6_ASC_C480_aa88c556.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [47, 48, 49, 50, 51, 52] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [47, 48, 49, 50, 51, 52] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 106 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [47, 48, 49, 50, 51, 52]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [45, 177, 47, 48, 49, 50, 51, 52]
  Changes: V0: 8‚Üí45, V1: 3‚Üí177, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí52
  ‚úì Correct initial test pattern detected
  Achievement cycle: 480

CUDA EXECUTION STATISTICS:
  Total register operations: 32
  Register reads: 243
  Register writes: 344
  Register writes per cycle: 0.717

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$22A', '$6A0', '$736', '$77A', '$796', '$7DE', '$816', '$81C']
       ... and 15 more
  V1: Modified at 32 locations
       Addresses: ['$250', '$256', '$28A', '$2C2', '$2C8', '$3A8', '$474', '$496']
       ... and 24 more
  V2: Modified at 19 locations
       Addresses: ['$20E', '$318', '$398', '$41C', '$5E6', '$610', '$62A', '$67E']
       ... and 11 more
  V3: Modified at 30 locations
       Addresses: ['$20C', '$2BA', '$36A', '$420', '$4D2', '$516', '$574', '$584']
       ... and 22 more
  V4: Modified at 23 locations
       Addresses: ['$286', '$2BE', '$326', '$50C', '$5CE', '$5E2', '$5F4', '$69C']
       ... and 15 more
  V5: Modified at 29 locations
       Addresses: ['$210', '$290', '$2C6', '$314', '$316', '$36C', '$452', '$4E8']
       ... and 21 more
  V6: Modified at 13 locations
       Addresses: ['$33C', '$57A', '$596', '$6AA', '$85A', '$8E8', '$8EE', '$926']
       ... and 5 more
  V7: Modified at 25 locations
       Addresses: ['$230', '$2EA', '$2FA', '$408', '$4DA', '$580', '$58A', '$5BC']
       ... and 17 more

CONTROL FLOW ANALYSIS:
  235 control transfers detected:
    $208 ‚Üí $7A1
    $21E ‚Üí $57F
    $224 ‚Üí $79B
    $26A ‚Üí $573
    $272 ‚Üí $34B
    ... and 230 more transfers
  Potential sorting loops: 128 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  239 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 30 instructions
      $20C: ADD  V3, #09      ; Add $09 to V3 (V3 = (V3 + $09) & 0xFF)
      $2BA: LD   V3, #46      ; Load $46 into V3
      $36A: ADD  V3, #4B      ; Add $4B to V3 (V3 = (V3 + $4B) & 0xFF)
      ... and 27 more
    Modifies sorted registers V[2]: 19 instructions
      $20E: LD   V2, #33      ; Load $33 into V2
      $318: ADD  V2, #AF      ; Add $AF to V2 (V2 = (V2 + $AF) & 0xFF)
      $398: ADD  V2, #12      ; Add $12 to V2 (V2 = (V2 + $12) & 0xFF)
      ... and 16 more
    Modifies sorted registers V[5]: 29 instructions
      $210: RND  V5, #73      ; V5 = random() AND $73
      $290: RND  V5, #67      ; V5 = random() AND $67
      $2C6: LD   V5, #96      ; Load $96 into V5
      ... and 26 more
    Compares sorted registers V[4]: 20 instructions
      $214: SNE  V4, #9F      ; Skip next instruction if V4 != $9F
      $2AA: SE   V4, #89      ; Skip next instruction if V4 == $89
      $310: SNE  V4, #93      ; Skip next instruction if V4 != $93
      ... and 17 more
    Modifies sorted registers V[7]: 25 instructions
      $230: RND  V7, #2A      ; V7 = random() AND $2A
      $2EA: LD   V7, #33      ; Load $33 into V7
      $2FA: LD   V7, #F0      ; Load $F0 into V7
      ... and 22 more
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $246: OR   VA, V5       ; VA = VA OR V5, VF = 0
      $C64: AND  V0, V5       ; V0 = V0 AND V5, VF = 0
    Compares sorted registers V[2]: 16 instructions
      $248: SNE  V2, #3C      ; Skip next instruction if V2 != $3C
      $28C: SE   V2, #D8      ; Skip next instruction if V2 == $D8
      $30C: SE   V2, #BF      ; Skip next instruction if V2 == $BF
      ... and 13 more
    Modifies sorted registers V[4]: 23 instructions
      $286: ADD  V4, #61      ; Add $61 to V4 (V4 = (V4 + $61) & 0xFF)
      $2BE: ADD  V4, #4F      ; Add $4F to V4 (V4 = (V4 + $4F) & 0xFF)
      $326: RND  V4, #74      ; V4 = random() AND $74
      ... and 20 more
    Compares sorted registers V[7]: 15 instructions
      $2F4: SE   V7, #82      ; Skip next instruction if V7 == $82
      $368: SE   V7, #1A      ; Skip next instruction if V7 == $1A
      $38A: SE   V7, #3D      ; Skip next instruction if V7 == $3D
      ... and 12 more
    Modifies sorted registers V[6]: 13 instructions
      $33C: ADD  V6, #D7      ; Add $D7 to V6 (V6 = (V6 + $D7) & 0xFF)
      $57A: ADD  V6, #00      ; Add $00 to V6 (V6 = (V6 + $00) & 0xFF)
      $596: ADD  V6, #2E      ; Add $2E to V6 (V6 = (V6 + $2E) & 0xFF)
      ... and 10 more
    Arithmetic on sorted registers V[5]: 2 instructions
      $35A: ADD  V9, V5       ; V9 = (V9 + V5) & 0xFF, VF = carry
      $DA0: SUB  V1, V5       ; V1 = (V1 - V5) & 0xFF, VF = NOT borrow
    Compares sorted registers V[5]: 11 instructions
      $360: SE   V5, #21      ; Skip next instruction if V5 == $21
      $3F6: SNE  V5, #C7      ; Skip next instruction if V5 != $C7
      $51A: SE   V5, #C2      ; Skip next instruction if V5 == $C2
      ... and 8 more
    Compares sorted registers V[3]: 9 instructions
      $386: SE   V3, #FC      ; Skip next instruction if V3 == $FC
      $5D8: SE   V3, #E9      ; Skip next instruction if V3 == $E9
      $774: SNE  V3, #4D      ; Skip next instruction if V3 != $4D
      ... and 6 more
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $3DA: OR   VA, V7       ; VA = VA OR V7, VF = 0
      $552: XOR  V1, V7       ; V1 = V1 XOR V7, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $4B6: ADD  V8, V4       ; V8 = (V8 + V4) & 0xFF, VF = carry
    Compares sorted registers V[6]: 16 instructions
      $53E: SE   V6, #05      ; Skip next instruction if V6 == $05
      $60A: SNE  V6, #BB      ; Skip next instruction if V6 != $BB
      $6AC: SE   V6, #84      ; Skip next instruction if V6 == $84
      ... and 13 more
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $6BA: AND  VD, V3       ; VD = VD AND V3, VF = 0
    Register transfer involving V[5]: 1 instructions
      $95A: LD   V1, V5       ; Load V5 into V1
    Arithmetic on sorted registers V[6]: 1 instructions
      $A36: ADD  V0, V6       ; V0 = (V0 + V6) & 0xFF, VF = carry
    Arithmetic on sorted registers V[2]: 1 instructions
      $C04: SUB  VA, V2       ; VA = (VA - V2) & 0xFF, VF = NOT borrow
    Register transfer involving V[6]: 1 instructions
      $C16: LD   V0, V6       ; Load V6 into V0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $D5C: AND  V8, V4       ; V8 = V8 AND V4, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 461 (25.7%)
    LD: 234 (13.1%)
    JP: 231 (12.9%)
    ADD: 127 (7.1%)
    SE: 125 (7.0%)
    CALL: 119 (6.6%)
    SNE: 117 (6.5%)
    NOP: 115 (6.4%)
    DRW: 107 (6.0%)
    RND: 106 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 709
  Based on: 239 sorting instructions + 235 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1493D01_V2-V7_L6_DES_C90_8f324a15.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 97 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 90

CUDA EXECUTION STATISTICS:
  Total register operations: 4
  Register reads: 39
  Register writes: 66
  Register writes per cycle: 0.733

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 17 locations
       Addresses: ['$26A', '$296', '$5B6', '$616', '$64C', '$6A4', '$7B8', '$840']
       ... and 9 more
  V1: Modified at 21 locations
       Addresses: ['$318', '$378', '$3FE', '$410', '$446', '$494', '$60E', '$612']
       ... and 13 more
  V2: Modified at 20 locations
       Addresses: ['$23A', '$2D2', '$37A', '$3D0', '$6C8', '$810', '$856', '$A08']
       ... and 12 more
  V3: Modified at 20 locations
       Addresses: ['$26C', '$2C0', '$2CC', '$2CE', '$2DC', '$2FA', '$39A', '$3AC']
       ... and 12 more
  V4: Modified at 24 locations
       Addresses: ['$312', '$3B0', '$3FA', '$418', '$576', '$6AC', '$702', '$738']
       ... and 16 more
  V5: Modified at 27 locations
       Addresses: ['$23C', '$25C', '$278', '$2B2', '$456', '$502', '$5C0', '$63E']
       ... and 19 more
  V6: Modified at 24 locations
       Addresses: ['$218', '$29E', '$336', '$3FC', '$40A', '$476', '$4C4', '$4EA']
       ... and 16 more
  V7: Modified at 31 locations
       Addresses: ['$252', '$344', '$34E', '$4BC', '$608', '$77E', '$804', '$8A4']
       ... and 23 more

CONTROL FLOW ANALYSIS:
  227 control transfers detected:
    $232 ‚Üí $707
    $248 ‚Üí $E16
    $256 ‚Üí $26B
    $258 ‚Üí $4FC
    $260 ‚Üí $D70
    ... and 222 more transfers
  Potential sorting loops: 125 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  240 instructions identified as sorting-related:
    Modifies sorted registers V[6]: 24 instructions
      $218: ADD  V6, #37      ; Add $37 to V6 (V6 = (V6 + $37) & 0xFF)
      $29E: OR   V6, VD       ; V6 = V6 OR VD, VF = 0
      $336: RND  V6, #F6      ; V6 = random() AND $F6
      ... and 21 more
    Compares sorted registers V[5]: 17 instructions
      $220: SNE  V5, #36      ; Skip next instruction if V5 != $36
      $298: SNE  V5, #26      ; Skip next instruction if V5 != $26
      $2A0: SNE  V5, #C8      ; Skip next instruction if V5 != $C8
      ... and 14 more
    Compares sorted registers V[2]: 13 instructions
      $238: SE   V2, #AB      ; Skip next instruction if V2 == $AB
      $46C: SNE  V2, #B2      ; Skip next instruction if V2 != $B2
      $4F8: SNE  V2, #11      ; Skip next instruction if V2 != $11
      ... and 10 more
    Modifies sorted registers V[2]: 20 instructions
      $23A: XOR  V2, V5       ; V2 = V2 XOR V5, VF = 0
      $2D2: RND  V2, #86      ; V2 = random() AND $86
      $37A: LD   V2, #15      ; Load $15 into V2
      ... and 17 more
    Modifies sorted registers V[5]: 27 instructions
      $23C: LD   V5, #06      ; Load $06 into V5
      $25C: ADD  V5, #CF      ; Add $CF to V5 (V5 = (V5 + $CF) & 0xFF)
      $278: RND  V5, #10      ; V5 = random() AND $10
      ... and 24 more
    Compares sorted registers V[6]: 15 instructions
      $24E: SE   V6, #80      ; Skip next instruction if V6 == $80
      $2B4: SE   V6, #BE      ; Skip next instruction if V6 == $BE
      $5AA: SNE  V6, #8E      ; Skip next instruction if V6 != $8E
      ... and 12 more
    Modifies sorted registers V[7]: 31 instructions
      $252: ADD  V7, #3F      ; Add $3F to V7 (V7 = (V7 + $3F) & 0xFF)
      $344: ADD  V7, #9A      ; Add $9A to V7 (V7 = (V7 + $9A) & 0xFF)
      $34E: LD   V7, #90      ; Load $90 into V7
      ... and 28 more
    Compares sorted registers V[7]: 14 instructions
      $262: SE   V7, #97      ; Skip next instruction if V7 == $97
      $2B8: SNE  V7, #D4      ; Skip next instruction if V7 != $D4
      $42A: SNE  V7, #84      ; Skip next instruction if V7 != $84
      ... and 11 more
    Modifies sorted registers V[3]: 20 instructions
      $26C: LD   V3, #56      ; Load $56 into V3
      $2C0: ADD  V3, #79      ; Add $79 to V3 (V3 = (V3 + $79) & 0xFF)
      $2CC: LD   V3, #3E      ; Load $3E into V3
      ... and 17 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $270: ADD  VC, V6       ; VC = (VC + V6) & 0xFF, VF = carry
    Compares sorted registers V[4]: 17 instructions
      $2E4: SE   V4, #3F      ; Skip next instruction if V4 == $3F
      $33A: SNE  V4, #CF      ; Skip next instruction if V4 != $CF
      $4C6: SE   V4, #EF      ; Skip next instruction if V4 == $EF
      ... and 14 more
    Modifies sorted registers V[4]: 24 instructions
      $312: RND  V4, #03      ; V4 = random() AND $03
      $3B0: LD   V4, #F0      ; Load $F0 into V4
      $3FA: ADD  V4, #BA      ; Add $BA to V4 (V4 = (V4 + $BA) & 0xFF)
      ... and 21 more
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $35C: XOR  VE, V6       ; VE = VE XOR V6, VF = 0
    Arithmetic on sorted registers V[3]: 2 instructions
      $446: SUBN V1, V3       ; V1 = (V3 - V1) & 0xFF, VF = NOT borrow
      $4CE: SUB  VC, V3       ; VC = (VC - V3) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3]: 7 instructions
      $4AE: SNE  V3, #4E      ; Skip next instruction if V3 != $4E
      $64A: SE   V3, #7D      ; Skip next instruction if V3 == $7D
      $7D8: SNE  V3, #A1      ; Skip next instruction if V3 != $A1
      ... and 4 more
    Register transfer involving V[2, 3, 4, 5, 6]: 1 instructions
      $7E0: LD   [I], V6      ; Store V0-V6 at [I], then I += 7
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $902: OR   V0, V2       ; V0 = V0 OR V2, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $98E: SUB  VC, V2       ; VC = (VC - V2) & 0xFF, VF = NOT borrow
    Register transfer involving V[5]: 1 instructions
      $A74: LD   V8, V5       ; Load V5 into V8
    Register transfer involving V[2, 3]: 1 instructions
      $AB6: LD   [I], V3      ; Store V0-V3 at [I], then I += 4
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $CE2: AND  VC, V5       ; VC = VC AND V5, VF = 0
      $FA8: XOR  VA, V5       ; VA = VA XOR V5, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 486 (27.1%)
    JP: 237 (13.2%)
    LD: 226 (12.6%)
    SE: 128 (7.1%)
    SNE: 123 (6.9%)
    DRW: 120 (6.7%)
    NOP: 115 (6.4%)
    ADD: 105 (5.9%)
    CALL: 103 (5.7%)
    RND: 97 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 694
  Based on: 240 sorting instructions + 227 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1535D01_V0-V5_L6_ASC_C9490_13e08c41.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [45, 46, 47, 48, 49, 50] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [45, 46, 47, 48, 49, 50] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 120 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [45, 46, 47, 48, 49, 50]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V0-V5
  Start position: V0
  End position: V5
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [45, 46, 47, 48, 49, 50, 129, 52]
  Changes: V0: 8‚Üí45, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí129, V7: 4‚Üí52
  ‚úì Correct initial test pattern detected
  Achievement cycle: 9490

CUDA EXECUTION STATISTICS:
  Total register operations: 27
  Register reads: 5339
  Register writes: 14201
  Register writes per cycle: 1.496

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 18 locations
       Addresses: ['$288', '$39A', '$45A', '$4D0', '$518', '$55A', '$5C2', '$65C']
       ... and 10 more
  V1: Modified at 33 locations
       Addresses: ['$426', '$430', '$500', '$590', '$654', '$690', '$6E0', '$70C']
       ... and 25 more
  V2: Modified at 27 locations
       Addresses: ['$216', '$294', '$2E6', '$2EA', '$320', '$374', '$498', '$570']
       ... and 19 more
  V3: Modified at 25 locations
       Addresses: ['$2C2', '$402', '$470', '$4BA', '$4D2', '$4E8', '$5B2', '$5CE']
       ... and 17 more
  V4: Modified at 22 locations
       Addresses: ['$40A', '$422', '$5B0', '$5D0', '$600', '$688', '$768', '$7D4']
       ... and 14 more
  V5: Modified at 32 locations
       Addresses: ['$22A', '$246', '$37E', '$3AC', '$462', '$478', '$4B6', '$4CE']
       ... and 24 more
  V6: Modified at 25 locations
       Addresses: ['$286', '$2AE', '$35C', '$37A', '$39E', '$528', '$53E', '$572']
       ... and 17 more
  V7: Modified at 28 locations
       Addresses: ['$262', '$30C', '$31E', '$448', '$494', '$4E6', '$5A8', '$5E0']
       ... and 20 more

CONTROL FLOW ANALYSIS:
  225 control transfers detected:
    $20A ‚Üí $109 (LOOP)
    $20C ‚Üí $3C5
    $21E ‚Üí $BC0
    $236 ‚Üí $814
    $238 ‚Üí $954
    ... and 220 more transfers
  Potential sorting loops: 122 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  252 instructions identified as sorting-related:
    Compares sorted registers V[4]: 20 instructions
      $202: SE   VE, V4       ; Skip next instruction if VE == V4
      $2B0: SNE  V4, #05      ; Skip next instruction if V4 != $05
      $458: SNE  V4, #79      ; Skip next instruction if V4 != $79
      ... and 17 more
    Modifies sorted registers V[2]: 26 instructions
      $216: RND  V2, #99      ; V2 = random() AND $99
      $294: ADD  V2, #E6      ; Add $E6 to V2 (V2 = (V2 + $E6) & 0xFF)
      $2E6: LD   V2, #7F      ; Load $7F into V2
      ... and 23 more
    Modifies sorted registers V[5]: 31 instructions
      $22A: RND  V5, #72      ; V5 = random() AND $72
      $246: LD   V5, #22      ; Load $22 into V5
      $37E: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      ... and 28 more
    Compares sorted registers V[2]: 13 instructions
      $230: SE   V2, #CA      ; Skip next instruction if V2 == $CA
      $304: SNE  V2, #6F      ; Skip next instruction if V2 != $6F
      $5CC: SE   V2, #EF      ; Skip next instruction if V2 == $EF
      ... and 10 more
    Compares sorted registers V[5]: 10 instructions
      $234: SE   V5, #3E      ; Skip next instruction if V5 == $3E
      $3F0: SNE  V5, #AA      ; Skip next instruction if V5 != $AA
      $564: SNE  V5, #DF      ; Skip next instruction if V5 != $DF
      ... and 7 more
    Compares sorted registers V[3]: 20 instructions
      $256: SNE  V3, #EB      ; Skip next instruction if V3 != $EB
      $4AC: SNE  V3, #73      ; Skip next instruction if V3 != $73
      $4D8: SE   VA, V3       ; Skip next instruction if VA == V3
      ... and 17 more
    Compares sorted registers V[0]: 9 instructions
      $284: SNE  V0, #2F      ; Skip next instruction if V0 != $2F
      $3C0: SNE  V0, #BE      ; Skip next instruction if V0 != $BE
      $5B4: SNE  V0, #DE      ; Skip next instruction if V0 != $DE
      ... and 6 more
    Modifies sorted registers V[0]: 17 instructions
      $288: AND  V0, V2       ; V0 = V0 AND V2, VF = 0
      $39A: LD   V0, #AB      ; Load $AB into V0
      $45A: LD   V0, #25      ; Load $25 into V0
      ... and 14 more
    Arithmetic on sorted registers V[3]: 1 instructions
      $2AE: SUBN V6, V3       ; V6 = (V3 - V6) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[3]: 24 instructions
      $2C2: RND  V3, #6E      ; V3 = random() AND $6E
      $402: LD   V3, #43      ; Load $43 into V3
      $470: RND  V3, #C9      ; V3 = random() AND $C9
      ... and 21 more
    Compares sorted registers V[1]: 13 instructions
      $378: SNE  V1, #62      ; Skip next instruction if V1 != $62
      $49E: SNE  V1, #8D      ; Skip next instruction if V1 != $8D
      $4CC: SNE  V1, #9C      ; Skip next instruction if V1 != $9C
      ... and 10 more
    Logical operation on V[0] (sets VF=0 in CUDA): 3 instructions
      $37A: XOR  V6, V0       ; V6 = V6 XOR V0, VF = 0
      $87C: XOR  V9, V0       ; V9 = V9 XOR V0, VF = 0
      $C48: OR   VA, V0       ; VA = VA OR V0, VF = 0
    Modifies sorted registers V[4]: 21 instructions
      $40A: LD   V4, #F9      ; Load $F9 into V4
      $422: ADD  V4, V1       ; V4 = (V4 + V1) & 0xFF, VF = carry
      $5B0: SHL  V4           ; V4 = (V4 << 1) & 0xFF, VF = MSB
      ... and 18 more
    Modifies sorted registers V[1]: 32 instructions
      $426: ADD  V1, #E8      ; Add $E8 to V1 (V1 = (V1 + $E8) & 0xFF)
      $430: ADD  V1, #FB      ; Add $FB to V1 (V1 = (V1 + $FB) & 0xFF)
      $500: LD   V1, #9C      ; Load $9C into V1
      ... and 29 more
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $44E: OR   VB, V4       ; VB = VB OR V4, VF = 0
    Arithmetic on sorted registers V[4]: 3 instructions
      $4EE: SUBN VE, V4       ; VE = (V4 - VE) & 0xFF, VF = NOT borrow
      $604: SUBN VD, V4       ; VD = (V4 - VD) & 0xFF, VF = NOT borrow
      $B9C: SUB  VF, V4       ; VF = (VF - V4) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[0]: 3 instructions
      $724: SUBN V9, V0       ; V9 = (V0 - V9) & 0xFF, VF = NOT borrow
      $F9A: SUBN V9, V0       ; V9 = (V0 - V9) & 0xFF, VF = NOT borrow
      $FEA: SUB  VF, V0       ; VF = (VF - V0) & 0xFF, VF = NOT borrow
    Register transfer involving V[2]: 1 instructions
      $7AA: LD   V7, V2       ; Load V2 into V7
    Modifies sorted registers V[0, 1, 2, 3, 4, 5]: 1 instructions
      $CC2: LD   VC, [I]      ; Load V0-VC from [I], then I += 13
    Arithmetic on sorted registers V[1]: 1 instructions
      $D88: ADD  V8, V1       ; V8 = (V8 + V1) & 0xFF, VF = carry
    Arithmetic on sorted registers V[5]: 1 instructions
      $EA4: SUBN VB, V5       ; VB = (V5 - VB) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 1 instructions
      $EC6: SUBN V9, V2       ; V9 = (V2 - V9) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 497 (27.7%)
    JP: 234 (13.1%)
    LD: 214 (11.9%)
    SE: 120 (6.7%)
    RND: 120 (6.7%)
    ADD: 119 (6.6%)
    SNE: 116 (6.5%)
    DRW: 107 (6.0%)
    CALL: 105 (5.9%)
    NOP: 103 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 702
  Based on: 252 sorting instructions + 225 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1567D01_V1-V6_L6_ASC_C510_129a8215.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Suspicious: 15.6% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 97 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [53, 46, 47, 48, 49, 50, 51, 0]
  Changes: V0: 8‚Üí53, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí0
  ‚úì Correct initial test pattern detected
  Achievement cycle: 510

CUDA EXECUTION STATISTICS:
  Total register operations: 49
  Register reads: 328
  Register writes: 677
  Register writes per cycle: 1.327

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 18 locations
       Addresses: ['$2DA', '$31A', '$378', '$3D4', '$56C', '$6A2', '$782', '$788']
       ... and 10 more
  V1: Modified at 29 locations
       Addresses: ['$20A', '$2CE', '$33A', '$342', '$394', '$3A6', '$462', '$4B4']
       ... and 21 more
  V2: Modified at 29 locations
       Addresses: ['$390', '$3B0', '$496', '$4A8', '$4CC', '$4DA', '$4EA', '$588']
       ... and 21 more
  V3: Modified at 24 locations
       Addresses: ['$248', '$3FA', '$476', '$49E', '$582', '$58A', '$5AA', '$5E6']
       ... and 16 more
  V4: Modified at 25 locations
       Addresses: ['$2CA', '$354', '$4FA', '$528', '$572', '$644', '$824', '$88C']
       ... and 17 more
  V5: Modified at 28 locations
       Addresses: ['$246', '$25E', '$29E', '$2C6', '$2E4', '$326', '$49C', '$506']
       ... and 20 more
  V6: Modified at 28 locations
       Addresses: ['$244', '$266', '$2E2', '$304', '$3B2', '$43A', '$452', '$4F8']
       ... and 20 more
  V7: Modified at 21 locations
       Addresses: ['$5A2', '$60E', '$610', '$694', '$6CE', '$6DE', '$740', '$74A']
       ... and 13 more

CONTROL FLOW ANALYSIS:
  201 control transfers detected:
    $20E ‚Üí $29E
    $228 ‚Üí $C62
    $256 ‚Üí $69F
    $25A ‚Üí $DBB
    $264 ‚Üí $28E
    ... and 196 more transfers
  Potential sorting loops: 111 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  279 instructions identified as sorting-related:
    Modifies sorted registers V[1]: 29 instructions
      $20A: LD   V1, #5D      ; Load $5D into V1
      $2CE: LD   V1, #F7      ; Load $F7 into V1
      $33A: RND  V1, #40      ; V1 = random() AND $40
      ... and 26 more
    Compares sorted registers V[3]: 14 instructions
      $23C: SNE  V3, VB       ; Skip next instruction if V3 != VB
      $24E: SNE  V3, #08      ; Skip next instruction if V3 != $08
      $42C: SNE  V3, #DE      ; Skip next instruction if V3 != $DE
      ... and 11 more
    Modifies sorted registers V[6]: 28 instructions
      $244: ADD  V6, #27      ; Add $27 to V6 (V6 = (V6 + $27) & 0xFF)
      $266: LD   V6, #89      ; Load $89 into V6
      $2E2: AND  V6, VC       ; V6 = V6 AND VC, VF = 0
      ... and 25 more
    Modifies sorted registers V[5]: 28 instructions
      $246: RND  V5, #CF      ; V5 = random() AND $CF
      $25E: RND  V5, #E1      ; V5 = random() AND $E1
      $29E: SUB  V5, VA       ; V5 = (V5 - VA) & 0xFF, VF = NOT borrow
      ... and 25 more
    Modifies sorted registers V[3]: 24 instructions
      $248: SUB  V3, VC       ; V3 = (V3 - VC) & 0xFF, VF = NOT borrow
      $3FA: RND  V3, #A3      ; V3 = random() AND $A3
      $476: ADD  V3, V2       ; V3 = (V3 + V2) & 0xFF, VF = carry
      ... and 21 more
    Compares sorted registers V[2]: 20 instructions
      $24C: SNE  V2, #15      ; Skip next instruction if V2 != $15
      $274: SNE  V2, #88      ; Skip next instruction if V2 != $88
      $3F2: SE   V2, #0F      ; Skip next instruction if V2 == $0F
      ... and 17 more
    Compares sorted registers V[6]: 15 instructions
      $286: SNE  V6, #F1      ; Skip next instruction if V6 != $F1
      $2D0: SE   V6, V7       ; Skip next instruction if V6 == V7
      $33E: SNE  V6, #E1      ; Skip next instruction if V6 != $E1
      ... and 12 more
    Compares sorted registers V[5]: 9 instructions
      $290: SNE  V5, #5A      ; Skip next instruction if V5 != $5A
      $432: SNE  V5, #24      ; Skip next instruction if V5 != $24
      $6C4: SE   V5, #23      ; Skip next instruction if V5 == $23
      ... and 6 more
    Modifies sorted registers V[4]: 25 instructions
      $2CA: RND  V4, #46      ; V4 = random() AND $46
      $354: LD   V4, #3A      ; Load $3A into V4
      $4FA: LD   V4, #5F      ; Load $5F into V4
      ... and 22 more
    Compares sorted registers V[1]: 18 instructions
      $2D2: SE   V1, #D4      ; Skip next instruction if V1 == $D4
      $38E: SE   V1, #03      ; Skip next instruction if V1 == $03
      $5CA: SE   V1, #34      ; Skip next instruction if V1 == $34
      ... and 15 more
    Compares sorted registers V[4]: 22 instructions
      $37E: SNE  V4, #00      ; Skip next instruction if V4 != $00
      $3BC: SNE  V4, #99      ; Skip next instruction if V4 != $99
      $41E: SNE  V4, #AA      ; Skip next instruction if V4 != $AA
      ... and 19 more
    Modifies sorted registers V[2]: 29 instructions
      $390: SUBN V2, V1       ; V2 = (V1 - V2) & 0xFF, VF = NOT borrow
      $3B0: ADD  V2, #98      ; Add $98 to V2 (V2 = (V2 + $98) & 0xFF)
      $496: LD   V2, #18      ; Load $18 into V2
      ... and 26 more
    Compares sorted registers V[1, 6]: 2 instructions
      $484: SE   V1, V6       ; Skip next instruction if V1 == V6
      $982: SNE  V1, V6       ; Skip next instruction if V1 != V6
    Logical operation on V[6] (sets VF=0 in CUDA): 3 instructions
      $536: OR   VB, V6       ; VB = VB OR V6, VF = 0
      $586: XOR  VE, V6       ; VE = VE XOR V6, VF = 0
      $610: XOR  V7, V6       ; V7 = V7 XOR V6, VF = 0
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $5A2: XOR  V7, V5       ; V7 = V7 XOR V5, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $5DA: SUB  VD, V4       ; VD = (VD - V4) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4, 6]: 1 instructions
      $5F6: SNE  V6, V4       ; Skip next instruction if V6 != V4
    Compares sorted registers V[1, 2]: 1 instructions
      $720: SE   V1, V2       ; Skip next instruction if V1 == V2
    Logical operation on V[4] (sets VF=0 in CUDA): 3 instructions
      $80E: OR   VA, V4       ; VA = VA OR V4, VF = 0
      $D36: AND  VB, V4       ; VB = VB AND V4, VF = 0
      $DC8: XOR  VA, V4       ; VA = VA XOR V4, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $89A: SUB  VF, V2       ; VF = (VF - V2) & 0xFF, VF = NOT borrow
    Register transfer involving V[3]: 1 instructions
      $984: LD   VA, V3       ; Load V3 into VA
    Arithmetic on sorted registers V[1]: 1 instructions
      $AD2: SUB  V8, V1       ; V8 = (V8 - V1) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[5]: 1 instructions
      $CC0: SUBN VE, V5       ; VE = (V5 - VE) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 4]: 1 instructions
      $D32: SE   V2, V4       ; Skip next instruction if V2 == V4
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $DB4: XOR  VD, V2       ; VD = VD XOR V2, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 477 (26.6%)
    LD: 239 (13.3%)
    JP: 217 (12.1%)
    SNE: 144 (8.0%)
    SE: 126 (7.0%)
    DRW: 115 (6.4%)
    ADD: 111 (6.2%)
    NOP: 105 (5.9%)
    CALL: 103 (5.7%)
    RND: 97 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 681
  Based on: 279 sorting instructions + 201 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1623D01_V1-V6_L6_ASC_C820_33239694.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 116 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [53, 46, 47, 48, 49, 50, 51, 20]
  Changes: V0: 8‚Üí53, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí20
  ‚úì Correct initial test pattern detected
  Achievement cycle: 820

CUDA EXECUTION STATISTICS:
  Total register operations: 29
  Register reads: 457
  Register writes: 1007
  Register writes per cycle: 1.228

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 20 locations
       Addresses: ['$246', '$4AE', '$4DC', '$5B0', '$5D8', '$626', '$6B0', '$73E']
       ... and 12 more
  V1: Modified at 27 locations
       Addresses: ['$2BA', '$384', '$3C6', '$3C8', '$404', '$5E8', '$666', '$69E']
       ... and 19 more
  V2: Modified at 23 locations
       Addresses: ['$360', '$446', '$476', '$4A2', '$4BE', '$59E', '$5A0', '$5A2']
       ... and 15 more
  V3: Modified at 34 locations
       Addresses: ['$28C', '$2EC', '$31A', '$356', '$3A6', '$3D2', '$402', '$438']
       ... and 26 more
  V4: Modified at 26 locations
       Addresses: ['$290', '$390', '$486', '$55E', '$59A', '$5C0', '$5D6', '$5F0']
       ... and 18 more
  V5: Modified at 20 locations
       Addresses: ['$272', '$2A0', '$312', '$34C', '$3D6', '$41E', '$552', '$580']
       ... and 12 more
  V6: Modified at 23 locations
       Addresses: ['$204', '$222', '$28A', '$320', '$37C', '$3C4', '$430', '$4E8']
       ... and 15 more
  V7: Modified at 28 locations
       Addresses: ['$21E', '$230', '$24A', '$2E8', '$3E2', '$3EA', '$434', '$480']
       ... and 20 more

CONTROL FLOW ANALYSIS:
  214 control transfers detected:
    $202 ‚Üí $987
    $206 ‚Üí $976
    $224 ‚Üí $5A1
    $226 ‚Üí $BDC
    $24E ‚Üí $C44
    ... and 209 more transfers
  Potential sorting loops: 134 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  265 instructions identified as sorting-related:
    Modifies sorted registers V[6]: 23 instructions
      $204: RND  V6, #AF      ; V6 = random() AND $AF
      $222: ADD  V6, #87      ; Add $87 to V6 (V6 = (V6 + $87) & 0xFF)
      $28A: ADD  V6, #E4      ; Add $E4 to V6 (V6 = (V6 + $E4) & 0xFF)
      ... and 20 more
    Compares sorted registers V[4]: 16 instructions
      $20C: SE   V4, #6B      ; Skip next instruction if V4 == $6B
      $31C: SNE  V4, #82      ; Skip next instruction if V4 != $82
      $3E4: SE   V4, #C6      ; Skip next instruction if V4 == $C6
      ... and 13 more
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $21E: OR   V7, V3       ; V7 = V7 OR V3, VF = 0
      $542: AND  V7, V3       ; V7 = V7 AND V3, VF = 0
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $24A: XOR  V7, V5       ; V7 = V7 XOR V5, VF = 0
      $F30: OR   V9, V5       ; V9 = V9 OR V5, VF = 0
    Compares sorted registers V[5]: 12 instructions
      $25A: SNE  V5, #D3      ; Skip next instruction if V5 != $D3
      $27A: SNE  V5, #B3      ; Skip next instruction if V5 != $B3
      $35C: SE   V5, #A6      ; Skip next instruction if V5 == $A6
      ... and 9 more
    Compares sorted registers V[1]: 17 instructions
      $260: SE   V1, #70      ; Skip next instruction if V1 == $70
      $2D2: SNE  V1, #E2      ; Skip next instruction if V1 != $E2
      $426: SE   V1, #10      ; Skip next instruction if V1 == $10
      ... and 14 more
    Modifies sorted registers V[5]: 20 instructions
      $272: RND  V5, #08      ; V5 = random() AND $08
      $2A0: SHR  V5           ; V5 = V5 >> 1, VF = LSB
      $312: ADD  V5, #C3      ; Add $C3 to V5 (V5 = (V5 + $C3) & 0xFF)
      ... and 17 more
    Compares sorted registers V[6]: 25 instructions
      $278: SNE  V6, #22      ; Skip next instruction if V6 != $22
      $2C6: SE   V6, #DA      ; Skip next instruction if V6 == $DA
      $3E0: SNE  V6, #87      ; Skip next instruction if V6 != $87
      ... and 22 more
    Modifies sorted registers V[3]: 33 instructions
      $28C: LD   V3, #E0      ; Load $E0 into V3
      $2EC: ADD  V3, #37      ; Add $37 to V3 (V3 = (V3 + $37) & 0xFF)
      $31A: RND  V3, #03      ; V3 = random() AND $03
      ... and 30 more
    Modifies sorted registers V[4]: 26 instructions
      $290: LD   V4, #82      ; Load $82 into V4
      $390: LD   V4, #C8      ; Load $C8 into V4
      $486: LD   V4, #2A      ; Load $2A into V4
      ... and 23 more
    Modifies sorted registers V[1]: 26 instructions
      $2BA: XOR  V1, V0       ; V1 = V1 XOR V0, VF = 0
      $384: ADD  V1, #7C      ; Add $7C to V1 (V1 = (V1 + $7C) & 0xFF)
      $3C6: RND  V1, #B3      ; V1 = random() AND $B3
      ... and 23 more
    Modifies sorted registers V[2]: 22 instructions
      $360: RND  V2, #3F      ; V2 = random() AND $3F
      $446: ADD  V2, #4C      ; Add $4C to V2 (V2 = (V2 + $4C) & 0xFF)
      $476: LD   V2, #5B      ; Load $5B into V2
      ... and 19 more
    Compares sorted registers V[3]: 15 instructions
      $39E: SNE  V3, #A4      ; Skip next instruction if V3 != $A4
      $3E6: SE   V3, #F3      ; Skip next instruction if V3 == $F3
      $45A: SE   V3, #06      ; Skip next instruction if V3 == $06
      ... and 12 more
    Logical operation on V[1] (sets VF=0 in CUDA): 2 instructions
      $40A: AND  VD, V1       ; VD = VD AND V1, VF = 0
      $E22: AND  V0, V1       ; V0 = V0 AND V1, VF = 0
    Compares sorted registers V[2]: 11 instructions
      $47A: SNE  V2, #DA      ; Skip next instruction if V2 != $DA
      $54A: SNE  V2, #B6      ; Skip next instruction if V2 != $B6
      $6D4: SNE  V2, VD       ; Skip next instruction if V2 != VD
      ... and 8 more
    Arithmetic on sorted registers V[1]: 3 instructions
      $5FC: ADD  VB, V1       ; VB = (VB + V1) & 0xFF, VF = carry
      $6CE: SUB  V7, V1       ; V7 = (V7 - V1) & 0xFF, VF = NOT borrow
      $71C: SUBN V8, V1       ; V8 = (V1 - V8) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[1, 2, 3]: 1 instructions
      $6B0: LD   V3, [I]      ; Load V0-V3 from [I], then I += 4
    Register transfer involving V[4]: 1 instructions
      $73E: LD   V0, V4       ; Load V4 into V0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $7C0: XOR  V0, V4       ; V0 = V0 XOR V4, VF = 0
    Arithmetic on sorted registers V[4]: 2 instructions
      $8C4: SUBN VB, V4       ; VB = (V4 - VB) & 0xFF, VF = NOT borrow
      $A8A: SUB  VD, V4       ; VD = (VD - V4) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 3]: 1 instructions
      $A54: SNE  V3, V2       ; Skip next instruction if V3 != V2
    Register transfer involving V[1, 2, 3, 4]: 1 instructions
      $B4E: LD   [I], V4      ; Store V0-V4 at [I], then I += 5
    Arithmetic on sorted registers V[2]: 1 instructions
      $D42: SUB  VB, V2       ; VB = (VB - V2) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3, 4]: 1 instructions
      $EEE: SE   V3, V4       ; Skip next instruction if V3 == V4
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $EF2: OR   VB, V6       ; VB = VB OR V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 486 (27.1%)
    LD: 233 (13.0%)
    JP: 211 (11.8%)
    SNE: 131 (7.3%)
    ADD: 129 (7.2%)
    SE: 120 (6.7%)
    RND: 116 (6.5%)
    CALL: 114 (6.4%)
    DRW: 102 (5.7%)
    NOP: 98 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 693
  Based on: 265 sorting instructions + 214 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1650D01_V2-V7_L6_ASC_C70_7a9b1865.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [47, 48, 49, 50, 51, 52] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [47, 48, 49, 50, 51, 52] with no initial pattern involvement
    ‚ö†Ô∏è  Suspicious: 16.0% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 127 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [47, 48, 49, 50, 51, 52]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 47, 48, 49, 50, 51, 52]
  Changes: V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí52
  ‚úì Correct initial test pattern detected
  Achievement cycle: 70

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 27
  Register writes: 57
  Register writes per cycle: 0.814

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 21 locations
       Addresses: ['$25A', '$280', '$3A0', '$404', '$4C6', '$4D8', '$53A', '$75C']
       ... and 13 more
  V1: Modified at 25 locations
       Addresses: ['$238', '$2AC', '$318', '$330', '$358', '$38A', '$560', '$598']
       ... and 17 more
  V2: Modified at 27 locations
       Addresses: ['$284', '$2DC', '$396', '$40E', '$5E6', '$69A', '$6B0', '$6E4']
       ... and 19 more
  V3: Modified at 29 locations
       Addresses: ['$22C', '$272', '$3A6', '$424', '$488', '$5E4', '$6C4', '$772']
       ... and 21 more
  V4: Modified at 28 locations
       Addresses: ['$2D4', '$3E8', '$442', '$4CE', '$4E8', '$4FE', '$57E', '$596']
       ... and 20 more
  V5: Modified at 41 locations
       Addresses: ['$202', '$22A', '$248', '$26E', '$2D6', '$320', '$3EE', '$444']
       ... and 33 more
  V6: Modified at 31 locations
       Addresses: ['$294', '$29A', '$2A0', '$306', '$3CE', '$420', '$4A4', '$4F0']
       ... and 23 more
  V7: Modified at 27 locations
       Addresses: ['$2D0', '$354', '$400', '$516', '$524', '$5DA', '$612', '$6B4']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  220 control transfers detected:
    $214 ‚Üí $8E1
    $21C ‚Üí $AF6
    $232 ‚Üí $E51
    $25C ‚Üí $76B
    $25E ‚Üí $113 (LOOP)
    ... and 215 more transfers
  Potential sorting loops: 125 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  287 instructions identified as sorting-related:
    Modifies sorted registers V[5]: 41 instructions
      $202: LD   V5, #58      ; Load $58 into V5
      $22A: ADD  V5, #94      ; Add $94 to V5 (V5 = (V5 + $94) & 0xFF)
      $248: LD   V5, #6A      ; Load $6A into V5
      ... and 38 more
    Compares sorted registers V[3]: 17 instructions
      $216: SE   V3, #A5      ; Skip next instruction if V3 == $A5
      $24E: SNE  V3, #3C      ; Skip next instruction if V3 != $3C
      $260: SE   V3, #0A      ; Skip next instruction if V3 == $0A
      ... and 14 more
    Modifies sorted registers V[3]: 29 instructions
      $22C: RND  V3, #67      ; V3 = random() AND $67
      $272: RND  V3, #FE      ; V3 = random() AND $FE
      $3A6: RND  V3, #9C      ; V3 = random() AND $9C
      ... and 26 more
    Compares sorted registers V[5]: 20 instructions
      $230: SE   V5, #1A      ; Skip next instruction if V5 == $1A
      $286: SE   V5, #33      ; Skip next instruction if V5 == $33
      $328: SE   V5, #AE      ; Skip next instruction if V5 == $AE
      ... and 17 more
    Modifies sorted registers V[2]: 27 instructions
      $284: RND  V2, #73      ; V2 = random() AND $73
      $2DC: RND  V2, #36      ; V2 = random() AND $36
      $396: RND  V2, #DA      ; V2 = random() AND $DA
      ... and 24 more
    Modifies sorted registers V[6]: 31 instructions
      $294: LD   V6, #27      ; Load $27 into V6
      $29A: LD   V6, #AC      ; Load $AC into V6
      $2A0: LD   V6, #39      ; Load $39 into V6
      ... and 28 more
    Modifies sorted registers V[7]: 27 instructions
      $2D0: RND  V7, #79      ; V7 = random() AND $79
      $354: ADD  V7, #DA      ; Add $DA to V7 (V7 = (V7 + $DA) & 0xFF)
      $400: ADD  V7, #73      ; Add $73 to V7 (V7 = (V7 + $73) & 0xFF)
      ... and 24 more
    Modifies sorted registers V[4]: 28 instructions
      $2D4: RND  V4, #6F      ; V4 = random() AND $6F
      $3E8: RND  V4, #15      ; V4 = random() AND $15
      $442: RND  V4, #A3      ; V4 = random() AND $A3
      ... and 25 more
    Compares sorted registers V[3, 5]: 1 instructions
      $2E6: SNE  V5, V3       ; Skip next instruction if V5 != V3
    Register transfer involving V[6]: 1 instructions
      $2FA: LD   V8, V6       ; Load V6 into V8
    Compares sorted registers V[7]: 9 instructions
      $338: SNE  V7, #F6      ; Skip next instruction if V7 != $F6
      $576: SE   V7, #DD      ; Skip next instruction if V7 == $DD
      $75A: SNE  V7, #F2      ; Skip next instruction if V7 != $F2
      ... and 6 more
    Compares sorted registers V[4]: 20 instructions
      $37C: SNE  V4, #B9      ; Skip next instruction if V4 != $B9
      $414: SNE  V4, #D1      ; Skip next instruction if V4 != $D1
      $426: SE   V4, #DC      ; Skip next instruction if V4 == $DC
      ... and 17 more
    Compares sorted registers V[6]: 11 instructions
      $3D2: SNE  V6, #FC      ; Skip next instruction if V6 != $FC
      $3D6: SE   V6, #62      ; Skip next instruction if V6 == $62
      $4F2: SNE  V0, V6       ; Skip next instruction if V0 != V6
      ... and 8 more
    Compares sorted registers V[2]: 18 instructions
      $41A: SNE  V2, #69      ; Skip next instruction if V2 != $69
      $456: SE   V2, #54      ; Skip next instruction if V2 == $54
      $4AE: SNE  V2, #EF      ; Skip next instruction if V2 != $EF
      ... and 15 more
    Arithmetic on sorted registers V[3]: 1 instructions
      $45E: ADD  VB, V3       ; VB = (VB + V3) & 0xFF, VF = carry
    Register transfer involving V[5]: 1 instructions
      $604: LD   F, V5        ; I = font_address(V5 & 0xF) = 0x50 + (V5 & 0xF) * 5
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $6CC: OR   V9, V6       ; V9 = V9 OR V6, VF = 0
    Compares sorted registers V[3, 4]: 1 instructions
      $7C2: SE   V4, V3       ; Skip next instruction if V4 == V3
    Register transfer involving V[2]: 1 instructions
      $B1C: LD   V8, V2       ; Load V2 into V8
    Register transfer involving V[4]: 1 instructions
      $D08: LD   V9, V4       ; Load V4 into V9
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $D4A: OR   VD, V3       ; VD = VD OR V3, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 478 (26.7%)
    JP: 242 (13.5%)
    LD: 233 (13.0%)
    SNE: 128 (7.1%)
    RND: 127 (7.1%)
    ADD: 117 (6.5%)
    SE: 115 (6.4%)
    NOP: 104 (5.8%)
    CALL: 103 (5.7%)
    DRW: 103 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 727
  Based on: 287 sorting instructions + 220 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1686D01_V1-V6_L6_ASC_C370_ce849404.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 123 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [53, 46, 47, 48, 49, 50, 51, 0]
  Changes: V0: 8‚Üí53, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí0
  ‚úì Correct initial test pattern detected
  Achievement cycle: 370

CUDA EXECUTION STATISTICS:
  Total register operations: 27
  Register reads: 209
  Register writes: 216
  Register writes per cycle: 0.584

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$208', '$21E', '$2E0', '$3D6', '$47E', '$514', '$5D6', '$602']
       ... and 22 more
  V1: Modified at 25 locations
       Addresses: ['$33A', '$3D0', '$41C', '$456', '$580', '$5D4', '$662', '$688']
       ... and 17 more
  V2: Modified at 31 locations
       Addresses: ['$2BC', '$2D6', '$32E', '$370', '$408', '$47A', '$4DE', '$568']
       ... and 23 more
  V3: Modified at 18 locations
       Addresses: ['$32C', '$3DE', '$3F4', '$416', '$42A', '$4B2', '$5C4', '$612']
       ... and 10 more
  V4: Modified at 28 locations
       Addresses: ['$246', '$266', '$296', '$2C8', '$2CA', '$326', '$438', '$52A']
       ... and 20 more
  V5: Modified at 25 locations
       Addresses: ['$234', '$23A', '$31E', '$35E', '$404', '$4C0', '$4E6', '$520']
       ... and 17 more
  V6: Modified at 19 locations
       Addresses: ['$25A', '$32A', '$3EC', '$448', '$50C', '$5B4', '$5F8', '$6D0']
       ... and 11 more
  V7: Modified at 29 locations
       Addresses: ['$216', '$2AC', '$2F6', '$33E', '$39C', '$3AE', '$444', '$482']
       ... and 21 more

CONTROL FLOW ANALYSIS:
  242 control transfers detected:
    $214 ‚Üí $A79
    $220 ‚Üí $338
    $222 ‚Üí $E11
    $22E ‚Üí $D32
    $230 ‚Üí $48F
    ... and 237 more transfers
  Potential sorting loops: 134 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  241 instructions identified as sorting-related:
    Compares sorted registers V[6]: 15 instructions
      $20E: SNE  V6, #CB      ; Skip next instruction if V6 != $CB
      $3CE: SNE  V6, #5C      ; Skip next instruction if V6 != $5C
      $5AC: SE   V6, #5D      ; Skip next instruction if V6 == $5D
      ... and 12 more
    Modifies sorted registers V[5]: 25 instructions
      $234: LD   V5, #39      ; Load $39 into V5
      $23A: LD   V5, #53      ; Load $53 into V5
      $31E: ADD  V5, #84      ; Add $84 to V5 (V5 = (V5 + $84) & 0xFF)
      ... and 22 more
    Modifies sorted registers V[4]: 28 instructions
      $246: LD   V4, #E1      ; Load $E1 into V4
      $266: LD   V4, #9B      ; Load $9B into V4
      $296: ADD  V4, #19      ; Add $19 to V4 (V4 = (V4 + $19) & 0xFF)
      ... and 25 more
    Modifies sorted registers V[6]: 19 instructions
      $25A: RND  V6, #40      ; V6 = random() AND $40
      $32A: ADD  V6, #48      ; Add $48 to V6 (V6 = (V6 + $48) & 0xFF)
      $3EC: LD   V6, #24      ; Load $24 into V6
      ... and 16 more
    Arithmetic on sorted registers V[3]: 2 instructions
      $290: ADD  V9, V3       ; V9 = (V9 + V3) & 0xFF, VF = carry
      $2F6: ADD  V7, V3       ; V7 = (V7 + V3) & 0xFF, VF = carry
    Modifies sorted registers V[2]: 31 instructions
      $2BC: LD   V2, #6E      ; Load $6E into V2
      $2D6: LD   V2, #EF      ; Load $EF into V2
      $32E: AND  V2, V9       ; V2 = V2 AND V9, VF = 0
      ... and 28 more
    Compares sorted registers V[1]: 13 instructions
      $2D2: SNE  V1, #02      ; Skip next instruction if V1 != $02
      $2E4: SE   V1, #97      ; Skip next instruction if V1 == $97
      $338: SE   V1, #4C      ; Skip next instruction if V1 == $4C
      ... and 10 more
    Compares sorted registers V[5]: 16 instructions
      $2E2: SNE  V5, #1B      ; Skip next instruction if V5 != $1B
      $508: SNE  V5, #60      ; Skip next instruction if V5 != $60
      $57E: SNE  V5, #FA      ; Skip next instruction if V5 != $FA
      ... and 13 more
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $30E: XOR  VE, V5       ; VE = VE XOR V5, VF = 0
    Modifies sorted registers V[3]: 18 instructions
      $32C: LD   V3, #65      ; Load $65 into V3
      $3DE: LD   V3, #75      ; Load $75 into V3
      $3F4: LD   V3, #19      ; Load $19 into V3
      ... and 15 more
    Modifies sorted registers V[1]: 25 instructions
      $33A: LD   V1, #77      ; Load $77 into V1
      $3D0: ADD  V1, #40      ; Add $40 to V1 (V1 = (V1 + $40) & 0xFF)
      $41C: LD   V1, #09      ; Load $09 into V1
      ... and 22 more
    Compares sorted registers V[2]: 13 instructions
      $37C: SE   V2, #C2      ; Skip next instruction if V2 == $C2
      $426: SE   V2, #21      ; Skip next instruction if V2 == $21
      $654: SNE  V2, #FA      ; Skip next instruction if V2 != $FA
      ... and 10 more
    Compares sorted registers V[3]: 13 instructions
      $382: SE   V3, #FB      ; Skip next instruction if V3 == $FB
      $410: SE   V3, #0D      ; Skip next instruction if V3 == $0D
      $4B8: SE   V3, #4E      ; Skip next instruction if V3 == $4E
      ... and 10 more
    Compares sorted registers V[4]: 12 instructions
      $44A: SE   VB, V4       ; Skip next instruction if VB == V4
      $4BE: SE   V4, #4C      ; Skip next instruction if V4 == $4C
      $530: SE   V4, #6A      ; Skip next instruction if V4 == $6A
      ... and 9 more
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $4BA: AND  VA, V4       ; VA = VA AND V4, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $4CA: AND  VD, V6       ; VD = VD AND V6, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $4DA: OR   VD, V3       ; VD = VD OR V3, VF = 0
      $652: AND  V0, V3       ; V0 = V0 AND V3, VF = 0
    Compares sorted registers V[1, 2]: 1 instructions
      $7E4: SNE  V1, V2       ; Skip next instruction if V1 != V2
    Arithmetic on sorted registers V[2]: 2 instructions
      $C2C: ADD  VC, V2       ; VC = (VC + V2) & 0xFF, VF = carry
      $D72: ADD  VC, V2       ; VC = (VC + V2) & 0xFF, VF = carry
    Compares sorted registers V[2, 6]: 2 instructions
      $CBE: SE   V2, V6       ; Skip next instruction if V2 == V6
      $F8E: SE   V2, V6       ; Skip next instruction if V2 == V6
    Arithmetic on sorted registers V[6]: 1 instructions
      $CEC: SUB  VC, V6       ; VC = (VC - V6) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 536 (29.9%)
    JP: 239 (13.3%)
    LD: 203 (11.3%)
    RND: 123 (6.9%)
    CALL: 118 (6.6%)
    SE: 115 (6.4%)
    NOP: 110 (6.1%)
    SNE: 103 (5.7%)
    ADD: 103 (5.7%)
    DRW: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 725
  Based on: 241 sorting instructions + 242 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1694D01_V1-V6_L6_ASC_C360_09406329.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Suspicious: 15.1% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 104 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [53, 46, 47, 48, 49, 50, 51, 148]
  Changes: V0: 8‚Üí53, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí148
  ‚úì Correct initial test pattern detected
  Achievement cycle: 360

CUDA EXECUTION STATISTICS:
  Total register operations: 17
  Register reads: 178
  Register writes: 410
  Register writes per cycle: 1.139

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 28 locations
       Addresses: ['$270', '$27E', '$2A8', '$308', '$432', '$59A', '$5A2', '$690']
       ... and 20 more
  V1: Modified at 25 locations
       Addresses: ['$254', '$362', '$366', '$480', '$5B0', '$5B6', '$5D4', '$6A4']
       ... and 17 more
  V2: Modified at 23 locations
       Addresses: ['$36E', '$4E0', '$546', '$5FA', '$65A', '$6AA', '$6E2', '$7AE']
       ... and 15 more
  V3: Modified at 25 locations
       Addresses: ['$2A6', '$44A', '$454', '$4E8', '$51C', '$578', '$652', '$654']
       ... and 17 more
  V4: Modified at 29 locations
       Addresses: ['$256', '$2CA', '$458', '$4EA', '$4F6', '$530', '$582', '$586']
       ... and 21 more
  V5: Modified at 24 locations
       Addresses: ['$416', '$41C', '$490', '$56A', '$588', '$598', '$65E', '$6F6']
       ... and 16 more
  V6: Modified at 29 locations
       Addresses: ['$21A', '$234', '$2C4', '$2E6', '$320', '$438', '$4DA', '$51A']
       ... and 21 more
  V7: Modified at 25 locations
       Addresses: ['$236', '$3D0', '$468', '$502', '$504', '$54A', '$676', '$762']
       ... and 17 more

CONTROL FLOW ANALYSIS:
  217 control transfers detected:
    $206 ‚Üí $B78
    $220 ‚Üí $88F
    $224 ‚Üí $136 (LOOP)
    $246 ‚Üí $BB5
    $262 ‚Üí $D99
    ... and 212 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  271 instructions identified as sorting-related:
    Modifies sorted registers V[6]: 29 instructions
      $21A: LD   V6, #23      ; Load $23 into V6
      $234: LD   V6, #D2      ; Load $D2 into V6
      $2C4: ADD  V6, #02      ; Add $02 to V6 (V6 = (V6 + $02) & 0xFF)
      ... and 26 more
    Compares sorted registers V[1]: 20 instructions
      $228: SNE  V1, #10      ; Skip next instruction if V1 != $10
      $272: SE   V1, #00      ; Skip next instruction if V1 == $00
      $2C2: SE   V1, #E0      ; Skip next instruction if V1 == $E0
      ... and 17 more
    Modifies sorted registers V[1]: 25 instructions
      $254: RND  V1, #09      ; V1 = random() AND $09
      $362: LD   V1, #D3      ; Load $D3 into V1
      $366: RND  V1, #90      ; V1 = random() AND $90
      ... and 22 more
    Modifies sorted registers V[4]: 29 instructions
      $256: ADD  V4, #EC      ; Add $EC to V4 (V4 = (V4 + $EC) & 0xFF)
      $2CA: RND  V4, #7F      ; V4 = random() AND $7F
      $458: ADD  V4, #87      ; Add $87 to V4 (V4 = (V4 + $87) & 0xFF)
      ... and 26 more
    Compares sorted registers V[5]: 18 instructions
      $266: SNE  V5, #34      ; Skip next instruction if V5 != $34
      $2D8: SE   V5, #7B      ; Skip next instruction if V5 == $7B
      $408: SNE  V5, #17      ; Skip next instruction if V5 != $17
      ... and 15 more
    Compares sorted registers V[6]: 14 instructions
      $284: SE   V6, #6E      ; Skip next instruction if V6 == $6E
      $360: SNE  V6, #A9      ; Skip next instruction if V6 != $A9
      $3FE: SE   V6, #51      ; Skip next instruction if V6 == $51
      ... and 11 more
    Compares sorted registers V[4]: 13 instructions
      $294: SNE  V4, #2F      ; Skip next instruction if V4 != $2F
      $4F8: SNE  V4, VC       ; Skip next instruction if V4 != VC
      $542: SE   V4, #08      ; Skip next instruction if V4 == $08
      ... and 10 more
    Modifies sorted registers V[3]: 25 instructions
      $2A6: ADD  V3, #17      ; Add $17 to V3 (V3 = (V3 + $17) & 0xFF)
      $44A: ADD  V3, #0C      ; Add $0C to V3 (V3 = (V3 + $0C) & 0xFF)
      $454: ADD  V3, #10      ; Add $10 to V3 (V3 = (V3 + $10) & 0xFF)
      ... and 22 more
    Compares sorted registers V[3]: 18 instructions
      $316: SE   V3, #C4      ; Skip next instruction if V3 == $C4
      $552: SNE  V3, #95      ; Skip next instruction if V3 != $95
      $572: SE   V3, #60      ; Skip next instruction if V3 == $60
      ... and 15 more
    Modifies sorted registers V[2]: 23 instructions
      $36E: ADD  V2, #7C      ; Add $7C to V2 (V2 = (V2 + $7C) & 0xFF)
      $4E0: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB
      $546: LD   V2, #71      ; Load $71 into V2
      ... and 20 more
    Arithmetic on sorted registers V[1]: 1 instructions
      $3FA: SUBN V9, V1       ; V9 = (V1 - V9) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[5]: 24 instructions
      $416: LD   V5, #C0      ; Load $C0 into V5
      $41C: XOR  V5, VF       ; V5 = V5 XOR VF, VF = 0
      $490: LD   V5, #FE      ; Load $FE into V5
      ... and 21 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $54A: OR   V7, V2       ; V7 = V7 OR V2, VF = 0
    Compares sorted registers V[2]: 23 instructions
      $58C: SE   V2, #9B      ; Skip next instruction if V2 == $9B
      $69A: SNE  V2, #32      ; Skip next instruction if V2 != $32
      $784: SNE  V2, #56      ; Skip next instruction if V2 != $56
      ... and 20 more
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $644: OR   VA, V6       ; VA = VA OR V6, VF = 0
    Register transfer involving V[1, 2, 3, 4, 5, 6]: 1 instructions
      $B14: LD   [I], VE      ; Store V0-VE at [I], then I += 15
    Arithmetic on sorted registers V[3]: 1 instructions
      $BE0: SUB  VA, V3       ; VA = (VA - V3) & 0xFF, VF = NOT borrow
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $CBA: AND  VC, V1       ; VC = VC AND V1, VF = 0
    Compares sorted registers V[1, 2]: 1 instructions
      $D3E: SNE  V1, V2       ; Skip next instruction if V1 != V2
    Arithmetic on sorted registers V[6]: 1 instructions
      $EFC: ADD  VA, V6       ; VA = (VA + V6) & 0xFF, VF = carry
    Arithmetic on sorted registers V[4]: 1 instructions
      $F1A: ADD  V8, V4       ; V8 = (V8 + V4) & 0xFF, VF = carry
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $FCE: OR   V7, V3       ; V7 = V7 OR V3, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 468 (26.1%)
    LD: 229 (12.8%)
    JP: 218 (12.2%)
    SNE: 137 (7.6%)
    DRW: 127 (7.1%)
    CALL: 120 (6.7%)
    SE: 118 (6.6%)
    ADD: 110 (6.1%)
    NOP: 104 (5.8%)
    RND: 104 (5.8%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 705
  Based on: 271 sorting instructions + 217 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1707D01_V1-V6_L6_ASC_C270_527f1f7d.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Suspicious: 15.3% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 128 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [53, 46, 47, 48, 49, 50, 51, 132]
  Changes: V0: 8‚Üí53, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí132
  ‚úì Correct initial test pattern detected
  Achievement cycle: 270

CUDA EXECUTION STATISTICS:
  Total register operations: 16
  Register reads: 133
  Register writes: 128
  Register writes per cycle: 0.474

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 22 locations
       Addresses: ['$20C', '$242', '$276', '$38C', '$3C8', '$5B4', '$5D4', '$60E']
       ... and 14 more
  V1: Modified at 26 locations
       Addresses: ['$25C', '$29A', '$2EC', '$3C0', '$458', '$50C', '$512', '$594']
       ... and 18 more
  V2: Modified at 31 locations
       Addresses: ['$30A', '$31E', '$36C', '$398', '$3DA', '$4C4', '$4D4', '$58E']
       ... and 23 more
  V3: Modified at 30 locations
       Addresses: ['$210', '$214', '$290', '$400', '$47C', '$488', '$4C8', '$4DA']
       ... and 22 more
  V4: Modified at 34 locations
       Addresses: ['$272', '$304', '$344', '$3D0', '$3D2', '$3D4', '$426', '$462']
       ... and 26 more
  V5: Modified at 24 locations
       Addresses: ['$21E', '$2B0', '$358', '$382', '$3A6', '$42C', '$4B6', '$548']
       ... and 16 more
  V6: Modified at 22 locations
       Addresses: ['$22A', '$2D8', '$332', '$35E', '$45A', '$582', '$782', '$846']
       ... and 14 more
  V7: Modified at 16 locations
       Addresses: ['$24E', '$2A2', '$430', '$568', '$580', '$670', '$814', '$824']
       ... and 8 more

CONTROL FLOW ANALYSIS:
  216 control transfers detected:
    $200 ‚Üí $678
    $222 ‚Üí $259
    $246 ‚Üí $FA0
    $254 ‚Üí $76A
    $264 ‚Üí $509
    ... and 211 more transfers
  Potential sorting loops: 116 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  275 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 30 instructions
      $210: LD   V3, #37      ; Load $37 into V3
      $214: RND  V3, #D6      ; V3 = random() AND $D6
      $290: RND  V3, #E9      ; V3 = random() AND $E9
      ... and 27 more
    Compares sorted registers V[3]: 21 instructions
      $21C: SE   V3, V0       ; Skip next instruction if V3 == V0
      $224: SNE  V3, #0E      ; Skip next instruction if V3 != $0E
      $34A: SNE  V3, #9D      ; Skip next instruction if V3 != $9D
      ... and 18 more
    Modifies sorted registers V[5]: 24 instructions
      $21E: ADD  V5, #4A      ; Add $4A to V5 (V5 = (V5 + $4A) & 0xFF)
      $2B0: LD   V5, #1A      ; Load $1A into V5
      $358: RND  V5, #1A      ; V5 = random() AND $1A
      ... and 21 more
    Modifies sorted registers V[6]: 22 instructions
      $22A: ADD  V6, #1E      ; Add $1E to V6 (V6 = (V6 + $1E) & 0xFF)
      $2D8: SUBN V6, VD       ; V6 = (VD - V6) & 0xFF, VF = NOT borrow
      $332: ADD  V6, #DD      ; Add $DD to V6 (V6 = (V6 + $DD) & 0xFF)
      ... and 19 more
    Arithmetic on sorted registers V[2]: 1 instructions
      $24E: ADD  V7, V2       ; V7 = (V7 + V2) & 0xFF, VF = carry
    Modifies sorted registers V[1]: 26 instructions
      $25C: LD   V1, #83      ; Load $83 into V1
      $29A: AND  V1, V6       ; V1 = V1 AND V6, VF = 0
      $2EC: LD   V1, #56      ; Load $56 into V1
      ... and 23 more
    Modifies sorted registers V[4]: 34 instructions
      $272: ADD  V4, #3C      ; Add $3C to V4 (V4 = (V4 + $3C) & 0xFF)
      $304: LD   V4, #66      ; Load $66 into V4
      $344: ADD  V4, #8D      ; Add $8D to V4 (V4 = (V4 + $8D) & 0xFF)
      ... and 31 more
    Compares sorted registers V[4]: 13 instructions
      $28A: SE   V4, #3B      ; Skip next instruction if V4 == $3B
      $3AC: SE   V4, #87      ; Skip next instruction if V4 == $87
      $3E4: SNE  V4, #DC      ; Skip next instruction if V4 != $DC
      ... and 10 more
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $294: OR   V8, V3       ; V8 = V8 OR V3, VF = 0
    Compares sorted registers V[6]: 20 instructions
      $29C: SE   V6, #A8      ; Skip next instruction if V6 == $A8
      $2E2: SE   V6, #B0      ; Skip next instruction if V6 == $B0
      $3BC: SE   V6, #C8      ; Skip next instruction if V6 == $C8
      ... and 17 more
    Register transfer involving V[2]: 1 instructions
      $2C0: LD   B, V2        ; Store BCD of V2 at [I], [I+1], [I+2]
    Logical operation on V[2] (sets VF=0 in CUDA): 2 instructions
      $2E8: XOR  VF, V2       ; VF = VF XOR V2, VF = 0
      $78C: AND  V0, V2       ; V0 = V0 AND V2, VF = 0
    Arithmetic on sorted registers V[1]: 1 instructions
      $2FE: SUB  VC, V1       ; VC = (VC - V1) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2]: 18 instructions
      $302: SE   V2, #19      ; Skip next instruction if V2 == $19
      $3AE: SE   V2, #46      ; Skip next instruction if V2 == $46
      $4A4: SE   V2, #83      ; Skip next instruction if V2 == $83
      ... and 15 more
    Modifies sorted registers V[2]: 31 instructions
      $30A: RND  V2, #9A      ; V2 = random() AND $9A
      $31E: LD   V2, #7B      ; Load $7B into V2
      $36C: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB
      ... and 28 more
    Compares sorted registers V[2, 3]: 2 instructions
      $378: SNE  V3, V2       ; Skip next instruction if V3 != V2
      $8FE: SE   V3, V2       ; Skip next instruction if V3 == V2
    Compares sorted registers V[1]: 12 instructions
      $448: SNE  V1, #C4      ; Skip next instruction if V1 != $C4
      $546: SNE  V1, #46      ; Skip next instruction if V1 != $46
      $552: SNE  V1, #E8      ; Skip next instruction if V1 != $E8
      ... and 9 more
    Arithmetic on sorted registers V[6]: 2 instructions
      $45C: ADD  VF, V6       ; VF = (VF + V6) & 0xFF, VF = carry
      $BE4: ADD  V0, V6       ; V0 = (V0 + V6) & 0xFF, VF = carry
    Compares sorted registers V[5]: 10 instructions
      $4F6: SNE  V5, #09      ; Skip next instruction if V5 != $09
      $56E: SNE  V5, #15      ; Skip next instruction if V5 != $15
      $682: SE   V5, #54      ; Skip next instruction if V5 == $54
      ... and 7 more
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $6BA: XOR  V0, V6       ; V0 = V0 XOR V6, VF = 0
    Register transfer involving V[6]: 1 instructions
      $888: LD   VF, V6       ; Load V6 into VF
    Arithmetic on sorted registers V[3]: 1 instructions
      $994: SUBN VA, V3       ; VA = (V3 - VA) & 0xFF, VF = NOT borrow
    Register transfer involving V[5]: 1 instructions
      $E34: LD   VF, V5       ; Load V5 into VF

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 498 (27.8%)
    LD: 211 (11.8%)
    JP: 207 (11.6%)
    SE: 134 (7.5%)
    ADD: 131 (7.3%)
    RND: 128 (7.1%)
    NOP: 127 (7.1%)
    DRW: 108 (6.0%)
    CALL: 104 (5.8%)
    SNE: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 707
  Based on: 275 sorting instructions + 216 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1748D01_V1-V6_L6_ASC_C1090_3ec1e186.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 111 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [17, 46, 47, 48, 49, 50, 51, 132]
  Changes: V0: 8‚Üí17, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí132
  ‚úì Correct initial test pattern detected
  Achievement cycle: 1090

CUDA EXECUTION STATISTICS:
  Total register operations: 33
  Register reads: 544
  Register writes: 1154
  Register writes per cycle: 1.059

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 35 locations
       Addresses: ['$388', '$38A', '$3B2', '$4D6', '$654', '$656', '$65E', '$67E']
       ... and 27 more
  V1: Modified at 18 locations
       Addresses: ['$22C', '$2E6', '$502', '$540', '$656', '$868', '$8D0', '$96C']
       ... and 10 more
  V2: Modified at 26 locations
       Addresses: ['$230', '$256', '$308', '$324', '$3CE', '$4FA', '$5BC', '$656']
       ... and 18 more
  V3: Modified at 22 locations
       Addresses: ['$30C', '$372', '$3C6', '$44A', '$476', '$538', '$5B6', '$60E']
       ... and 14 more
  V4: Modified at 30 locations
       Addresses: ['$248', '$276', '$298', '$2EE', '$3D2', '$444', '$49A', '$4A2']
       ... and 22 more
  V5: Modified at 20 locations
       Addresses: ['$23E', '$240', '$3EE', '$3FC', '$496', '$52E', '$584', '$792']
       ... and 12 more
  V6: Modified at 27 locations
       Addresses: ['$42A', '$456', '$526', '$5B8', '$610', '$6DC', '$788', '$816']
       ... and 19 more
  V7: Modified at 26 locations
       Addresses: ['$2C2', '$3C0', '$3DA', '$408', '$470', '$660', '$672', '$754']
       ... and 18 more

CONTROL FLOW ANALYSIS:
  225 control transfers detected:
    $20A ‚Üí $853
    $20E ‚Üí $350
    $23A ‚Üí $E38
    $24C ‚Üí $3B2
    $268 ‚Üí $49C
    ... and 220 more transfers
  Potential sorting loops: 126 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  253 instructions identified as sorting-related:
    Compares sorted registers V[1]: 11 instructions
      $226: SE   V1, #3A      ; Skip next instruction if V1 == $3A
      $44C: SNE  V1, #88      ; Skip next instruction if V1 != $88
      $4AA: SE   V1, #7B      ; Skip next instruction if V1 == $7B
      ... and 8 more
    Modifies sorted registers V[1]: 17 instructions
      $22C: ADD  V1, #69      ; Add $69 to V1 (V1 = (V1 + $69) & 0xFF)
      $2E6: SHL  V1           ; V1 = (V1 << 1) & 0xFF, VF = MSB
      $502: ADD  V1, #18      ; Add $18 to V1 (V1 = (V1 + $18) & 0xFF)
      ... and 14 more
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $22E: AND  V9, V6       ; V9 = V9 AND V6, VF = 0
    Modifies sorted registers V[2]: 25 instructions
      $230: OR   V2, V6       ; V2 = V2 OR V6, VF = 0
      $256: RND  V2, #53      ; V2 = random() AND $53
      $308: LD   V2, #74      ; Load $74 into V2
      ... and 22 more
    Modifies sorted registers V[5]: 20 instructions
      $23E: ADD  V5, #20      ; Add $20 to V5 (V5 = (V5 + $20) & 0xFF)
      $240: OR   V5, V5       ; V5 = V5 OR V5, VF = 0
      $3EE: LD   V5, #7B      ; Load $7B into V5
      ... and 17 more
    Compares sorted registers V[3]: 21 instructions
      $246: SE   V3, #5D      ; Skip next instruction if V3 == $5D
      $25C: SE   V3, #43      ; Skip next instruction if V3 == $43
      $2F6: SE   V3, #F1      ; Skip next instruction if V3 == $F1
      ... and 18 more
    Modifies sorted registers V[4]: 29 instructions
      $248: LD   V4, #74      ; Load $74 into V4
      $276: LD   V4, #9A      ; Load $9A into V4
      $298: ADD  V4, #CB      ; Add $CB to V4 (V4 = (V4 + $CB) & 0xFF)
      ... and 26 more
    Compares sorted registers V[5]: 13 instructions
      $262: SE   V5, #5C      ; Skip next instruction if V5 == $5C
      $31C: SNE  V5, #C4      ; Skip next instruction if V5 != $C4
      $6C6: SNE  V5, #0A      ; Skip next instruction if V5 != $0A
      ... and 10 more
    Compares sorted registers V[4]: 17 instructions
      $266: SE   V4, #17      ; Skip next instruction if V4 == $17
      $320: SNE  V4, #AE      ; Skip next instruction if V4 != $AE
      $35E: SNE  V4, #3A      ; Skip next instruction if V4 != $3A
      ... and 14 more
    Compares sorted registers V[6]: 17 instructions
      $274: SNE  V6, #10      ; Skip next instruction if V6 != $10
      $2DA: SE   V6, #FA      ; Skip next instruction if V6 == $FA
      $3F6: SNE  V6, #08      ; Skip next instruction if V6 != $08
      ... and 14 more
    Arithmetic on sorted registers V[2]: 3 instructions
      $296: ADD  VE, V2       ; VE = (VE + V2) & 0xFF, VF = carry
      $518: SUB  V8, V2       ; V8 = (V8 - V2) & 0xFF, VF = NOT borrow
      $B50: SUB  VB, V2       ; VB = (VB - V2) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2]: 16 instructions
      $29A: SE   V2, #71      ; Skip next instruction if V2 == $71
      $494: SNE  V2, #2F      ; Skip next instruction if V2 != $2F
      $548: SE   V2, #8B      ; Skip next instruction if V2 == $8B
      ... and 13 more
    Modifies sorted registers V[3]: 21 instructions
      $30C: AND  V3, V3       ; V3 = V3 AND V3, VF = 0
      $372: LD   V3, #87      ; Load $87 into V3
      $3C6: LD   V3, #8F      ; Load $8F into V3
      ... and 18 more
    Modifies sorted registers V[6]: 27 instructions
      $42A: LD   V6, #06      ; Load $06 into V6
      $456: RND  V6, #DD      ; V6 = random() AND $DD
      $526: ADD  V6, #07      ; Add $07 to V6 (V6 = (V6 + $07) & 0xFF)
      ... and 24 more
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $522: OR   V9, V4       ; V9 = V9 OR V4, VF = 0
      $ACA: OR   V0, V4       ; V0 = V0 OR V4, VF = 0
    Register transfer involving V[3]: 1 instructions
      $560: LD   VC, V3       ; Load V3 into VC
    Modifies sorted registers V[1, 2, 3, 4]: 1 instructions
      $656: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5
    Arithmetic on sorted registers V[3]: 4 instructions
      $658: SUBN VA, V3       ; VA = (V3 - VA) & 0xFF, VF = NOT borrow
      $70C: SUB  VC, V3       ; VC = (VC - V3) & 0xFF, VF = NOT borrow
      $B54: ADD  VE, V3       ; VE = (VE + V3) & 0xFF, VF = carry
      ... and 1 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $672: OR   V7, V2       ; V7 = V7 OR V2, VF = 0
    Arithmetic on sorted registers V[4]: 3 instructions
      $A6C: ADD  V8, V4       ; V8 = (V8 + V4) & 0xFF, VF = carry
      $B30: ADD  V0, V4       ; V0 = (V0 + V4) & 0xFF, VF = carry
      $DEE: SUBN VE, V4       ; VE = (V4 - VE) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3, 4]: 1 instructions
      $CAE: SNE  V3, V4       ; Skip next instruction if V3 != V4
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $D06: AND  V9, V3       ; V9 = V9 AND V3, VF = 0
    Register transfer involving V[4]: 1 instructions
      $D26: LD   V7, V4       ; Load V4 into V7

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 480 (26.8%)
    LD: 240 (13.4%)
    JP: 230 (12.8%)
    SE: 126 (7.0%)
    SNE: 116 (6.5%)
    ADD: 115 (6.4%)
    CALL: 111 (6.2%)
    RND: 111 (6.2%)
    NOP: 108 (6.0%)
    DRW: 107 (6.0%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 703
  Based on: 253 sorting instructions + 225 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1754D01_V1-V6_L6_ASC_C580_50a8e70c.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 126 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [20, 46, 47, 48, 49, 50, 51, 0]
  Changes: V0: 8‚Üí20, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí0
  ‚úì Correct initial test pattern detected
  Achievement cycle: 580

CUDA EXECUTION STATISTICS:
  Total register operations: 36
  Register reads: 304
  Register writes: 570
  Register writes per cycle: 0.983

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 22 locations
       Addresses: ['$2DA', '$306', '$3AA', '$3F6', '$48A', '$498', '$572', '$5B6']
       ... and 14 more
  V1: Modified at 24 locations
       Addresses: ['$2EA', '$318', '$3CA', '$556', '$6A8', '$6B0', '$6B6', '$726']
       ... and 16 more
  V2: Modified at 32 locations
       Addresses: ['$218', '$226', '$2CC', '$322', '$346', '$37C', '$3A4', '$452']
       ... and 24 more
  V3: Modified at 25 locations
       Addresses: ['$2E6', '$390', '$3BC', '$3D0', '$422', '$4CA', '$550', '$578']
       ... and 17 more
  V4: Modified at 28 locations
       Addresses: ['$2D6', '$31A', '$46A', '$4BE', '$4F8', '$534', '$5E0', '$600']
       ... and 20 more
  V5: Modified at 32 locations
       Addresses: ['$220', '$23E', '$310', '$3AC', '$3C0', '$438', '$45A', '$4E4']
       ... and 24 more
  V6: Modified at 25 locations
       Addresses: ['$28A', '$326', '$362', '$478', '$528', '$606', '$60E', '$668']
       ... and 17 more
  V7: Modified at 24 locations
       Addresses: ['$366', '$3C6', '$402', '$484', '$5C6', '$6BC', '$70A', '$710']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  237 control transfers detected:
    $200 ‚Üí $DB6
    $204 ‚Üí $A63
    $20E ‚Üí $202 (LOOP)
    $222 ‚Üí $059 (LOOP)
    $23C ‚Üí $2D0
    ... and 232 more transfers
  Potential sorting loops: 138 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  263 instructions identified as sorting-related:
    Compares sorted registers V[3]: 19 instructions
      $214: SE   V3, #37      ; Skip next instruction if V3 == $37
      $2A2: SNE  V3, #88      ; Skip next instruction if V3 != $88
      $2C8: SE   V3, #79      ; Skip next instruction if V3 == $79
      ... and 16 more
    Modifies sorted registers V[2]: 31 instructions
      $218: RND  V2, #17      ; V2 = random() AND $17
      $226: LD   V2, #DF      ; Load $DF into V2
      $2CC: LD   V2, #A4      ; Load $A4 into V2
      ... and 28 more
    Modifies sorted registers V[5]: 32 instructions
      $220: RND  V5, #38      ; V5 = random() AND $38
      $23E: LD   V5, VE       ; Load VE into V5
      $310: ADD  V5, #4B      ; Add $4B to V5 (V5 = (V5 + $4B) & 0xFF)
      ... and 29 more
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $22C: OR   V8, V4       ; V8 = V8 OR V4, VF = 0
      $3B8: XOR  VD, V4       ; VD = VD XOR V4, VF = 0
    Compares sorted registers V[6]: 15 instructions
      $232: SNE  V6, #BA      ; Skip next instruction if V6 != $BA
      $44E: SNE  V6, #E3      ; Skip next instruction if V6 != $E3
      $4A4: SNE  V6, #C6      ; Skip next instruction if V6 != $C6
      ... and 12 more
    Compares sorted registers V[2]: 8 instructions
      $234: SE   V2, #E2      ; Skip next instruction if V2 == $E2
      $270: SNE  V2, #74      ; Skip next instruction if V2 != $74
      $27C: SE   V2, VD       ; Skip next instruction if V2 == VD
      ... and 5 more
    Modifies sorted registers V[6]: 25 instructions
      $28A: ADD  V6, VA       ; V6 = (V6 + VA) & 0xFF, VF = carry
      $326: LD   V6, #BF      ; Load $BF into V6
      $362: AND  V6, V3       ; V6 = V6 AND V3, VF = 0
      ... and 22 more
    Compares sorted registers V[4]: 11 instructions
      $2BE: SNE  V4, #82      ; Skip next instruction if V4 != $82
      $3E2: SNE  V4, #9B      ; Skip next instruction if V4 != $9B
      $6AE: SE   V4, #64      ; Skip next instruction if V4 == $64
      ... and 8 more
    Modifies sorted registers V[4]: 28 instructions
      $2D6: LD   V4, #F0      ; Load $F0 into V4
      $31A: ADD  V4, #51      ; Add $51 to V4 (V4 = (V4 + $51) & 0xFF)
      $46A: LD   V4, #32      ; Load $32 into V4
      ... and 25 more
    Modifies sorted registers V[3]: 25 instructions
      $2E6: ADD  V3, #C3      ; Add $C3 to V3 (V3 = (V3 + $C3) & 0xFF)
      $390: RND  V3, #B6      ; V3 = random() AND $B6
      $3BC: ADD  V3, #B2      ; Add $B2 to V3 (V3 = (V3 + $B2) & 0xFF)
      ... and 22 more
    Modifies sorted registers V[1]: 23 instructions
      $2EA: RND  V1, #86      ; V1 = random() AND $86
      $318: LD   V1, #3D      ; Load $3D into V1
      $3CA: SUB  V1, V9       ; V1 = (V1 - V9) & 0xFF, VF = NOT borrow
      ... and 20 more
    Compares sorted registers V[1]: 13 instructions
      $334: SNE  V1, #EB      ; Skip next instruction if V1 != $EB
      $3B0: SNE  V1, #50      ; Skip next instruction if V1 != $50
      $504: SNE  V1, #63      ; Skip next instruction if V1 != $63
      ... and 10 more
    Compares sorted registers V[5]: 16 instructions
      $35E: SNE  V5, #AA      ; Skip next instruction if V5 != $AA
      $524: SE   V5, #51      ; Skip next instruction if V5 == $51
      $610: SE   V5, #EF      ; Skip next instruction if V5 == $EF
      ... and 13 more
    Arithmetic on sorted registers V[5]: 1 instructions
      $36E: SUB  VC, V5       ; VC = (VC - V5) & 0xFF, VF = NOT borrow
    Register transfer involving V[4]: 2 instructions
      $376: LD   VD, V4       ; Load V4 into VD
      $3F6: LD   V0, V4       ; Load V4 into V0
    Arithmetic on sorted registers V[4]: 2 instructions
      $402: SUBN V7, V4       ; V7 = (V4 - V7) & 0xFF, VF = NOT borrow
      $AE2: ADD  VB, V4       ; VB = (VB + V4) & 0xFF, VF = carry
    Compares sorted registers V[2, 5]: 1 instructions
      $5D4: SE   V2, V5       ; Skip next instruction if V2 == V5
    Register transfer involving V[1]: 2 instructions
      $78E: LD   VB, V1       ; Load V1 into VB
      $AD2: LD   V7, V1       ; Load V1 into V7
    Compares sorted registers V[2, 3]: 1 instructions
      $85E: SNE  V2, V3       ; Skip next instruction if V2 != V3
    Modifies sorted registers V[1, 2]: 1 instructions
      $992: LD   V2, [I]      ; Load V0-V2 from [I], then I += 3
    Arithmetic on sorted registers V[2]: 1 instructions
      $9DE: SUB  V8, V2       ; V8 = (V8 - V2) & 0xFF, VF = NOT borrow
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $A12: OR   VC, V1       ; VC = VC OR V1, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $A40: ADD  VE, V3       ; VE = (VE + V3) & 0xFF, VF = carry
    Arithmetic on sorted registers V[1]: 1 instructions
      $A8C: SUB  V7, V1       ; V7 = (V7 - V1) & 0xFF, VF = NOT borrow
    Register transfer involving V[3]: 1 instructions
      $E6E: LD   VC, V3       ; Load V3 into VC

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 463 (25.8%)
    LD: 240 (13.4%)
    JP: 211 (11.8%)
    SNE: 130 (7.3%)
    RND: 126 (7.0%)
    NOP: 121 (6.8%)
    CALL: 120 (6.7%)
    ADD: 120 (6.7%)
    DRW: 110 (6.1%)
    SE: 98 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 737
  Based on: 263 sorting instructions + 237 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1771D01_V1-V6_L6_ASC_C420_4f8ec0a0.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 112 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [149, 46, 47, 48, 49, 50, 51, 16]
  Changes: V0: 8‚Üí149, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí16
  ‚úì Correct initial test pattern detected
  Achievement cycle: 420

CUDA EXECUTION STATISTICS:
  Total register operations: 8
  Register reads: 248
  Register writes: 599
  Register writes per cycle: 1.426

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$200', '$208', '$2D0', '$2D8', '$300', '$342', '$3CA', '$43E']
       ... and 22 more
  V1: Modified at 31 locations
       Addresses: ['$2EA', '$300', '$326', '$34A', '$47C', '$486', '$496', '$576']
       ... and 23 more
  V2: Modified at 26 locations
       Addresses: ['$20E', '$300', '$40A', '$4F8', '$4FA', '$53E', '$548', '$56C']
       ... and 18 more
  V3: Modified at 31 locations
       Addresses: ['$300', '$31C', '$420', '$46A', '$478', '$482', '$5A2', '$5EC']
       ... and 23 more
  V4: Modified at 28 locations
       Addresses: ['$2AA', '$2B2', '$2BC', '$300', '$386', '$39A', '$444', '$4AC']
       ... and 20 more
  V5: Modified at 22 locations
       Addresses: ['$21C', '$28A', '$300', '$502', '$540', '$92C', '$956', '$97A']
       ... and 14 more
  V6: Modified at 27 locations
       Addresses: ['$224', '$23E', '$300', '$3A8', '$46E', '$4EA', '$570', '$620']
       ... and 19 more
  V7: Modified at 30 locations
       Addresses: ['$402', '$452', '$4A2', '$4B8', '$51A', '$582', '$624', '$680']
       ... and 22 more

CONTROL FLOW ANALYSIS:
  228 control transfers detected:
    $214 ‚Üí $F00
    $238 ‚Üí $96A
    $254 ‚Üí $142 (LOOP)
    $25A ‚Üí $9DE
    $262 ‚Üí $95A
    ... and 223 more transfers
  Potential sorting loops: 123 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  267 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 24 instructions
      $20E: RND  V2, #0E      ; V2 = random() AND $0E
      $40A: ADD  V2, #F8      ; Add $F8 to V2 (V2 = (V2 + $F8) & 0xFF)
      $4F8: RND  V2, #E3      ; V2 = random() AND $E3
      ... and 21 more
    Compares sorted registers V[5]: 15 instructions
      $216: SE   V5, V7       ; Skip next instruction if V5 == V7
      $27C: SE   V5, #DE      ; Skip next instruction if V5 == $DE
      $3F2: SE   V5, VE       ; Skip next instruction if V5 == VE
      ... and 12 more
    Modifies sorted registers V[5]: 20 instructions
      $21C: ADD  V5, #8D      ; Add $8D to V5 (V5 = (V5 + $8D) & 0xFF)
      $28A: ADD  V5, #21      ; Add $21 to V5 (V5 = (V5 + $21) & 0xFF)
      $502: RND  V5, #9A      ; V5 = random() AND $9A
      ... and 17 more
    Modifies sorted registers V[6]: 25 instructions
      $224: RND  V6, #F4      ; V6 = random() AND $F4
      $23E: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      $3A8: LD   V6, #C9      ; Load $C9 into V6
      ... and 22 more
    Compares sorted registers V[1]: 17 instructions
      $24A: SE   V1, #AC      ; Skip next instruction if V1 == $AC
      $2DC: SE   V1, #57      ; Skip next instruction if V1 == $57
      $2EE: SNE  V1, #24      ; Skip next instruction if V1 != $24
      ... and 14 more
    Compares sorted registers V[2]: 12 instructions
      $266: SNE  V2, #B8      ; Skip next instruction if V2 != $B8
      $2FC: SNE  V2, #C5      ; Skip next instruction if V2 != $C5
      $316: SNE  V2, #20      ; Skip next instruction if V2 != $20
      ... and 9 more
    Compares sorted registers V[6]: 19 instructions
      $268: SE   V6, VD       ; Skip next instruction if V6 == VD
      $338: SE   V6, #D7      ; Skip next instruction if V6 == $D7
      $448: SE   V6, #F8      ; Skip next instruction if V6 == $F8
      ... and 16 more
    Modifies sorted registers V[4]: 26 instructions
      $2AA: LD   V4, #14      ; Load $14 into V4
      $2B2: XOR  V4, V9       ; V4 = V4 XOR V9, VF = 0
      $2BC: ADD  V4, #16      ; Add $16 to V4 (V4 = (V4 + $16) & 0xFF)
      ... and 23 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $2D0: XOR  V0, V2       ; V0 = V0 XOR V2, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $2DE: ADD  VE, V6       ; VE = (VE + V6) & 0xFF, VF = carry
    Modifies sorted registers V[1]: 29 instructions
      $2EA: SHL  V1           ; V1 = (V1 << 1) & 0xFF, VF = MSB
      $326: LD   V1, #AE      ; Load $AE into V1
      $34A: LD   V1, #55      ; Load $55 into V1
      ... and 26 more
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 2 instructions
      $300: LD   V6, [I]      ; Load V0-V6 from [I], then I += 7
      $956: LD   V7, [I]      ; Load V0-V7 from [I], then I += 8
    Modifies sorted registers V[3]: 29 instructions
      $31C: RND  V3, #17      ; V3 = random() AND $17
      $420: LD   V3, #87      ; Load $87 into V3
      $46A: LD   V3, #06      ; Load $06 into V3
      ... and 26 more
    Register transfer involving V[4]: 1 instructions
      $378: LD   DT, V4       ; Load V4 into delay timer
    Compares sorted registers V[4, 6]: 1 instructions
      $396: SE   V4, V6       ; Skip next instruction if V4 == V6
    Compares sorted registers V[3]: 16 instructions
      $3AE: SNE  V3, V0       ; Skip next instruction if V3 != V0
      $692: SNE  V3, #74      ; Skip next instruction if V3 != $74
      $6AE: SE   V3, #08      ; Skip next instruction if V3 == $08
      ... and 13 more
    Compares sorted registers V[4]: 14 instructions
      $3C6: SE   V4, #A7      ; Skip next instruction if V4 == $A7
      $3D2: SNE  V4, #E9      ; Skip next instruction if V4 != $E9
      $442: SE   V4, #46      ; Skip next instruction if V4 == $46
      ... and 11 more
    Arithmetic on sorted registers V[5]: 1 instructions
      $492: SUBN VE, V5       ; VE = (V5 - VE) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 2 instructions
      $4EC: ADD  VF, V2       ; VF = (VF + V2) & 0xFF, VF = carry
      $D52: SUB  V7, V2       ; V7 = (V7 - V2) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 4]: 1 instructions
      $55C: SE   V2, V4       ; Skip next instruction if V2 == V4
    Arithmetic on sorted registers V[3]: 1 instructions
      $622: SUBN VB, V3       ; VB = (V3 - VB) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $6BC: OR   VF, V3       ; VF = VF OR V3, VF = 0
      $F40: OR   V7, V3       ; V7 = V7 OR V3, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $6C2: XOR  VA, V6       ; VA = VA XOR V6, VF = 0
    Arithmetic on sorted registers V[4]: 2 instructions
      $84A: SUBN VF, V4       ; VF = (V4 - VF) & 0xFF, VF = NOT borrow
      $9BE: SUB  V9, V4       ; V9 = (V9 - V4) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $852: OR   VB, V4       ; VB = VB OR V4, VF = 0
    Compares sorted registers V[2, 5]: 1 instructions
      $9E0: SE   V5, V2       ; Skip next instruction if V5 == V2
    Compares sorted registers V[3, 6]: 1 instructions
      $BE4: SE   V3, V6       ; Skip next instruction if V3 == V6
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $DD6: AND  VC, V5       ; VC = VC AND V5, VF = 0
    Register transfer involving V[1]: 1 instructions
      $ED6: LD   VB, V1       ; Load V1 into VB

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 485 (27.1%)
    LD: 235 (13.1%)
    JP: 192 (10.7%)
    SE: 134 (7.5%)
    CALL: 126 (7.0%)
    DRW: 125 (7.0%)
    ADD: 122 (6.8%)
    RND: 112 (6.2%)
    SNE: 106 (5.9%)
    NOP: 98 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 723
  Based on: 267 sorting instructions + 228 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1791D01_V1-V6_L6_ASC_C560_26ba03b6.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 113 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [129, 46, 47, 48, 49, 50, 51, 132]
  Changes: V0: 8‚Üí129, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí132
  ‚úì Correct initial test pattern detected
  Achievement cycle: 560

CUDA EXECUTION STATISTICS:
  Total register operations: 26
  Register reads: 318
  Register writes: 693
  Register writes per cycle: 1.238

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 31 locations
       Addresses: ['$206', '$22A', '$248', '$2EA', '$356', '$362', '$386', '$3B2']
       ... and 23 more
  V1: Modified at 23 locations
       Addresses: ['$24E', '$288', '$29A', '$2C2', '$2D2', '$312', '$348', '$3DE']
       ... and 15 more
  V2: Modified at 34 locations
       Addresses: ['$256', '$294', '$2F4', '$358', '$460', '$4A0', '$4F2', '$524']
       ... and 26 more
  V3: Modified at 22 locations
       Addresses: ['$314', '$326', '$328', '$32A', '$346', '$364', '$436', '$4EC']
       ... and 14 more
  V4: Modified at 14 locations
       Addresses: ['$264', '$2B8', '$3E6', '$49E', '$60A', '$6B6', '$73A', '$76E']
       ... and 6 more
  V5: Modified at 27 locations
       Addresses: ['$28E', '$2D4', '$3C2', '$3E4', '$3F6', '$484', '$4E0', '$548']
       ... and 19 more
  V6: Modified at 23 locations
       Addresses: ['$204', '$25A', '$32C', '$3A8', '$538', '$628', '$68E', '$710']
       ... and 15 more
  V7: Modified at 25 locations
       Addresses: ['$214', '$330', '$380', '$510', '$5C6', '$5E6', '$62C', '$65C']
       ... and 17 more

CONTROL FLOW ANALYSIS:
  212 control transfers detected:
    $200 ‚Üí $282
    $210 ‚Üí $3C4
    $224 ‚Üí $C6F
    $238 ‚Üí $3FA
    $23A ‚Üí $1B6 (LOOP)
    ... and 207 more transfers
  Potential sorting loops: 123 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  240 instructions identified as sorting-related:
    Modifies sorted registers V[6]: 23 instructions
      $204: RND  V6, #97      ; V6 = random() AND $97
      $25A: ADD  V6, V5       ; V6 = (V6 + V5) & 0xFF, VF = carry
      $32C: RND  V6, #62      ; V6 = random() AND $62
      ... and 20 more
    Compares sorted registers V[4]: 17 instructions
      $234: SE   V4, #1A      ; Skip next instruction if V4 == $1A
      $3B6: SE   V4, #2E      ; Skip next instruction if V4 == $2E
      $47E: SNE  V4, #4E      ; Skip next instruction if V4 != $4E
      ... and 14 more
    Compares sorted registers V[6]: 15 instructions
      $242: SE   V6, #16      ; Skip next instruction if V6 == $16
      $30C: SNE  V6, #2F      ; Skip next instruction if V6 != $2F
      $56E: SNE  V6, #77      ; Skip next instruction if V6 != $77
      ... and 12 more
    Compares sorted registers V[1]: 6 instructions
      $244: SNE  V1, #CF      ; Skip next instruction if V1 != $CF
      $282: SE   V1, #43      ; Skip next instruction if V1 == $43
      $322: SNE  V1, #F6      ; Skip next instruction if V1 != $F6
      ... and 3 more
    Modifies sorted registers V[1]: 23 instructions
      $24E: RND  V1, #2B      ; V1 = random() AND $2B
      $288: ADD  V1, #B1      ; Add $B1 to V1 (V1 = (V1 + $B1) & 0xFF)
      $29A: LD   V1, #3C      ; Load $3C into V1
      ... and 20 more
    Modifies sorted registers V[2]: 34 instructions
      $256: RND  V2, #DE      ; V2 = random() AND $DE
      $294: XOR  V2, VA       ; V2 = V2 XOR VA, VF = 0
      $2F4: OR   V2, VD       ; V2 = V2 OR VD, VF = 0
      ... and 31 more
    Modifies sorted registers V[4]: 14 instructions
      $264: ADD  V4, #E1      ; Add $E1 to V4 (V4 = (V4 + $E1) & 0xFF)
      $2B8: LD   V4, #A6      ; Load $A6 into V4
      $3E6: ADD  V4, #3B      ; Add $3B to V4 (V4 = (V4 + $3B) & 0xFF)
      ... and 11 more
    Compares sorted registers V[2]: 17 instructions
      $26C: SE   V2, #B3      ; Skip next instruction if V2 == $B3
      $2D6: SE   V2, #69      ; Skip next instruction if V2 == $69
      $398: SNE  V2, #B0      ; Skip next instruction if V2 != $B0
      ... and 14 more
    Compares sorted registers V[5]: 16 instructions
      $284: SNE  V5, #01      ; Skip next instruction if V5 != $01
      $360: SE   V5, #15      ; Skip next instruction if V5 == $15
      $39A: SNE  V5, #B9      ; Skip next instruction if V5 != $B9
      ... and 13 more
    Modifies sorted registers V[5]: 27 instructions
      $28E: ADD  V5, #56      ; Add $56 to V5 (V5 = (V5 + $56) & 0xFF)
      $2D4: LD   V5, #DD      ; Load $DD into V5
      $3C2: SUB  V5, V1       ; V5 = (V5 - V1) & 0xFF, VF = NOT borrow
      ... and 24 more
    Modifies sorted registers V[3]: 22 instructions
      $314: RND  V3, #F3      ; V3 = random() AND $F3
      $326: LD   V3, #46      ; Load $46 into V3
      $328: RND  V3, #CB      ; V3 = random() AND $CB
      ... and 19 more
    Compares sorted registers V[3]: 16 instructions
      $3D2: SNE  V3, #B8      ; Skip next instruction if V3 != $B8
      $432: SNE  V3, #B4      ; Skip next instruction if V3 != $B4
      $4AE: SNE  V3, #2D      ; Skip next instruction if V3 != $2D
      ... and 13 more
    Register transfer involving V[1, 2, 3, 4, 5, 6]: 1 instructions
      $41E: LD   [I], VD      ; Store V0-VD at [I], then I += 14
    Arithmetic on sorted registers V[4]: 1 instructions
      $72A: SUB  VA, V4       ; VA = (VA - V4) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $898: XOR  VD, V4       ; VD = VD XOR V4, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $8D0: ADD  V9, V3       ; V9 = (V9 + V3) & 0xFF, VF = carry
    Arithmetic on sorted registers V[6]: 1 instructions
      $B8E: SUB  V0, V6       ; V0 = (V0 - V6) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[1]: 1 instructions
      $BE4: SUB  VA, V1       ; VA = (VA - V1) & 0xFF, VF = NOT borrow
    Register transfer involving V[4]: 1 instructions
      $C1A: LD   VB, V4       ; Load V4 into VB
    Arithmetic on sorted registers V[5]: 1 instructions
      $CDE: SUB  V8, V5       ; V8 = (V8 - V5) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 3]: 1 instructions
      $DDA: SNE  V2, V3       ; Skip next instruction if V2 != V3
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $ECA: OR   V7, V2       ; V7 = V7 OR V2, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 509 (28.4%)
    LD: 210 (11.7%)
    JP: 205 (11.4%)
    DRW: 126 (7.0%)
    ADD: 124 (6.9%)
    NOP: 122 (6.8%)
    SNE: 119 (6.6%)
    CALL: 114 (6.4%)
    RND: 113 (6.3%)
    SE: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 664
  Based on: 240 sorting instructions + 212 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1794D01_V1-V6_L6_ASC_C480_324899af.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 97 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [16, 46, 47, 48, 49, 50, 51, 16]
  Changes: V0: 8‚Üí16, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí16
  ‚úì Correct initial test pattern detected
  Achievement cycle: 480

CUDA EXECUTION STATISTICS:
  Total register operations: 28
  Register reads: 226
  Register writes: 304
  Register writes per cycle: 0.633

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 25 locations
       Addresses: ['$3D8', '$43A', '$4FE', '$5EE', '$720', '$768', '$76C', '$802']
       ... and 17 more
  V1: Modified at 25 locations
       Addresses: ['$21C', '$23C', '$272', '$2AE', '$2F0', '$306', '$350', '$3BC']
       ... and 17 more
  V2: Modified at 18 locations
       Addresses: ['$2B4', '$392', '$3A2', '$3D0', '$4B6', '$572', '$580', '$7C2']
       ... and 10 more
  V3: Modified at 26 locations
       Addresses: ['$286', '$292', '$2AC', '$3FE', '$4A6', '$504', '$57C', '$61C']
       ... and 18 more
  V4: Modified at 25 locations
       Addresses: ['$22C', '$478', '$516', '$5AC', '$606', '$60C', '$722', '$73E']
       ... and 17 more
  V5: Modified at 30 locations
       Addresses: ['$312', '$3B6', '$49E', '$522', '$528', '$52C', '$5E8', '$710']
       ... and 22 more
  V6: Modified at 18 locations
       Addresses: ['$454', '$458', '$5AE', '$5B8', '$6A0', '$6EA', '$71C', '$752']
       ... and 10 more
  V7: Modified at 24 locations
       Addresses: ['$252', '$2C0', '$2DE', '$2E2', '$2EC', '$3E2', '$51C', '$590']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  235 control transfers detected:
    $20E ‚Üí $B0E
    $236 ‚Üí $E70
    $24A ‚Üí $EFC
    $254 ‚Üí $FA8
    $2B0 ‚Üí $07F (LOOP)
    ... and 230 more transfers
  Potential sorting loops: 135 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  250 instructions identified as sorting-related:
    Compares sorted registers V[6]: 14 instructions
      $206: SE   V6, #C8      ; Skip next instruction if V6 == $C8
      $39E: SNE  V6, #8D      ; Skip next instruction if V6 != $8D
      $520: SNE  V6, #B7      ; Skip next instruction if V6 != $B7
      ... and 11 more
    Modifies sorted registers V[1]: 25 instructions
      $21C: LD   V1, #73      ; Load $73 into V1
      $23C: XOR  V1, VE       ; V1 = V1 XOR VE, VF = 0
      $272: ADD  V1, #73      ; Add $73 to V1 (V1 = (V1 + $73) & 0xFF)
      ... and 22 more
    Compares sorted registers V[1]: 12 instructions
      $228: SE   V1, #00      ; Skip next instruction if V1 == $00
      $2B8: SE   V1, #91      ; Skip next instruction if V1 == $91
      $46C: SE   V1, #6B      ; Skip next instruction if V1 == $6B
      ... and 9 more
    Modifies sorted registers V[4]: 25 instructions
      $22C: LD   V4, #38      ; Load $38 into V4
      $478: ADD  V4, #F7      ; Add $F7 to V4 (V4 = (V4 + $F7) & 0xFF)
      $516: ADD  V4, #24      ; Add $24 to V4 (V4 = (V4 + $24) & 0xFF)
      ... and 22 more
    Compares sorted registers V[3]: 16 instructions
      $232: SNE  V3, #3B      ; Skip next instruction if V3 != $3B
      $298: SNE  V3, #8F      ; Skip next instruction if V3 != $8F
      $4E8: SNE  V3, #6F      ; Skip next instruction if V3 != $6F
      ... and 13 more
    Compares sorted registers V[2]: 14 instructions
      $234: SE   V2, #81      ; Skip next instruction if V2 == $81
      $40A: SE   V2, #90      ; Skip next instruction if V2 == $90
      $4DA: SNE  V2, #B3      ; Skip next instruction if V2 != $B3
      ... and 11 more
    Modifies sorted registers V[3]: 26 instructions
      $286: LD   V3, #6A      ; Load $6A into V3
      $292: ADD  V3, #4A      ; Add $4A to V3 (V3 = (V3 + $4A) & 0xFF)
      $2AC: ADD  V3, V7       ; V3 = (V3 + V7) & 0xFF, VF = carry
      ... and 23 more
    Compares sorted registers V[4]: 16 instructions
      $2A0: SNE  V4, #B4      ; Skip next instruction if V4 != $B4
      $4CC: SNE  V4, #F6      ; Skip next instruction if V4 != $F6
      $63C: SE   V9, V4       ; Skip next instruction if V9 == V4
      ... and 13 more
    Modifies sorted registers V[2]: 18 instructions
      $2B4: ADD  V2, #A4      ; Add $A4 to V2 (V2 = (V2 + $A4) & 0xFF)
      $392: ADD  V2, #24      ; Add $24 to V2 (V2 = (V2 + $24) & 0xFF)
      $3A2: LD   V2, #CE      ; Load $CE into V2
      ... and 15 more
    Logical operation on V[6] (sets VF=0 in CUDA): 4 instructions
      $2EC: XOR  V7, V6       ; V7 = V7 XOR V6, VF = 0
      $A80: OR   VE, V6       ; VE = VE OR V6, VF = 0
      $AFC: XOR  V0, V6       ; V0 = V0 XOR V6, VF = 0
      ... and 1 more
    Modifies sorted registers V[5]: 30 instructions
      $312: LD   V5, #4F      ; Load $4F into V5
      $3B6: ADD  V5, #AB      ; Add $AB to V5 (V5 = (V5 + $AB) & 0xFF)
      $49E: LD   V5, #C1      ; Load $C1 into V5
      ... and 27 more
    Compares sorted registers V[1, 5]: 1 instructions
      $414: SE   V1, V5       ; Skip next instruction if V1 == V5
    Modifies sorted registers V[6]: 18 instructions
      $454: ADD  V6, #A3      ; Add $A3 to V6 (V6 = (V6 + $A3) & 0xFF)
      $458: LD   V6, #D7      ; Load $D7 into V6
      $5AE: RND  V6, #86      ; V6 = random() AND $86
      ... and 15 more
    Compares sorted registers V[5]: 11 instructions
      $464: SNE  V5, #B8      ; Skip next instruction if V5 != $B8
      $5DC: SE   V5, #B1      ; Skip next instruction if V5 == $B1
      $604: SE   V5, #29      ; Skip next instruction if V5 == $29
      ... and 8 more
    Arithmetic on sorted registers V[6]: 3 instructions
      $51C: SUBN V7, V6       ; V7 = (V6 - V7) & 0xFF, VF = NOT borrow
      $EAA: ADD  VC, V6       ; VC = (VC + V6) & 0xFF, VF = carry
      $FBE: ADD  VD, V6       ; VD = (VD + V6) & 0xFF, VF = carry
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $60E: OR   VF, V5       ; VF = VF OR V5, VF = 0
      $8DE: XOR  V9, V5       ; V9 = V9 XOR V5, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $76C: AND  V0, V3       ; V0 = V0 AND V3, VF = 0
      $F14: OR   VF, V3       ; VF = VF OR V3, VF = 0
    Register transfer involving V[4]: 1 instructions
      $7B2: LD   VC, V4       ; Load V4 into VC
    Arithmetic on sorted registers V[4]: 2 instructions
      $7BE: SUB  V8, V4       ; V8 = (V8 - V4) & 0xFF, VF = NOT borrow
      $928: SUB  V0, V4       ; V0 = (V0 - V4) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 1 instructions
      $958: SUBN VB, V3       ; VB = (V3 - VB) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 3 instructions
      $A08: SUBN VF, V2       ; VF = (V2 - VF) & 0xFF, VF = NOT borrow
      $BB8: SUBN VA, V2       ; VA = (V2 - VA) & 0xFF, VF = NOT borrow
      $D9A: SUB  V7, V2       ; V7 = (V7 - V2) & 0xFF, VF = NOT borrow
    Compares sorted registers V[5, 6]: 1 instructions
      $C20: SE   V5, V6       ; Skip next instruction if V5 == V6
    Register transfer involving V[5]: 1 instructions
      $CA0: LD   V9, V5       ; Load V5 into V9
    Register transfer involving V[2]: 1 instructions
      $D2A: LD   V0, V2       ; Load V2 into V0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $D80: AND  V9, V4       ; V9 = V9 AND V4, VF = 0
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $E6A: XOR  V0, V2       ; V0 = V0 XOR V2, VF = 0
    Compares sorted registers V[3, 4]: 1 instructions
      $E6C: SE   V3, V4       ; Skip next instruction if V3 == V4

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 475 (26.5%)
    LD: 231 (12.9%)
    JP: 229 (12.8%)
    SE: 138 (7.7%)
    CALL: 127 (7.1%)
    ADD: 125 (7.0%)
    NOP: 123 (6.9%)
    SNE: 98 (5.5%)
    RND: 97 (5.4%)
    DRW: 93 (5.2%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 720
  Based on: 250 sorting instructions + 235 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1977D01_V2-V7_L6_DES_C420_2ffde657.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 20.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 register comparisons in sorted range
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.4% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 93 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [32, 158, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí32, V1: 3‚Üí158, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 420

CUDA EXECUTION STATISTICS:
  Total register operations: 4
  Register reads: 104
  Register writes: 63
  Register writes per cycle: 0.150

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 31 locations
       Addresses: ['$234', '$258', '$27A', '$2E4', '$2E6', '$386', '$504', '$5D2']
       ... and 23 more
  V1: Modified at 18 locations
       Addresses: ['$368', '$390', '$4A6', '$4B0', '$4C8', '$57C', '$61A', '$660']
       ... and 10 more
  V2: Modified at 35 locations
       Addresses: ['$29A', '$370', '$378', '$514', '$582', '$59A', '$666', '$694']
       ... and 27 more
  V3: Modified at 25 locations
       Addresses: ['$292', '$2E8', '$3A8', '$4C4', '$5E0', '$770', '$80C', '$96A']
       ... and 17 more
  V4: Modified at 20 locations
       Addresses: ['$29E', '$40C', '$470', '$4F0', '$68A', '$7A2', '$7B0', '$832']
       ... and 12 more
  V5: Modified at 26 locations
       Addresses: ['$216', '$2AA', '$336', '$3B6', '$404', '$5EC', '$838', '$9AC']
       ... and 18 more
  V6: Modified at 24 locations
       Addresses: ['$39C', '$400', '$454', '$5A4', '$5C2', '$63E', '$6D2', '$75C']
       ... and 16 more
  V7: Modified at 31 locations
       Addresses: ['$278', '$2A2', '$356', '$3BA', '$41E', '$47E', '$484', '$48C']
       ... and 23 more

CONTROL FLOW ANALYSIS:
  224 control transfers detected:
    $20C ‚Üí $F8D
    $210 ‚Üí $375
    $21C ‚Üí $003 (LOOP)
    $21E ‚Üí $11E (LOOP)
    $220 ‚Üí $3C5
    ... and 219 more transfers
  Potential sorting loops: 124 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  276 instructions identified as sorting-related:
    Compares sorted registers V[3, 7]: 1 instructions
      $206: SNE  V7, V3       ; Skip next instruction if V7 != V3
    Modifies sorted registers V[5]: 26 instructions
      $216: RND  V5, #4E      ; V5 = random() AND $4E
      $2AA: LD   V5, #66      ; Load $66 into V5
      $336: RND  V5, #53      ; V5 = random() AND $53
      ... and 23 more
    Compares sorted registers V[6]: 20 instructions
      $232: SNE  V6, #28      ; Skip next instruction if V6 != $28
      $24E: SNE  V6, #E5      ; Skip next instruction if V6 != $E5
      $2DE: SNE  V6, #1F      ; Skip next instruction if V6 != $1F
      ... and 17 more
    Compares sorted registers V[3]: 15 instructions
      $252: SNE  V3, #45      ; Skip next instruction if V3 != $45
      $338: SE   V3, #B5      ; Skip next instruction if V3 == $B5
      $6E4: SE   V3, #1E      ; Skip next instruction if V3 == $1E
      ... and 12 more
    Compares sorted registers V[5]: 19 instructions
      $26A: SE   V5, #CA      ; Skip next instruction if V5 == $CA
      $27C: SE   V5, #0C      ; Skip next instruction if V5 == $0C
      $2C2: SE   V5, #65      ; Skip next instruction if V5 == $65
      ... and 16 more
    Modifies sorted registers V[7]: 31 instructions
      $278: LD   V7, #95      ; Load $95 into V7
      $2A2: ADD  V7, #25      ; Add $25 to V7 (V7 = (V7 + $25) & 0xFF)
      $356: ADD  V7, #85      ; Add $85 to V7 (V7 = (V7 + $85) & 0xFF)
      ... and 28 more
    Modifies sorted registers V[3]: 25 instructions
      $292: ADD  V3, #CF      ; Add $CF to V3 (V3 = (V3 + $CF) & 0xFF)
      $2E8: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $3A8: LD   V3, #87      ; Load $87 into V3
      ... and 22 more
    Modifies sorted registers V[2]: 35 instructions
      $29A: RND  V2, #36      ; V2 = random() AND $36
      $370: ADD  V2, #76      ; Add $76 to V2 (V2 = (V2 + $76) & 0xFF)
      $378: RND  V2, #63      ; V2 = random() AND $63
      ... and 32 more
    Modifies sorted registers V[4]: 20 instructions
      $29E: LD   V4, #0B      ; Load $0B into V4
      $40C: LD   V4, #3D      ; Load $3D into V4
      $470: LD   V4, #E0      ; Load $E0 into V4
      ... and 17 more
    Compares sorted registers V[7]: 14 instructions
      $2F0: SE   V7, #76      ; Skip next instruction if V7 == $76
      $3F6: SNE  V7, #9B      ; Skip next instruction if V7 != $9B
      $7C8: SNE  V7, #18      ; Skip next instruction if V7 != $18
      ... and 11 more
    Compares sorted registers V[5, 7]: 1 instructions
      $38C: SNE  V5, V7       ; Skip next instruction if V5 != V7
    Modifies sorted registers V[6]: 24 instructions
      $39C: SHR  V6           ; V6 = V6 >> 1, VF = LSB
      $400: LD   V6, #1C      ; Load $1C into V6
      $454: SHR  V6           ; V6 = V6 >> 1, VF = LSB
      ... and 21 more
    Compares sorted registers V[4]: 10 instructions
      $440: SE   V4, #E8      ; Skip next instruction if V4 == $E8
      $44C: SNE  V4, #C3      ; Skip next instruction if V4 != $C3
      $B5E: SNE  V4, #5F      ; Skip next instruction if V4 != $5F
      ... and 7 more
    Logical operation on V[2] (sets VF=0 in CUDA): 3 instructions
      $4B0: XOR  V1, V2       ; V1 = V1 XOR V2, VF = 0
      $E7E: OR   V0, V2       ; V0 = V0 OR V2, VF = 0
      $E9A: XOR  VC, V2       ; VC = VC XOR V2, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $504: OR   V0, V7       ; V0 = V0 OR V7, VF = 0
      $ED6: OR   V9, V7       ; V9 = V9 OR V7, VF = 0
    Compares sorted registers V[2]: 15 instructions
      $59C: SE   V2, #8F      ; Skip next instruction if V2 == $8F
      $5DE: SNE  V2, #7F      ; Skip next instruction if V2 != $7F
      $71E: SE   V2, #A9      ; Skip next instruction if V2 == $A9
      ... and 12 more
    Arithmetic on sorted registers V[7]: 2 instructions
      $6FC: SUB  V9, V7       ; V9 = (V9 - V7) & 0xFF, VF = NOT borrow
      $E04: SUBN V9, V7       ; V9 = (V7 - V9) & 0xFF, VF = NOT borrow
    Logical operation on V[5] (sets VF=0 in CUDA): 3 instructions
      $716: OR   V0, V5       ; V0 = V0 OR V5, VF = 0
      $CFA: OR   V8, V5       ; V8 = V8 OR V5, VF = 0
      $DC4: OR   VB, V5       ; VB = VB OR V5, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $746: XOR  VF, V4       ; VF = VF XOR V4, VF = 0
    Compares sorted registers V[3, 6]: 1 instructions
      $77A: SE   V6, V3       ; Skip next instruction if V6 == V3
    Compares sorted registers V[2, 7]: 1 instructions
      $97A: SE   V7, V2       ; Skip next instruction if V7 == V2
    Arithmetic on sorted registers V[2]: 1 instructions
      $A48: SUB  VA, V2       ; VA = (VA - V2) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $B3A: OR   V9, V3       ; V9 = V9 OR V3, VF = 0
    Arithmetic on sorted registers V[4]: 2 instructions
      $B46: ADD  V8, V4       ; V8 = (V8 + V4) & 0xFF, VF = carry
      $C76: ADD  V0, V4       ; V0 = (V0 + V4) & 0xFF, VF = carry
    Register transfer involving V[7]: 1 instructions
      $C3C: LD   VA, V7       ; Load V7 into VA
    Arithmetic on sorted registers V[5]: 1 instructions
      $CB4: SUB  VE, V5       ; VE = (VE - V5) & 0xFF, VF = NOT borrow
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $E5A: AND  V1, V6       ; V1 = V1 AND V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 491 (27.4%)
    LD: 222 (12.4%)
    JP: 208 (11.6%)
    DRW: 135 (7.5%)
    ADD: 129 (7.2%)
    SNE: 117 (6.5%)
    SE: 113 (6.3%)
    CALL: 111 (6.2%)
    NOP: 104 (5.8%)
    RND: 93 (5.2%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 724
  Based on: 276 sorting instructions + 224 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2103D01_V2-V7_L6_DES_C900_60a85fbf.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 109 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [224, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí224, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 900

CUDA EXECUTION STATISTICS:
  Total register operations: 49
  Register reads: 260
  Register writes: 606
  Register writes per cycle: 0.673

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 24 locations
       Addresses: ['$37A', '$40C', '$41E', '$50C', '$526', '$552', '$5F4', '$602']
       ... and 16 more
  V1: Modified at 24 locations
       Addresses: ['$2AE', '$2EE', '$31C', '$5AC', '$5C0', '$6D6', '$6DE', '$728']
       ... and 16 more
  V2: Modified at 28 locations
       Addresses: ['$210', '$218', '$2A6', '$2C4', '$322', '$330', '$368', '$39E']
       ... and 20 more
  V3: Modified at 29 locations
       Addresses: ['$228', '$2C0', '$2F0', '$3DA', '$4CE', '$4E8', '$4F0', '$5A2']
       ... and 21 more
  V4: Modified at 25 locations
       Addresses: ['$278', '$27C', '$28C', '$428', '$488', '$622', '$65A', '$700']
       ... and 17 more
  V5: Modified at 28 locations
       Addresses: ['$258', '$2A4', '$300', '$314', '$32E', '$3B4', '$406', '$438']
       ... and 20 more
  V6: Modified at 18 locations
       Addresses: ['$2DA', '$2DE', '$42E', '$456', '$472', '$47C', '$620', '$64C']
       ... and 10 more
  V7: Modified at 22 locations
       Addresses: ['$276', '$38E', '$3B6', '$426', '$450', '$592', '$5B6', '$654']
       ... and 14 more

CONTROL FLOW ANALYSIS:
  229 control transfers detected:
    $202 ‚Üí $E0C
    $206 ‚Üí $DA1
    $216 ‚Üí $029 (LOOP)
    $21A ‚Üí $198 (LOOP)
    $220 ‚Üí $6F9
    ... and 224 more transfers
  Potential sorting loops: 133 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  252 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 28 instructions
      $210: ADD  V2, #EB      ; Add $EB to V2 (V2 = (V2 + $EB) & 0xFF)
      $218: XOR  V2, VA       ; V2 = V2 XOR VA, VF = 0
      $2A6: ADD  V2, #23      ; Add $23 to V2 (V2 = (V2 + $23) & 0xFF)
      ... and 25 more
    Compares sorted registers V[3]: 22 instructions
      $214: SE   V3, #73      ; Skip next instruction if V3 == $73
      $288: SE   V3, #06      ; Skip next instruction if V3 == $06
      $28A: SE   V3, #00      ; Skip next instruction if V3 == $00
      ... and 19 more
    Modifies sorted registers V[3]: 29 instructions
      $228: RND  V3, #77      ; V3 = random() AND $77
      $2C0: SHR  V3           ; V3 = V3 >> 1, VF = LSB
      $2F0: RND  V3, #09      ; V3 = random() AND $09
      ... and 26 more
    Modifies sorted registers V[5]: 28 instructions
      $258: RND  V5, #CC      ; V5 = random() AND $CC
      $2A4: RND  V5, #A8      ; V5 = random() AND $A8
      $300: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      ... and 25 more
    Modifies sorted registers V[7]: 22 instructions
      $276: LD   V7, #60      ; Load $60 into V7
      $38E: RND  V7, #34      ; V7 = random() AND $34
      $3B6: LD   V7, #1C      ; Load $1C into V7
      ... and 19 more
    Modifies sorted registers V[4]: 25 instructions
      $278: LD   V4, #9D      ; Load $9D into V4
      $27C: RND  V4, #04      ; V4 = random() AND $04
      $28C: RND  V4, #C8      ; V4 = random() AND $C8
      ... and 22 more
    Compares sorted registers V[2]: 12 instructions
      $27A: SE   V2, #0E      ; Skip next instruction if V2 == $0E
      $422: SE   V2, #FB      ; Skip next instruction if V2 == $FB
      $64E: SE   V2, #CF      ; Skip next instruction if V2 == $CF
      ... and 9 more
    Compares sorted registers V[7]: 17 instructions
      $290: SNE  V7, #91      ; Skip next instruction if V7 != $91
      $326: SNE  VD, V7       ; Skip next instruction if VD != V7
      $364: SNE  V7, #8D      ; Skip next instruction if V7 != $8D
      ... and 14 more
    Modifies sorted registers V[6]: 18 instructions
      $2DA: LD   V6, #01      ; Load $01 into V6
      $2DE: ADD  V6, #9B      ; Add $9B to V6 (V6 = (V6 + $9B) & 0xFF)
      $42E: LD   V6, #1B      ; Load $1B into V6
      ... and 15 more
    Compares sorted registers V[6]: 15 instructions
      $31A: SE   V6, #1F      ; Skip next instruction if V6 == $1F
      $3A4: SE   V6, #9D      ; Skip next instruction if V6 == $9D
      $400: SE   V6, #8E      ; Skip next instruction if V6 == $8E
      ... and 12 more
    Compares sorted registers V[4]: 15 instructions
      $4C4: SE   V4, #12      ; Skip next instruction if V4 == $12
      $5A0: SE   V4, #5E      ; Skip next instruction if V4 == $5E
      $610: SE   V4, #63      ; Skip next instruction if V4 == $63
      ... and 12 more
    Compares sorted registers V[5]: 13 instructions
      $550: SE   V5, #DC      ; Skip next instruction if V5 == $DC
      $7BA: SNE  V5, #91      ; Skip next instruction if V5 != $91
      $8B2: SNE  V5, V1       ; Skip next instruction if V5 != V1
      ... and 10 more
    Register transfer involving V[5]: 1 instructions
      $5AC: LD   V1, V5       ; Load V5 into V1
    Arithmetic on sorted registers V[4]: 1 instructions
      $740: SUB  VF, V4       ; VF = (VF - V4) & 0xFF, VF = NOT borrow
    Register transfer involving V[6]: 2 instructions
      $7A0: LD   V9, V6       ; Load V6 into V9
      $ADC: LD   V8, V6       ; Load V6 into V8
    Arithmetic on sorted registers V[6]: 1 instructions
      $842: SUB  V8, V6       ; V8 = (V8 - V6) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[7]: 1 instructions
      $918: SUB  V0, V7       ; V0 = (V0 - V7) & 0xFF, VF = NOT borrow
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $C3A: XOR  VC, V6       ; VC = VC XOR V6, VF = 0
    Register transfer involving V[2]: 1 instructions
      $EA0: LD   DT, V2       ; Load V2 into delay timer

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 492 (27.5%)
    LD: 239 (13.3%)
    JP: 233 (13.0%)
    SNE: 119 (6.6%)
    SE: 117 (6.5%)
    NOP: 116 (6.5%)
    CALL: 110 (6.1%)
    RND: 109 (6.1%)
    ADD: 104 (5.8%)
    DRW: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 710
  Based on: 252 sorting instructions + 229 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2443D01_V2-V7_L6_DES_C2760_654b4ce8.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 118 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [32, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí32, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 2760

CUDA EXECUTION STATISTICS:
  Total register operations: 19
  Register reads: 413
  Register writes: 455
  Register writes per cycle: 0.165

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 29 locations
       Addresses: ['$2E6', '$324', '$36A', '$382', '$38E', '$4A0', '$4C4', '$572']
       ... and 21 more
  V1: Modified at 35 locations
       Addresses: ['$24C', '$25C', '$3BC', '$3D8', '$4F6', '$514', '$55A', '$5EA']
       ... and 27 more
  V2: Modified at 29 locations
       Addresses: ['$254', '$39A', '$45A', '$4C2', '$530', '$53C', '$562', '$5BC']
       ... and 21 more
  V3: Modified at 31 locations
       Addresses: ['$200', '$224', '$2D8', '$2DE', '$2E2', '$342', '$402', '$464']
       ... and 23 more
  V4: Modified at 24 locations
       Addresses: ['$296', '$2C2', '$2CA', '$360', '$37C', '$3B4', '$490', '$59E']
       ... and 16 more
  V5: Modified at 24 locations
       Addresses: ['$426', '$486', '$4FA', '$590', '$71A', '$758', '$760', '$78C']
       ... and 16 more
  V6: Modified at 17 locations
       Addresses: ['$258', '$41A', '$41E', '$43C', '$4BC', '$600', '$724', '$744']
       ... and 9 more
  V7: Modified at 27 locations
       Addresses: ['$2BC', '$2EA', '$2F8', '$2FC', '$31E', '$344', '$3C2', '$5CC']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  202 control transfers detected:
    $20C ‚Üí $DA1
    $220 ‚Üí $A7C
    $23A ‚Üí $BC7
    $25A ‚Üí $5AD
    $26E ‚Üí $0E4 (LOOP)
    ... and 197 more transfers
  Potential sorting loops: 118 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  252 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 31 instructions
      $200: RND  V3, #0A      ; V3 = random() AND $0A
      $224: RND  V3, #EA      ; V3 = random() AND $EA
      $2D8: RND  V3, #6F      ; V3 = random() AND $6F
      ... and 28 more
    Compares sorted registers V[7]: 12 instructions
      $210: SE   V7, #18      ; Skip next instruction if V7 == $18
      $32A: SNE  V7, #5F      ; Skip next instruction if V7 != $5F
      $3B0: SNE  V7, #B9      ; Skip next instruction if V7 != $B9
      ... and 9 more
    Compares sorted registers V[6]: 19 instructions
      $244: SNE  V6, #E1      ; Skip next instruction if V6 != $E1
      $2C4: SNE  V6, #4F      ; Skip next instruction if V6 != $4F
      $3C8: SNE  V6, #B8      ; Skip next instruction if V6 != $B8
      ... and 16 more
    Modifies sorted registers V[2]: 29 instructions
      $254: LD   V2, #69      ; Load $69 into V2
      $39A: ADD  V2, #30      ; Add $30 to V2 (V2 = (V2 + $30) & 0xFF)
      $45A: AND  V2, V2       ; V2 = V2 AND V2, VF = 0
      ... and 26 more
    Modifies sorted registers V[6]: 17 instructions
      $258: ADD  V6, #4A      ; Add $4A to V6 (V6 = (V6 + $4A) & 0xFF)
      $41A: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      $41E: LD   V6, #E9      ; Load $E9 into V6
      ... and 14 more
    Compares sorted registers V[4]: 18 instructions
      $25E: SE   V4, #4D      ; Skip next instruction if V4 == $4D
      $2EE: SNE  V4, #FF      ; Skip next instruction if V4 != $FF
      $320: SNE  V4, #14      ; Skip next instruction if V4 != $14
      ... and 15 more
    Compares sorted registers V[3]: 17 instructions
      $26C: SE   V3, #95      ; Skip next instruction if V3 == $95
      $2CC: SNE  V9, V3       ; Skip next instruction if V9 != V3
      $318: SNE  V3, #F9      ; Skip next instruction if V3 != $F9
      ... and 14 more
    Modifies sorted registers V[4]: 24 instructions
      $296: LD   V4, #FB      ; Load $FB into V4
      $2C2: ADD  V4, #EA      ; Add $EA to V4 (V4 = (V4 + $EA) & 0xFF)
      $2CA: LD   V4, #16      ; Load $16 into V4
      ... and 21 more
    Modifies sorted registers V[7]: 27 instructions
      $2BC: ADD  V7, #7B      ; Add $7B to V7 (V7 = (V7 + $7B) & 0xFF)
      $2EA: SUB  V7, VC       ; V7 = (V7 - VC) & 0xFF, VF = NOT borrow
      $2F8: LD   V7, V4       ; Load V4 into V7
      ... and 24 more
    Compares sorted registers V[5]: 13 instructions
      $302: SE   V5, #1A      ; Skip next instruction if V5 == $1A
      $340: SNE  V5, #86      ; Skip next instruction if V5 != $86
      $384: SE   V5, VB       ; Skip next instruction if V5 == VB
      ... and 10 more
    Compares sorted registers V[2]: 11 instructions
      $364: SNE  V2, #63      ; Skip next instruction if V2 != $63
      $3DC: SNE  V2, #75      ; Skip next instruction if V2 != $75
      $40A: SNE  V2, #AA      ; Skip next instruction if V2 != $AA
      ... and 8 more
    Modifies sorted registers V[5]: 24 instructions
      $426: RND  V5, #BE      ; V5 = random() AND $BE
      $486: RND  V5, #2D      ; V5 = random() AND $2D
      $4FA: LD   V5, #17      ; Load $17 into V5
      ... and 21 more
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $694: XOR  VC, V3       ; VC = VC XOR V3, VF = 0
      $BB8: AND  V9, V3       ; V9 = V9 AND V3, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $742: SUBN V9, V6       ; V9 = (V6 - V9) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[4]: 1 instructions
      $990: ADD  VC, V4       ; VC = (VC + V4) & 0xFF, VF = carry
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $A66: OR   V8, V5       ; V8 = V8 OR V5, VF = 0
    Compares sorted registers V[2, 7]: 1 instructions
      $AE4: SNE  V7, V2       ; Skip next instruction if V7 != V2
    Register transfer involving V[7]: 2 instructions
      $BA0: LD   VC, V7       ; Load V7 into VC
      $FEC: LD   ST, V7       ; Load V7 into sound timer
    Compares sorted registers V[6, 7]: 1 instructions
      $CBC: SE   V6, V7       ; Skip next instruction if V6 == V7
    Register transfer involving V[2, 3, 4, 5, 6]: 1 instructions
      $CE8: LD   [I], V6      ; Store V0-V6 at [I], then I += 7

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 478 (26.7%)
    JP: 232 (12.9%)
    LD: 229 (12.8%)
    SNE: 127 (7.1%)
    DRW: 124 (6.9%)
    ADD: 123 (6.9%)
    RND: 118 (6.6%)
    NOP: 118 (6.6%)
    SE: 101 (5.6%)
    CALL: 95 (5.3%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 656
  Based on: 252 sorting instructions + 202 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2462D01_V2-V7_L6_DES_C60_754a8736.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.1% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 111 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 103, 9, 8, 7, 6, 5, 4]
  Changes: V1: 3‚Üí103, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 60

CUDA EXECUTION STATISTICS:
  Total register operations: 2
  Register reads: 28
  Register writes: 79
  Register writes per cycle: 1.317

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 22 locations
       Addresses: ['$248', '$32A', '$32E', '$34C', '$350', '$3BA', '$5C4', '$680']
       ... and 14 more
  V1: Modified at 17 locations
       Addresses: ['$38C', '$44E', '$64E', '$776', '$79E', '$874', '$8EA', '$8F4']
       ... and 9 more
  V2: Modified at 34 locations
       Addresses: ['$202', '$258', '$28C', '$29E', '$2B4', '$2D8', '$3A8', '$3FA']
       ... and 26 more
  V3: Modified at 18 locations
       Addresses: ['$252', '$4C6', '$4F0', '$5F8', '$640', '$692', '$8DE', '$AA2']
       ... and 10 more
  V4: Modified at 14 locations
       Addresses: ['$2E8', '$456', '$4E8', '$838', '$8B2', '$8E2', '$926', '$A2A']
       ... and 6 more
  V5: Modified at 35 locations
       Addresses: ['$2C0', '$2C6', '$318', '$38E', '$3B4', '$3F6', '$428', '$4C8']
       ... and 27 more
  V6: Modified at 30 locations
       Addresses: ['$266', '$2CA', '$2DA', '$314', '$376', '$39C', '$3CC', '$424']
       ... and 22 more
  V7: Modified at 27 locations
       Addresses: ['$2AE', '$312', '$392', '$41E', '$460', '$470', '$48C', '$4EC']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  259 control transfers detected:
    $200 ‚Üí $6F9
    $20A ‚Üí $BFA
    $20E ‚Üí $B2B
    $216 ‚Üí $A0B
    $21E ‚Üí $12C (LOOP)
    ... and 254 more transfers
  Potential sorting loops: 136 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  270 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 34 instructions
      $202: RND  V2, #36      ; V2 = random() AND $36
      $258: LD   V2, #84      ; Load $84 into V2
      $28C: SHR  V2           ; V2 = V2 >> 1, VF = LSB
      ... and 31 more
    Compares sorted registers V[4]: 9 instructions
      $204: SNE  V4, #62      ; Skip next instruction if V4 != $62
      $24E: SE   V4, #05      ; Skip next instruction if V4 == $05
      $2D6: SE   V4, #99      ; Skip next instruction if V4 == $99
      ... and 6 more
    Compares sorted registers V[5]: 20 instructions
      $20C: SNE  V5, #BE      ; Skip next instruction if V5 != $BE
      $250: SE   V5, #5A      ; Skip next instruction if V5 == $5A
      $3D6: SNE  V5, #B7      ; Skip next instruction if V5 != $B7
      ... and 17 more
    Compares sorted registers V[2]: 16 instructions
      $21A: SE   V2, #B6      ; Skip next instruction if V2 == $B6
      $42E: SNE  V2, #20      ; Skip next instruction if V2 != $20
      $528: SE   V2, #F5      ; Skip next instruction if V2 == $F5
      ... and 13 more
    Compares sorted registers V[6]: 18 instructions
      $23C: SNE  V6, #48      ; Skip next instruction if V6 != $48
      $240: SNE  V6, #97      ; Skip next instruction if V6 != $97
      $25C: SNE  V6, #B5      ; Skip next instruction if V6 != $B5
      ... and 15 more
    Compares sorted registers V[3]: 15 instructions
      $24C: SNE  V3, #42      ; Skip next instruction if V3 != $42
      $2AC: SE   V3, #1B      ; Skip next instruction if V3 == $1B
      $3AA: SNE  V3, #24      ; Skip next instruction if V3 != $24
      ... and 12 more
    Modifies sorted registers V[3]: 18 instructions
      $252: RND  V3, #8E      ; V3 = random() AND $8E
      $4C6: LD   V3, V3       ; Load V3 into V3
      $4F0: RND  V3, #41      ; V3 = random() AND $41
      ... and 15 more
    Compares sorted registers V[2, 4]: 1 instructions
      $25A: SNE  V4, V2       ; Skip next instruction if V4 != V2
    Modifies sorted registers V[6]: 30 instructions
      $266: RND  V6, #FB      ; V6 = random() AND $FB
      $2CA: LD   V6, #96      ; Load $96 into V6
      $2DA: LD   V6, #70      ; Load $70 into V6
      ... and 27 more
    Modifies sorted registers V[7]: 27 instructions
      $2AE: ADD  V7, #78      ; Add $78 to V7 (V7 = (V7 + $78) & 0xFF)
      $312: ADD  V7, #D1      ; Add $D1 to V7 (V7 = (V7 + $D1) & 0xFF)
      $392: RND  V7, #4F      ; V7 = random() AND $4F
      ... and 24 more
    Compares sorted registers V[7]: 20 instructions
      $2B0: SE   V7, #DF      ; Skip next instruction if V7 == $DF
      $2F2: SNE  V7, #B2      ; Skip next instruction if V7 != $B2
      $31A: SE   V7, #E4      ; Skip next instruction if V7 == $E4
      ... and 17 more
    Modifies sorted registers V[5]: 35 instructions
      $2C0: LD   V5, #F0      ; Load $F0 into V5
      $2C6: ADD  V5, #01      ; Add $01 to V5 (V5 = (V5 + $01) & 0xFF)
      $318: LD   V5, #F4      ; Load $F4 into V5
      ... and 32 more
    Logical operation on V[5] (sets VF=0 in CUDA): 3 instructions
      $2DC: AND  VE, V5       ; VE = VE AND V5, VF = 0
      $34C: AND  V0, V5       ; V0 = V0 AND V5, VF = 0
      $474: OR   VD, V5       ; VD = VD OR V5, VF = 0
    Modifies sorted registers V[4]: 14 instructions
      $2E8: SUBN V4, V5       ; V4 = (V5 - V4) & 0xFF, VF = NOT borrow
      $456: LD   V4, V1       ; Load V1 into V4
      $4E8: ADD  V4, #66      ; Add $66 to V4 (V4 = (V4 + $66) & 0xFF)
      ... and 11 more
    Register transfer involving V[7]: 1 instructions
      $3A2: LD   V8, V7       ; Load V7 into V8
    Arithmetic on sorted registers V[4]: 2 instructions
      $45C: SUB  V9, V4       ; V9 = (V9 - V4) & 0xFF, VF = NOT borrow
      $52E: SUB  VF, V4       ; VF = (VF - V4) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 1 instructions
      $69C: SUB  VF, V2       ; VF = (VF - V2) & 0xFF, VF = NOT borrow
    Register transfer involving V[3]: 1 instructions
      $770: LD   VD, V3       ; Load V3 into VD
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $940: AND  V8, V2       ; V8 = V8 AND V2, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $A6C: AND  V9, V4       ; V9 = V9 AND V4, VF = 0
    Compares sorted registers V[4, 7]: 1 instructions
      $B2A: SE   V4, V7       ; Skip next instruction if V4 == V7
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $DBA: XOR  VE, V3       ; VE = VE XOR V3, VF = 0
      $EF0: OR   V8, V3       ; V8 = V8 OR V3, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 471 (26.3%)
    JP: 267 (14.9%)
    LD: 227 (12.7%)
    SNE: 125 (7.0%)
    CALL: 117 (6.5%)
    DRW: 116 (6.5%)
    SE: 112 (6.2%)
    RND: 111 (6.2%)
    NOP: 98 (5.5%)
    ADD: 97 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 788
  Based on: 270 sorting instructions + 259 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2525D01_V2-V7_L6_DES_C40_ec520948.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 104 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 40

CUDA EXECUTION STATISTICS:
  Total register operations: 8
  Register reads: 29
  Register writes: 61
  Register writes per cycle: 1.525

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 21 locations
       Addresses: ['$2EC', '$39C', '$4A6', '$5A2', '$678', '$6DE', '$708', '$7B2']
       ... and 13 more
  V1: Modified at 28 locations
       Addresses: ['$340', '$36C', '$4E4', '$516', '$5A0', '$5AC', '$63A', '$6B6']
       ... and 20 more
  V2: Modified at 20 locations
       Addresses: ['$2FE', '$3C8', '$3FE', '$444', '$46E', '$4A8', '$5AA', '$63E']
       ... and 12 more
  V3: Modified at 23 locations
       Addresses: ['$286', '$4A0', '$518', '$5D8', '$624', '$754', '$7CC', '$8BC']
       ... and 15 more
  V4: Modified at 24 locations
       Addresses: ['$214', '$250', '$2E2', '$356', '$480', '$4EC', '$532', '$54E']
       ... and 16 more
  V5: Modified at 29 locations
       Addresses: ['$352', '$358', '$484', '$5FA', '$69E', '$6BE', '$6C0', '$6EA']
       ... and 21 more
  V6: Modified at 22 locations
       Addresses: ['$2B2', '$3FC', '$412', '$44C', '$47E', '$4B8', '$6DA', '$7A2']
       ... and 14 more
  V7: Modified at 25 locations
       Addresses: ['$3D6', '$3F2', '$424', '$506', '$520', '$594', '$5D2', '$5F4']
       ... and 17 more

CONTROL FLOW ANALYSIS:
  226 control transfers detected:
    $210 ‚Üí $454
    $218 ‚Üí $042 (LOOP)
    $280 ‚Üí $CFE
    $288 ‚Üí $524
    $28C ‚Üí $6FC
    ... and 221 more transfers
  Potential sorting loops: 119 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  244 instructions identified as sorting-related:
    Compares sorted registers V[2]: 14 instructions
      $204: SNE  V2, #73      ; Skip next instruction if V2 != $73
      $454: SE   V2, #1E      ; Skip next instruction if V2 == $1E
      $8A6: SNE  V2, #0E      ; Skip next instruction if V2 != $0E
      ... and 11 more
    Compares sorted registers V[4]: 15 instructions
      $20C: SE   V4, V4       ; Skip next instruction if V4 == V4
      $234: SE   V4, #7C      ; Skip next instruction if V4 == $7C
      $316: SNE  V4, #B1      ; Skip next instruction if V4 != $B1
      ... and 12 more
    Modifies sorted registers V[4]: 24 instructions
      $214: SHL  V4           ; V4 = (V4 << 1) & 0xFF, VF = MSB
      $250: OR   V4, V4       ; V4 = V4 OR V4, VF = 0
      $2E2: ADD  V4, #10      ; Add $10 to V4 (V4 = (V4 + $10) & 0xFF)
      ... and 21 more
    Register transfer involving V[2]: 1 instructions
      $236: LD   F, V2        ; I = font_address(V2 & 0xF) = 0x50 + (V2 & 0xF) * 5
    Compares sorted registers V[3]: 13 instructions
      $23A: SNE  V3, #EF      ; Skip next instruction if V3 != $EF
      $31E: SE   V3, #EB      ; Skip next instruction if V3 == $EB
      $52A: SNE  V3, #1A      ; Skip next instruction if V3 != $1A
      ... and 10 more
    Compares sorted registers V[6]: 16 instructions
      $27A: SE   V6, #B4      ; Skip next instruction if V6 == $B4
      $2C6: SNE  V6, #CF      ; Skip next instruction if V6 != $CF
      $2DC: SNE  V6, #C4      ; Skip next instruction if V6 != $C4
      ... and 13 more
    Modifies sorted registers V[3]: 23 instructions
      $286: RND  V3, #B9      ; V3 = random() AND $B9
      $4A0: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $518: ADD  V3, #8B      ; Add $8B to V3 (V3 = (V3 + $8B) & 0xFF)
      ... and 20 more
    Modifies sorted registers V[6]: 22 instructions
      $2B2: RND  V6, #D7      ; V6 = random() AND $D7
      $3FC: RND  V6, #26      ; V6 = random() AND $26
      $412: ADD  V6, V4       ; V6 = (V6 + V4) & 0xFF, VF = carry
      ... and 19 more
    Compares sorted registers V[5]: 23 instructions
      $2CA: SNE  V5, #01      ; Skip next instruction if V5 != $01
      $3B2: SNE  V5, #A7      ; Skip next instruction if V5 != $A7
      $3F4: SE   V5, #DE      ; Skip next instruction if V5 == $DE
      ... and 20 more
    Modifies sorted registers V[2]: 20 instructions
      $2FE: LD   V2, #35      ; Load $35 into V2
      $3C8: LD   V2, #77      ; Load $77 into V2
      $3FE: RND  V2, #FB      ; V2 = random() AND $FB
      ... and 17 more
    Modifies sorted registers V[5]: 29 instructions
      $352: ADD  V5, #05      ; Add $05 to V5 (V5 = (V5 + $05) & 0xFF)
      $358: ADD  V5, #BD      ; Add $BD to V5 (V5 = (V5 + $BD) & 0xFF)
      $484: ADD  V5, #F3      ; Add $F3 to V5 (V5 = (V5 + $F3) & 0xFF)
      ... and 26 more
    Compares sorted registers V[7]: 10 instructions
      $37E: SE   V7, #7E      ; Skip next instruction if V7 == $7E
      $3EA: SNE  V7, #C3      ; Skip next instruction if V7 != $C3
      $44E: SE   V7, #B7      ; Skip next instruction if V7 == $B7
      ... and 7 more
    Modifies sorted registers V[7]: 25 instructions
      $3D6: LD   V7, #39      ; Load $39 into V7
      $3F2: LD   V7, #59      ; Load $59 into V7
      $424: ADD  V7, #48      ; Add $48 to V7 (V7 = (V7 + $48) & 0xFF)
      ... and 22 more
    Register transfer involving V[7]: 2 instructions
      $63C: LD   VA, V7       ; Load V7 into VA
      $7DA: LD   VD, V7       ; Load V7 into VD
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $6B2: XOR  VC, V4       ; VC = VC XOR V4, VF = 0
      $832: OR   V1, V4       ; V1 = V1 OR V4, VF = 0
    Arithmetic on sorted registers V[6]: 2 instructions
      $942: SUB  VD, V6       ; VD = (VD - V6) & 0xFF, VF = NOT borrow
      $CF4: ADD  V0, V6       ; V0 = (V0 + V6) & 0xFF, VF = carry
    Arithmetic on sorted registers V[5]: 1 instructions
      $952: ADD  VC, V5       ; VC = (VC + V5) & 0xFF, VF = carry
    Arithmetic on sorted registers V[2]: 1 instructions
      $996: SUBN VF, V2       ; VF = (V2 - VF) & 0xFF, VF = NOT borrow
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $C94: LD   [I], VC      ; Store V0-VC at [I], then I += 13

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 488 (27.2%)
    JP: 227 (12.7%)
    LD: 224 (12.5%)
    SNE: 132 (7.4%)
    DRW: 123 (6.9%)
    ADD: 123 (6.9%)
    CALL: 113 (6.3%)
    SE: 106 (5.9%)
    RND: 104 (5.8%)
    NOP: 102 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 696
  Based on: 244 sorting instructions + 226 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2606D01_V2-V7_L6_DES_C220_cc6a625c.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 108 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [117, 73, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí117, V1: 3‚Üí73, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 220

CUDA EXECUTION STATISTICS:
  Total register operations: 10
  Register reads: 131
  Register writes: 351
  Register writes per cycle: 1.595

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$3F4', '$442', '$59E', '$5B2', '$5FE', '$632', '$742', '$78E']
       ... and 15 more
  V1: Modified at 17 locations
       Addresses: ['$24A', '$27C', '$3BE', '$434', '$4F6', '$576', '$59A', '$5B0']
       ... and 9 more
  V2: Modified at 26 locations
       Addresses: ['$240', '$414', '$43C', '$47A', '$51A', '$598', '$628', '$67C']
       ... and 18 more
  V3: Modified at 33 locations
       Addresses: ['$230', '$28A', '$312', '$3C4', '$3C8', '$3CC', '$3DA', '$42C']
       ... and 25 more
  V4: Modified at 17 locations
       Addresses: ['$21C', '$2DC', '$4A2', '$57C', '$5FC', '$656', '$678', '$7FA']
       ... and 9 more
  V5: Modified at 30 locations
       Addresses: ['$204', '$210', '$294', '$36C', '$3FC', '$40C', '$41A', '$4CA']
       ... and 22 more
  V6: Modified at 19 locations
       Addresses: ['$24E', '$2B0', '$322', '$34C', '$446', '$498', '$564', '$58C']
       ... and 11 more
  V7: Modified at 31 locations
       Addresses: ['$278', '$2A6', '$2E8', '$316', '$4CC', '$568', '$56E', '$572']
       ... and 23 more

CONTROL FLOW ANALYSIS:
  244 control transfers detected:
    $20E ‚Üí $305
    $212 ‚Üí $0A3 (LOOP)
    $222 ‚Üí $A53
    $226 ‚Üí $68A
    $22C ‚Üí $CAD
    ... and 239 more transfers
  Potential sorting loops: 139 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  260 instructions identified as sorting-related:
    Modifies sorted registers V[5]: 30 instructions
      $204: LD   V5, #C3      ; Load $C3 into V5
      $210: ADD  V5, #18      ; Add $18 to V5 (V5 = (V5 + $18) & 0xFF)
      $294: LD   V5, #5C      ; Load $5C into V5
      ... and 27 more
    Modifies sorted registers V[4]: 17 instructions
      $21C: LD   V4, #F3      ; Load $F3 into V4
      $2DC: LD   V4, #1F      ; Load $1F into V4
      $4A2: RND  V4, #D0      ; V4 = random() AND $D0
      ... and 14 more
    Compares sorted registers V[3]: 15 instructions
      $220: SE   V3, #6B      ; Skip next instruction if V3 == $6B
      $618: SE   VC, V3       ; Skip next instruction if VC == V3
      $71C: SNE  V3, #0C      ; Skip next instruction if V3 != $0C
      ... and 12 more
    Compares sorted registers V[4]: 17 instructions
      $228: SNE  V4, #2A      ; Skip next instruction if V4 != $2A
      $3EC: SE   V4, #2C      ; Skip next instruction if V4 == $2C
      $4B0: SNE  V4, #7D      ; Skip next instruction if V4 != $7D
      ... and 14 more
    Modifies sorted registers V[3]: 33 instructions
      $230: LD   V3, #39      ; Load $39 into V3
      $28A: RND  V3, #44      ; V3 = random() AND $44
      $312: LD   V3, #7B      ; Load $7B into V3
      ... and 30 more
    Modifies sorted registers V[2]: 26 instructions
      $240: RND  V2, #60      ; V2 = random() AND $60
      $414: SUB  V2, V8       ; V2 = (V2 - V8) & 0xFF, VF = NOT borrow
      $43C: LD   V2, #49      ; Load $49 into V2
      ... and 23 more
    Modifies sorted registers V[6]: 19 instructions
      $24E: ADD  V6, #46      ; Add $46 to V6 (V6 = (V6 + $46) & 0xFF)
      $2B0: RND  V6, #CA      ; V6 = random() AND $CA
      $322: LD   V6, #97      ; Load $97 into V6
      ... and 16 more
    Compares sorted registers V[5]: 13 instructions
      $268: SE   V5, #03      ; Skip next instruction if V5 == $03
      $318: SNE  V5, #5E      ; Skip next instruction if V5 != $5E
      $40A: SE   V5, #E2      ; Skip next instruction if V5 == $E2
      ... and 10 more
    Compares sorted registers V[6]: 19 instructions
      $274: SNE  V6, #E0      ; Skip next instruction if V6 != $E0
      $2C6: SE   V6, #F8      ; Skip next instruction if V6 == $F8
      $348: SE   V6, #FF      ; Skip next instruction if V6 == $FF
      ... and 16 more
    Modifies sorted registers V[7]: 31 instructions
      $278: ADD  V7, #BB      ; Add $BB to V7 (V7 = (V7 + $BB) & 0xFF)
      $2A6: ADD  V7, #10      ; Add $10 to V7 (V7 = (V7 + $10) & 0xFF)
      $2E8: LD   V7, #32      ; Load $32 into V7
      ... and 28 more
    Arithmetic on sorted registers V[4]: 2 instructions
      $2EE: SUBN VA, V4       ; VA = (V4 - VA) & 0xFF, VF = NOT borrow
      $52C: ADD  V8, V4       ; V8 = (V8 + V4) & 0xFF, VF = carry
    Compares sorted registers V[2]: 12 instructions
      $2FA: SNE  V2, #9C      ; Skip next instruction if V2 != $9C
      $3B8: SE   V2, #7D      ; Skip next instruction if V2 == $7D
      $4FC: SE   V2, #FD      ; Skip next instruction if V2 == $FD
      ... and 9 more
    Compares sorted registers V[7]: 16 instructions
      $380: SNE  V7, #AE      ; Skip next instruction if V7 != $AE
      $4E6: SNE  V7, #89      ; Skip next instruction if V7 != $89
      $548: SNE  V7, #C6      ; Skip next instruction if V7 != $C6
      ... and 13 more
    Logical operation on V[2] (sets VF=0 in CUDA): 2 instructions
      $3B6: OR   VB, V2       ; VB = VB OR V2, VF = 0
      $8E0: XOR  VF, V2       ; VF = VF XOR V2, VF = 0
    Arithmetic on sorted registers V[2]: 2 instructions
      $442: ADD  V0, V2       ; V0 = (V0 + V2) & 0xFF, VF = carry
      $592: ADD  VC, V2       ; VC = (VC + V2) & 0xFF, VF = carry
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $71A: AND  VD, V5       ; VD = VD AND V5, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $8D2: OR   V8, V3       ; V8 = V8 OR V3, VF = 0
      $A80: OR   VC, V3       ; VC = VC OR V3, VF = 0
    Arithmetic on sorted registers V[7]: 1 instructions
      $9A2: SUB  VA, V7       ; VA = (VA - V7) & 0xFF, VF = NOT borrow
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $B8A: OR   VD, V7       ; VD = VD OR V7, VF = 0
      $BC4: XOR  V0, V7       ; V0 = V0 XOR V7, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 501 (28.0%)
    LD: 236 (13.2%)
    JP: 228 (12.7%)
    CALL: 133 (7.4%)
    NOP: 122 (6.8%)
    SNE: 117 (6.5%)
    SE: 109 (6.1%)
    RND: 108 (6.0%)
    ADD: 98 (5.5%)
    DRW: 94 (5.2%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 748
  Based on: 260 sorting instructions + 244 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2693D01_V2-V7_L6_DES_C160_2c2f4f08.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 115 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 160

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 42
  Register writes: 50
  Register writes per cycle: 0.312

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 22 locations
       Addresses: ['$224', '$234', '$264', '$324', '$398', '$3EE', '$3FA', '$41C']
       ... and 14 more
  V1: Modified at 31 locations
       Addresses: ['$27E', '$280', '$286', '$2B4', '$2F2', '$42A', '$44A', '$642']
       ... and 23 more
  V2: Modified at 33 locations
       Addresses: ['$2BA', '$2EC', '$306', '$35E', '$3B2', '$3E4', '$430', '$4A0']
       ... and 25 more
  V3: Modified at 21 locations
       Addresses: ['$290', '$2B0', '$2BE', '$2C6', '$2D4', '$326', '$432', '$43E']
       ... and 13 more
  V4: Modified at 19 locations
       Addresses: ['$20E', '$210', '$2A8', '$570', '$5EA', '$620', '$624', '$6F8']
       ... and 11 more
  V5: Modified at 21 locations
       Addresses: ['$2F4', '$3E2', '$46E', '$4C8', '$5D6', '$60A', '$694', '$990']
       ... and 13 more
  V6: Modified at 35 locations
       Addresses: ['$32E', '$3C2', '$3F2', '$3F6', '$536', '$564', '$5C8', '$602']
       ... and 27 more
  V7: Modified at 22 locations
       Addresses: ['$28E', '$382', '$42C', '$610', '$64C', '$664', '$716', '$72C']
       ... and 14 more

CONTROL FLOW ANALYSIS:
  203 control transfers detected:
    $20A ‚Üí $053 (LOOP)
    $20C ‚Üí $400
    $214 ‚Üí $6A0
    $222 ‚Üí $A28
    $232 ‚Üí $73A
    ... and 198 more transfers
  Potential sorting loops: 109 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  259 instructions identified as sorting-related:
    Modifies sorted registers V[4]: 19 instructions
      $20E: ADD  V4, #07      ; Add $07 to V4 (V4 = (V4 + $07) & 0xFF)
      $210: RND  V4, #94      ; V4 = random() AND $94
      $2A8: LD   V4, #F5      ; Load $F5 into V4
      ... and 16 more
    Compares sorted registers V[4, 5]: 1 instructions
      $220: SNE  V4, V5       ; Skip next instruction if V4 != V5
    Compares sorted registers V[7]: 20 instructions
      $258: SE   V7, #F9      ; Skip next instruction if V7 == $F9
      $2E8: SE   V7, #E4      ; Skip next instruction if V7 == $E4
      $358: SE   V7, #82      ; Skip next instruction if V7 == $82
      ... and 17 more
    Modifies sorted registers V[7]: 22 instructions
      $28E: AND  V7, V5       ; V7 = V7 AND V5, VF = 0
      $382: LD   V7, #07      ; Load $07 into V7
      $42C: LD   V7, #28      ; Load $28 into V7
      ... and 19 more
    Modifies sorted registers V[3]: 21 instructions
      $290: LD   V3, #91      ; Load $91 into V3
      $2B0: ADD  V3, #FC      ; Add $FC to V3 (V3 = (V3 + $FC) & 0xFF)
      $2BE: ADD  V3, #56      ; Add $56 to V3 (V3 = (V3 + $56) & 0xFF)
      ... and 18 more
    Compares sorted registers V[4]: 15 instructions
      $29E: SNE  V4, #3C      ; Skip next instruction if V4 != $3C
      $35A: SE   V4, #1F      ; Skip next instruction if V4 == $1F
      $50E: SE   V4, #61      ; Skip next instruction if V4 == $61
      ... and 12 more
    Compares sorted registers V[6]: 15 instructions
      $2A6: SNE  V6, #1D      ; Skip next instruction if V6 != $1D
      $2AC: SE   V6, #33      ; Skip next instruction if V6 == $33
      $742: SNE  V6, #FF      ; Skip next instruction if V6 != $FF
      ... and 12 more
    Modifies sorted registers V[2]: 33 instructions
      $2BA: ADD  V2, #20      ; Add $20 to V2 (V2 = (V2 + $20) & 0xFF)
      $2EC: RND  V2, #C4      ; V2 = random() AND $C4
      $306: ADD  V2, #A6      ; Add $A6 to V2 (V2 = (V2 + $A6) & 0xFF)
      ... and 30 more
    Modifies sorted registers V[5]: 21 instructions
      $2F4: OR   V5, V6       ; V5 = V5 OR V6, VF = 0
      $3E2: RND  V5, #A1      ; V5 = random() AND $A1
      $46E: LD   V5, #9D      ; Load $9D into V5
      ... and 18 more
    Compares sorted registers V[2]: 11 instructions
      $2FE: SNE  V2, #11      ; Skip next instruction if V2 != $11
      $574: SNE  V2, #E1      ; Skip next instruction if V2 != $E1
      $5DC: SNE  V2, #C7      ; Skip next instruction if V2 != $C7
      ... and 8 more
    Modifies sorted registers V[6]: 35 instructions
      $32E: ADD  V6, #27      ; Add $27 to V6 (V6 = (V6 + $27) & 0xFF)
      $3C2: ADD  V6, #CB      ; Add $CB to V6 (V6 = (V6 + $CB) & 0xFF)
      $3F2: ADD  V6, #E1      ; Add $E1 to V6 (V6 = (V6 + $E1) & 0xFF)
      ... and 32 more
    Compares sorted registers V[3]: 15 instructions
      $38E: SE   V3, #E1      ; Skip next instruction if V3 == $E1
      $426: SNE  V3, #4C      ; Skip next instruction if V3 != $4C
      $442: SE   V3, #5B      ; Skip next instruction if V3 == $5B
      ... and 12 more
    Arithmetic on sorted registers V[2]: 3 instructions
      $436: ADD  VB, V2       ; VB = (VB + V2) & 0xFF, VF = carry
      $922: SUB  VC, V2       ; VC = (VC - V2) & 0xFF, VF = NOT borrow
      $CC6: SUBN VA, V2       ; VA = (V2 - VA) & 0xFF, VF = NOT borrow
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $44A: OR   V1, V5       ; V1 = V1 OR V5, VF = 0
      $8E8: AND  VD, V5       ; VD = VD AND V5, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $52E: XOR  VE, V4       ; VE = VE XOR V4, VF = 0
      $F20: XOR  VF, V4       ; VF = VF XOR V4, VF = 0
    Compares sorted registers V[5]: 15 instructions
      $59C: SNE  V5, #D7      ; Skip next instruction if V5 != $D7
      $68A: SNE  V5, #7C      ; Skip next instruction if V5 != $7C
      $696: SNE  V5, #D9      ; Skip next instruction if V5 != $D9
      ... and 12 more
    Register transfer involving V[4]: 1 instructions
      $84E: LD   DT, V4       ; Load V4 into delay timer
    Compares sorted registers V[6, 7]: 2 instructions
      $878: SE   V7, V6       ; Skip next instruction if V7 == V6
      $A06: SE   V7, V6       ; Skip next instruction if V7 == V6
    Arithmetic on sorted registers V[3]: 1 instructions
      $95C: ADD  VB, V3       ; VB = (VB + V3) & 0xFF, VF = carry
    Register transfer involving V[3]: 1 instructions
      $A14: LD   B, V3        ; Store BCD of V3 at [I], [I+1], [I+2]
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $A48: AND  V8, V7       ; V8 = V8 AND V7, VF = 0
      $D7C: OR   VF, V7       ; VF = VF OR V7, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $A52: SUB  VB, V6       ; VB = (VB - V6) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $E3E: OR   VC, V3       ; VC = VC OR V3, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 475 (26.5%)
    LD: 237 (13.2%)
    JP: 230 (12.8%)
    ADD: 128 (7.1%)
    NOP: 119 (6.6%)
    SE: 118 (6.6%)
    SNE: 118 (6.6%)
    RND: 115 (6.4%)
    CALL: 100 (5.6%)
    DRW: 93 (5.2%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 665
  Based on: 259 sorting instructions + 203 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2825D01_V2-V7_L6_DES_C1030_e28cc022.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 20.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.1% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 122 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 1030

CUDA EXECUTION STATISTICS:
  Total register operations: 84
  Register reads: 751
  Register writes: 1495
  Register writes per cycle: 1.451

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 27 locations
       Addresses: ['$300', '$394', '$398', '$3AA', '$3C8', '$3CC', '$3F4', '$4BC']
       ... and 19 more
  V1: Modified at 29 locations
       Addresses: ['$230', '$240', '$358', '$4D8', '$51E', '$520', '$56C', '$5CC']
       ... and 21 more
  V2: Modified at 16 locations
       Addresses: ['$200', '$256', '$338', '$3F8', '$4A4', '$554', '$620', '$83C']
       ... and 8 more
  V3: Modified at 28 locations
       Addresses: ['$24E', '$2B4', '$35E', '$376', '$406', '$412', '$4E0', '$5AA']
       ... and 20 more
  V4: Modified at 31 locations
       Addresses: ['$2FE', '$414', '$460', '$4BA', '$614', '$628', '$64E', '$676']
       ... and 23 more
  V5: Modified at 34 locations
       Addresses: ['$262', '$2AA', '$388', '$448', '$46C', '$532', '$54C', '$5C0']
       ... and 26 more
  V6: Modified at 26 locations
       Addresses: ['$21C', '$36A', '$3FA', '$4DA', '$564', '$56E', '$5C4', '$61C']
       ... and 18 more
  V7: Modified at 29 locations
       Addresses: ['$214', '$2CC', '$3D4', '$4F6', '$540', '$5F2', '$604', '$6F4']
       ... and 21 more

CONTROL FLOW ANALYSIS:
  199 control transfers detected:
    $212 ‚Üí $D86
    $218 ‚Üí $FE3
    $21A ‚Üí $3C2
    $222 ‚Üí $06D (LOOP)
    $22C ‚Üí $E27
    ... and 194 more transfers
  Potential sorting loops: 108 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  270 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 16 instructions
      $200: LD   V2, #75      ; Load $75 into V2
      $256: ADD  V2, #4D      ; Add $4D to V2 (V2 = (V2 + $4D) & 0xFF)
      $338: LD   V2, #9A      ; Load $9A into V2
      ... and 13 more
    Compares sorted registers V[7]: 11 instructions
      $208: SE   V7, #5A      ; Skip next instruction if V7 == $5A
      $20C: SE   V7, #21      ; Skip next instruction if V7 == $21
      $302: SE   V7, V9       ; Skip next instruction if V7 == V9
      ... and 8 more
    Modifies sorted registers V[7]: 29 instructions
      $214: RND  V7, #96      ; V7 = random() AND $96
      $2CC: RND  V7, #8B      ; V7 = random() AND $8B
      $3D4: ADD  V7, #7A      ; Add $7A to V7 (V7 = (V7 + $7A) & 0xFF)
      ... and 26 more
    Modifies sorted registers V[6]: 26 instructions
      $21C: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      $36A: LD   V6, #D8      ; Load $D8 into V6
      $3FA: ADD  V6, #73      ; Add $73 to V6 (V6 = (V6 + $73) & 0xFF)
      ... and 23 more
    Compares sorted registers V[2]: 24 instructions
      $226: SE   V2, #3D      ; Skip next instruction if V2 == $3D
      $3C0: SE   V2, #B6      ; Skip next instruction if V2 == $B6
      $3DE: SNE  V2, #AA      ; Skip next instruction if V2 != $AA
      ... and 21 more
    Compares sorted registers V[6]: 18 instructions
      $228: SNE  V6, #55      ; Skip next instruction if V6 != $55
      $276: SE   V6, #7F      ; Skip next instruction if V6 == $7F
      $3E4: SNE  V6, #CB      ; Skip next instruction if V6 != $CB
      ... and 15 more
    Modifies sorted registers V[3]: 28 instructions
      $24E: ADD  V3, #EF      ; Add $EF to V3 (V3 = (V3 + $EF) & 0xFF)
      $2B4: LD   V3, #D3      ; Load $D3 into V3
      $35E: RND  V3, #EE      ; V3 = random() AND $EE
      ... and 25 more
    Compares sorted registers V[5]: 14 instructions
      $25E: SE   V5, #5D      ; Skip next instruction if V5 == $5D
      $410: SE   V5, #F0      ; Skip next instruction if V5 == $F0
      $41C: SNE  V5, #9F      ; Skip next instruction if V5 != $9F
      ... and 11 more
    Modifies sorted registers V[5]: 34 instructions
      $262: ADD  V5, #E5      ; Add $E5 to V5 (V5 = (V5 + $E5) & 0xFF)
      $2AA: LD   V5, #C4      ; Load $C4 into V5
      $388: RND  V5, #FF      ; V5 = random() AND $FF
      ... and 31 more
    Compares sorted registers V[4]: 14 instructions
      $2C0: SNE  V4, #46      ; Skip next instruction if V4 != $46
      $4C0: SNE  V4, #A1      ; Skip next instruction if V4 != $A1
      $574: SNE  V4, #11      ; Skip next instruction if V4 != $11
      ... and 11 more
    Compares sorted registers V[3]: 11 instructions
      $2F8: SE   V3, #A2      ; Skip next instruction if V3 == $A2
      $34A: SE   V3, #DC      ; Skip next instruction if V3 == $DC
      $5DC: SNE  V3, #3A      ; Skip next instruction if V3 != $3A
      ... and 8 more
    Modifies sorted registers V[4]: 31 instructions
      $2FE: RND  V4, #83      ; V4 = random() AND $83
      $414: RND  V4, #7E      ; V4 = random() AND $7E
      $460: RND  V4, #06      ; V4 = random() AND $06
      ... and 28 more
    Compares sorted registers V[4, 5]: 1 instructions
      $30A: SNE  V4, V5       ; Skip next instruction if V4 != V5
    Logical operation on V[5] (sets VF=0 in CUDA): 3 instructions
      $358: XOR  V1, V5       ; V1 = V1 XOR V5, VF = 0
      $520: XOR  V1, V5       ; V1 = V1 XOR V5, VF = 0
      $53A: AND  VD, V5       ; VD = VD AND V5, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $3C8: AND  V0, V7       ; V0 = V0 AND V7, VF = 0
    Compares sorted registers V[3, 5]: 1 instructions
      $586: SNE  V5, V3       ; Skip next instruction if V5 != V3
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $654: OR   V8, V6       ; V8 = V8 OR V6, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $6B4: SUB  V0, V2       ; V0 = (V0 - V2) & 0xFF, VF = NOT borrow
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $9BC: XOR  VE, V2       ; VE = VE XOR V2, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $A90: SUB  VF, V6       ; VF = (VF - V6) & 0xFF, VF = NOT borrow
    Register transfer involving V[6]: 1 instructions
      $BEE: LD   VA, V6       ; Load V6 into VA
    Register transfer involving V[3]: 1 instructions
      $C46: LD   VB, V3       ; Load V3 into VB
    Compares sorted registers V[4, 6]: 1 instructions
      $E20: SNE  V6, V4       ; Skip next instruction if V6 != V4
    Arithmetic on sorted registers V[4]: 1 instructions
      $F3A: ADD  VB, V4       ; VB = (VB + V4) & 0xFF, VF = carry

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 483 (27.0%)
    LD: 227 (12.7%)
    JP: 210 (11.7%)
    NOP: 123 (6.9%)
    RND: 122 (6.8%)
    SNE: 122 (6.8%)
    ADD: 119 (6.6%)
    DRW: 119 (6.6%)
    SE: 107 (6.0%)
    CALL: 95 (5.3%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 668
  Based on: 270 sorting instructions + 199 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3237D01_V2-V7_L6_DES_C10_3d8410ea.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 113 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 188, 9, 8, 7, 6, 5, 4]
  Changes: V1: 3‚Üí188, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 10

CUDA EXECUTION STATISTICS:
  Total register operations: 0
  Register reads: 3
  Register writes: 5
  Register writes per cycle: 0.500

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 27 locations
       Addresses: ['$280', '$290', '$330', '$376', '$3B6', '$482', '$5BC', '$626']
       ... and 19 more
  V1: Modified at 21 locations
       Addresses: ['$200', '$236', '$264', '$2FE', '$3E8', '$406', '$42C', '$4E8']
       ... and 13 more
  V2: Modified at 18 locations
       Addresses: ['$2A0', '$30A', '$346', '$41E', '$55E', '$5B0', '$794', '$9D8']
       ... and 10 more
  V3: Modified at 29 locations
       Addresses: ['$208', '$25C', '$39E', '$3AC', '$432', '$44C', '$480', '$486']
       ... and 21 more
  V4: Modified at 29 locations
       Addresses: ['$224', '$256', '$258', '$35C', '$3B4', '$40C', '$44E', '$5A2']
       ... and 21 more
  V5: Modified at 19 locations
       Addresses: ['$206', '$340', '$348', '$3D4', '$466', '$47E', '$58C', '$65C']
       ... and 11 more
  V6: Modified at 27 locations
       Addresses: ['$234', '$296', '$2F8', '$470', '$4B0', '$52A', '$536', '$57A']
       ... and 19 more
  V7: Modified at 24 locations
       Addresses: ['$21A', '$24C', '$294', '$2E8', '$2F0', '$2F2', '$344', '$374']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  243 control transfers detected:
    $22E ‚Üí $148 (LOOP)
    $246 ‚Üí $CC8
    $25E ‚Üí $844
    $278 ‚Üí $72D
    $284 ‚Üí $9CC
    ... and 238 more transfers
  Potential sorting loops: 138 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  240 instructions identified as sorting-related:
    Modifies sorted registers V[5]: 19 instructions
      $206: RND  V5, #67      ; V5 = random() AND $67
      $340: ADD  V5, #E5      ; Add $E5 to V5 (V5 = (V5 + $E5) & 0xFF)
      $348: ADD  V5, #35      ; Add $35 to V5 (V5 = (V5 + $35) & 0xFF)
      ... and 16 more
    Modifies sorted registers V[3]: 29 instructions
      $208: RND  V3, #68      ; V3 = random() AND $68
      $25C: ADD  V3, #80      ; Add $80 to V3 (V3 = (V3 + $80) & 0xFF)
      $39E: RND  V3, #AC      ; V3 = random() AND $AC
      ... and 26 more
    Compares sorted registers V[4]: 16 instructions
      $210: SNE  V4, #BE      ; Skip next instruction if V4 != $BE
      $34A: SNE  V4, #23      ; Skip next instruction if V4 != $23
      $4F4: SNE  V4, #29      ; Skip next instruction if V4 != $29
      ... and 13 more
    Compares sorted registers V[2]: 10 instructions
      $212: SNE  V2, #C8      ; Skip next instruction if V2 != $C8
      $2AA: SNE  V2, #FD      ; Skip next instruction if V2 != $FD
      $444: SE   V2, #60      ; Skip next instruction if V2 == $60
      ... and 7 more
    Modifies sorted registers V[7]: 24 instructions
      $21A: LD   V7, #6A      ; Load $6A into V7
      $24C: LD   V7, #C5      ; Load $C5 into V7
      $294: RND  V7, #E3      ; V7 = random() AND $E3
      ... and 21 more
    Compares sorted registers V[6]: 15 instructions
      $220: SNE  V6, #62      ; Skip next instruction if V6 != $62
      $3F6: SE   V6, #24      ; Skip next instruction if V6 == $24
      $52C: SNE  V6, #CA      ; Skip next instruction if V6 != $CA
      ... and 12 more
    Modifies sorted registers V[4]: 29 instructions
      $224: ADD  V4, #17      ; Add $17 to V4 (V4 = (V4 + $17) & 0xFF)
      $256: LD   V4, #BE      ; Load $BE into V4
      $258: RND  V4, #C8      ; V4 = random() AND $C8
      ... and 26 more
    Modifies sorted registers V[6]: 27 instructions
      $234: LD   V6, #1D      ; Load $1D into V6
      $296: LD   V6, #1F      ; Load $1F into V6
      $2F8: LD   V6, #06      ; Load $06 into V6
      ... and 24 more
    Compares sorted registers V[5]: 13 instructions
      $242: SE   V5, #08      ; Skip next instruction if V5 == $08
      $244: SE   V5, #C7      ; Skip next instruction if V5 == $C7
      $574: SNE  V5, #F5      ; Skip next instruction if V5 != $F5
      ... and 10 more
    Compares sorted registers V[3]: 15 instructions
      $282: SE   V3, #12      ; Skip next instruction if V3 == $12
      $54E: SNE  V3, #AF      ; Skip next instruction if V3 != $AF
      $55A: SNE  V3, #8A      ; Skip next instruction if V3 != $8A
      ... and 12 more
    Modifies sorted registers V[2]: 18 instructions
      $2A0: ADD  V2, #37      ; Add $37 to V2 (V2 = (V2 + $37) & 0xFF)
      $30A: ADD  V2, #6B      ; Add $6B to V2 (V2 = (V2 + $6B) & 0xFF)
      $346: RND  V2, #06      ; V2 = random() AND $06
      ... and 15 more
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $330: XOR  V0, V7       ; V0 = V0 XOR V7, VF = 0
    Register transfer involving V[5]: 1 instructions
      $3CE: LD   F, V5        ; I = font_address(V5 & 0xF) = 0x50 + (V5 & 0xF) * 5
    Logical operation on V[6] (sets VF=0 in CUDA): 4 instructions
      $514: OR   VE, V6       ; VE = VE OR V6, VF = 0
      $924: AND  V9, V6       ; V9 = V9 AND V6, VF = 0
      $BCA: OR   VF, V6       ; VF = VF OR V6, VF = 0
      ... and 1 more
    Arithmetic on sorted registers V[3]: 1 instructions
      $604: ADD  V8, V3       ; V8 = (V8 + V3) & 0xFF, VF = carry
    Compares sorted registers V[7]: 14 instructions
      $664: SNE  V7, V0       ; Skip next instruction if V7 != V0
      $7E8: SE   V7, #B1      ; Skip next instruction if V7 == $B1
      $88E: SNE  V7, #63      ; Skip next instruction if V7 != $63
      ... and 11 more
    Register transfer involving V[3]: 1 instructions
      $8B2: LD   F, V3        ; I = font_address(V3 & 0xF) = 0x50 + (V3 & 0xF) * 5
    Arithmetic on sorted registers V[7]: 1 instructions
      $9E0: SUBN VB, V7       ; VB = (V7 - VB) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[6]: 1 instructions
      $A02: ADD  VB, V6       ; VB = (VB + V6) & 0xFF, VF = carry
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $C88: LD   [I], VF      ; Store V0-VF at [I], then I += 16

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 482 (26.9%)
    LD: 234 (13.1%)
    JP: 218 (12.2%)
    CALL: 125 (7.0%)
    SNE: 120 (6.7%)
    ADD: 117 (6.5%)
    NOP: 117 (6.5%)
    RND: 113 (6.3%)
    DRW: 111 (6.2%)
    SE: 107 (6.0%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 726
  Based on: 240 sorting instructions + 243 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3304D01_V2-V7_L6_DES_C100_21278596.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 20.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 register comparisons in sorted range
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.6% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 108 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 32, 9, 8, 7, 6, 5, 4]
  Changes: V1: 3‚Üí32, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 100

CUDA EXECUTION STATISTICS:
  Total register operations: 4
  Register reads: 36
  Register writes: 53
  Register writes per cycle: 0.530

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$254', '$2F6', '$3E2', '$41A', '$562', '$6A6', '$71E', '$75E']
       ... and 15 more
  V1: Modified at 23 locations
       Addresses: ['$3A8', '$4A8', '$4B6', '$59A', '$5B8', '$67E', '$6B8', '$706']
       ... and 15 more
  V2: Modified at 31 locations
       Addresses: ['$202', '$23C', '$258', '$288', '$28A', '$2FE', '$310', '$3B0']
       ... and 23 more
  V3: Modified at 34 locations
       Addresses: ['$23A', '$2EA', '$366', '$4D8', '$5D0', '$5EE', '$676', '$680']
       ... and 26 more
  V4: Modified at 21 locations
       Addresses: ['$232', '$2DC', '$2FC', '$484', '$4EA', '$56C', '$584', '$5AA']
       ... and 13 more
  V5: Modified at 21 locations
       Addresses: ['$206', '$276', '$2D2', '$43C', '$470', '$564', '$5FE', '$600']
       ... and 13 more
  V6: Modified at 30 locations
       Addresses: ['$220', '$292', '$2E4', '$300', '$3BA', '$3F2', '$3F8', '$582']
       ... and 22 more
  V7: Modified at 21 locations
       Addresses: ['$360', '$39C', '$3A6', '$3B8', '$5BA', '$67A', '$6AC', '$728']
       ... and 13 more

CONTROL FLOW ANALYSIS:
  225 control transfers detected:
    $204 ‚Üí $392
    $20C ‚Üí $B69
    $214 ‚Üí $27C
    $21A ‚Üí $936
    $24A ‚Üí $F73
    ... and 220 more transfers
  Potential sorting loops: 121 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  279 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 31 instructions
      $202: RND  V2, #29      ; V2 = random() AND $29
      $23C: SHR  V2           ; V2 = V2 >> 1, VF = LSB
      $258: LD   V2, #7D      ; Load $7D into V2
      ... and 28 more
    Modifies sorted registers V[5]: 21 instructions
      $206: RND  V5, #37      ; V5 = random() AND $37
      $276: SUBN V5, V6       ; V5 = (V6 - V5) & 0xFF, VF = NOT borrow
      $2D2: SUBN V5, V5       ; V5 = (V5 - V5) & 0xFF, VF = NOT borrow
      ... and 18 more
    Compares sorted registers V[7]: 21 instructions
      $210: SE   V7, VF       ; Skip next instruction if V7 == VF
      $646: SNE  V7, #F8      ; Skip next instruction if V7 != $F8
      $6BE: SE   V7, #4D      ; Skip next instruction if V7 == $4D
      ... and 18 more
    Modifies sorted registers V[6]: 30 instructions
      $220: LD   V6, #8E      ; Load $8E into V6
      $292: RND  V6, #69      ; V6 = random() AND $69
      $2E4: ADD  V6, #60      ; Add $60 to V6 (V6 = (V6 + $60) & 0xFF)
      ... and 27 more
    Compares sorted registers V[4]: 17 instructions
      $22A: SNE  VF, V4       ; Skip next instruction if VF != V4
      $2C6: SNE  V4, #5F      ; Skip next instruction if V4 != $5F
      $320: SE   V4, VF       ; Skip next instruction if V4 == VF
      ... and 14 more
    Compares sorted registers V[6]: 11 instructions
      $230: SNE  V6, #A2      ; Skip next instruction if V6 != $A2
      $2EE: SNE  V6, #76      ; Skip next instruction if V6 != $76
      $33C: SE   V6, #6C      ; Skip next instruction if V6 == $6C
      ... and 8 more
    Modifies sorted registers V[4]: 21 instructions
      $232: ADD  V4, #3E      ; Add $3E to V4 (V4 = (V4 + $3E) & 0xFF)
      $2DC: RND  V4, #D0      ; V4 = random() AND $D0
      $2FC: LD   V4, V2       ; Load V2 into V4
      ... and 18 more
    Modifies sorted registers V[3]: 34 instructions
      $23A: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $2EA: ADD  V3, #E3      ; Add $E3 to V3 (V3 = (V3 + $E3) & 0xFF)
      $366: LD   V3, #96      ; Load $96 into V3
      ... and 31 more
    Compares sorted registers V[2]: 24 instructions
      $23E: SE   V2, #BE      ; Skip next instruction if V2 == $BE
      $2FA: SNE  V2, VB       ; Skip next instruction if V2 != VB
      $488: SE   V2, #10      ; Skip next instruction if V2 == $10
      ... and 21 more
    Compares sorted registers V[3, 4]: 1 instructions
      $248: SNE  V3, V4       ; Skip next instruction if V3 != V4
    Compares sorted registers V[3]: 15 instructions
      $27C: SNE  VA, V3       ; Skip next instruction if VA != V3
      $3A2: SE   V3, VB       ; Skip next instruction if V3 == VB
      $406: SNE  V3, #D3      ; Skip next instruction if V3 != $D3
      ... and 12 more
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $336: XOR  VA, V5       ; VA = VA XOR V5, VF = 0
      $CF0: OR   VB, V5       ; VB = VB OR V5, VF = 0
    Modifies sorted registers V[7]: 21 instructions
      $360: LD   V7, #87      ; Load $87 into V7
      $39C: LD   V7, #F4      ; Load $F4 into V7
      $3A6: RND  V7, #5D      ; V7 = random() AND $5D
      ... and 18 more
    Compares sorted registers V[5]: 15 instructions
      $3DE: SE   V5, #BA      ; Skip next instruction if V5 == $BA
      $640: SE   V5, #C7      ; Skip next instruction if V5 == $C7
      $71C: SNE  V5, #70      ; Skip next instruction if V5 != $70
      ... and 12 more
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $572: LD   [I], V7      ; Store V0-V7 at [I], then I += 8
    Arithmetic on sorted registers V[7]: 2 instructions
      $614: ADD  V9, V7       ; V9 = (V9 + V7) & 0xFF, VF = carry
      $632: ADD  I, V7        ; I = (I + V7) & 0xFFFF
    Register transfer involving V[3]: 2 instructions
      $642: LD   VB, V3       ; Load V3 into VB
      $B5C: LD   VC, V3       ; Load V3 into VC
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $6A6: XOR  V0, V3       ; V0 = V0 XOR V3, VF = 0
      $C08: OR   VD, V3       ; VD = VD OR V3, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $7AA: XOR  VD, V6       ; VD = VD XOR V6, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $7FC: ADD  V8, V4       ; V8 = (V8 + V4) & 0xFF, VF = carry
    Arithmetic on sorted registers V[5]: 1 instructions
      $8D2: SUB  VF, V5       ; VF = (VF - V5) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 2 instructions
      $8E0: ADD  V1, V3       ; V1 = (V1 + V3) & 0xFF, VF = carry
      $D4C: SUBN VD, V3       ; VD = (V3 - VD) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[6]: 1 instructions
      $CAC: SUB  VB, V6       ; VB = (VB - V6) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $D84: OR   VD, V4       ; VD = VD OR V4, VF = 0
    Compares sorted registers V[3, 7]: 1 instructions
      $F94: SE   V3, V7       ; Skip next instruction if V3 == V7

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 463 (25.8%)
    JP: 250 (14.0%)
    LD: 249 (13.9%)
    SE: 131 (7.3%)
    ADD: 125 (7.0%)
    SNE: 120 (6.7%)
    CALL: 109 (6.1%)
    RND: 108 (6.0%)
    DRW: 99 (5.5%)
    NOP: 87 (4.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 729
  Based on: 279 sorting instructions + 225 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3392D01_V2-V7_L6_DES_C390_4d2e8052.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 112 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 224, 9, 8, 7, 6, 5, 4]
  Changes: V1: 3‚Üí224, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 390

CUDA EXECUTION STATISTICS:
  Total register operations: 20
  Register reads: 88
  Register writes: 113
  Register writes per cycle: 0.290

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 18 locations
       Addresses: ['$29C', '$43A', '$7F4', '$7FC', '$840', '$880', '$90E', '$912']
       ... and 10 more
  V1: Modified at 31 locations
       Addresses: ['$214', '$2BA', '$360', '$362', '$370', '$382', '$3AA', '$3BC']
       ... and 23 more
  V2: Modified at 25 locations
       Addresses: ['$324', '$352', '$376', '$386', '$4CC', '$4F4', '$65C', '$69C']
       ... and 17 more
  V3: Modified at 22 locations
       Addresses: ['$21E', '$2CC', '$2DE', '$45A', '$52C', '$548', '$6C2', '$82C']
       ... and 14 more
  V4: Modified at 22 locations
       Addresses: ['$252', '$2B0', '$2FC', '$31C', '$340', '$430', '$4B4', '$55E']
       ... and 14 more
  V5: Modified at 23 locations
       Addresses: ['$224', '$28A', '$2C4', '$2CE', '$354', '$4F0', '$536', '$53C']
       ... and 15 more
  V6: Modified at 29 locations
       Addresses: ['$230', '$256', '$260', '$2B4', '$312', '$32E', '$3A4', '$3AC']
       ... and 21 more
  V7: Modified at 25 locations
       Addresses: ['$20C', '$24E', '$270', '$2AA', '$2E6', '$31A', '$3E2', '$3F6']
       ... and 17 more

CONTROL FLOW ANALYSIS:
  243 control transfers detected:
    $20A ‚Üí $D54
    $21A ‚Üí $8E6
    $22A ‚Üí $78D
    $23E ‚Üí $D86
    $242 ‚Üí $C6C
    ... and 238 more transfers
  Potential sorting loops: 134 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  253 instructions identified as sorting-related:
    Compares sorted registers V[6]: 13 instructions
      $206: SE   V6, #5B      ; Skip next instruction if V6 == $5B
      $218: SE   V6, #9C      ; Skip next instruction if V6 == $9C
      $300: SNE  V6, #4E      ; Skip next instruction if V6 != $4E
      ... and 10 more
    Modifies sorted registers V[7]: 25 instructions
      $20C: ADD  V7, #43      ; Add $43 to V7 (V7 = (V7 + $43) & 0xFF)
      $24E: LD   V7, #33      ; Load $33 into V7
      $270: ADD  V7, #C7      ; Add $C7 to V7 (V7 = (V7 + $C7) & 0xFF)
      ... and 22 more
    Modifies sorted registers V[3]: 22 instructions
      $21E: SUB  V3, VA       ; V3 = (V3 - VA) & 0xFF, VF = NOT borrow
      $2CC: ADD  V3, #ED      ; Add $ED to V3 (V3 = (V3 + $ED) & 0xFF)
      $2DE: LD   V3, #5F      ; Load $5F into V3
      ... and 19 more
    Compares sorted registers V[3]: 17 instructions
      $220: SNE  V3, #1E      ; Skip next instruction if V3 != $1E
      $2EA: SE   V3, #C8      ; Skip next instruction if V3 == $C8
      $41C: SNE  V3, #8C      ; Skip next instruction if V3 != $8C
      ... and 14 more
    Modifies sorted registers V[5]: 23 instructions
      $224: LD   V5, #ED      ; Load $ED into V5
      $28A: LD   V5, #48      ; Load $48 into V5
      $2C4: ADD  V5, #87      ; Add $87 to V5 (V5 = (V5 + $87) & 0xFF)
      ... and 20 more
    Modifies sorted registers V[6]: 29 instructions
      $230: LD   V6, #2A      ; Load $2A into V6
      $256: LD   V6, #73      ; Load $73 into V6
      $260: RND  V6, #86      ; V6 = random() AND $86
      ... and 26 more
    Compares sorted registers V[7]: 21 instructions
      $248: SE   V7, #52      ; Skip next instruction if V7 == $52
      $498: SE   V7, #13      ; Skip next instruction if V7 == $13
      $4B0: SNE  V7, #FB      ; Skip next instruction if V7 != $FB
      ... and 18 more
    Compares sorted registers V[5]: 15 instructions
      $24C: SE   V5, #18      ; Skip next instruction if V5 == $18
      $450: SE   V5, #3E      ; Skip next instruction if V5 == $3E
      $4C6: SNE  V5, #C1      ; Skip next instruction if V5 != $C1
      ... and 12 more
    Modifies sorted registers V[4]: 22 instructions
      $252: LD   V4, #36      ; Load $36 into V4
      $2B0: ADD  V4, #54      ; Add $54 to V4 (V4 = (V4 + $54) & 0xFF)
      $2FC: LD   V4, #AB      ; Load $AB into V4
      ... and 19 more
    Compares sorted registers V[2]: 18 instructions
      $278: SNE  V2, #A4      ; Skip next instruction if V2 != $A4
      $4CE: SNE  V2, #00      ; Skip next instruction if V2 != $00
      $514: SE   V2, #AD      ; Skip next instruction if V2 == $AD
      ... and 15 more
    Modifies sorted registers V[2]: 25 instructions
      $324: LD   V2, #DE      ; Load $DE into V2
      $352: LD   V2, #D8      ; Load $D8 into V2
      $376: RND  V2, #AC      ; V2 = random() AND $AC
      ... and 22 more
    Compares sorted registers V[4]: 12 instructions
      $540: SE   V4, #D0      ; Skip next instruction if V4 == $D0
      $642: SNE  V4, #1B      ; Skip next instruction if V4 != $1B
      $7D0: SNE  V4, #21      ; Skip next instruction if V4 != $21
      ... and 9 more
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $6D4: AND  VF, V3       ; VF = VF AND V3, VF = 0
      $7EA: AND  V8, V3       ; V8 = V8 AND V3, VF = 0
    Register transfer involving V[5]: 1 instructions
      $7FC: LD   V0, V5       ; Load V5 into V0
    Arithmetic on sorted registers V[4]: 1 instructions
      $A4C: SUB  VA, V4       ; VA = (VA - V4) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4, 5]: 1 instructions
      $A54: SNE  V4, V5       ; Skip next instruction if V4 != V5
    Register transfer involving V[2]: 1 instructions
      $AEA: LD   F, V2        ; I = font_address(V2 & 0xF) = 0x50 + (V2 & 0xF) * 5
    Arithmetic on sorted registers V[2]: 1 instructions
      $B96: ADD  V8, V2       ; V8 = (V8 + V2) & 0xFF, VF = carry
    Compares sorted registers V[2, 4]: 1 instructions
      $C80: SE   V4, V2       ; Skip next instruction if V4 == V2
    Arithmetic on sorted registers V[7]: 1 instructions
      $CBC: ADD  VE, V7       ; VE = (VE + V7) & 0xFF, VF = carry
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $CC2: XOR  VE, V2       ; VE = VE XOR V2, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $F60: OR   VA, V7       ; VA = VA OR V7, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 465 (25.9%)
    JP: 249 (13.9%)
    LD: 240 (13.4%)
    DRW: 127 (7.1%)
    SNE: 118 (6.6%)
    CALL: 117 (6.5%)
    SE: 113 (6.3%)
    RND: 112 (6.2%)
    NOP: 106 (5.9%)
    ADD: 99 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 739
  Based on: 253 sorting instructions + 243 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3520D01_V1-V6_L6_ASC_C420_7202180d.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 126 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [67, 46, 47, 48, 49, 50, 51, 144]
  Changes: V0: 8‚Üí67, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí144
  ‚úì Correct initial test pattern detected
  Achievement cycle: 420

CUDA EXECUTION STATISTICS:
  Total register operations: 20
  Register reads: 205
  Register writes: 424
  Register writes per cycle: 1.010

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 27 locations
       Addresses: ['$29C', '$366', '$3D6', '$59E', '$648', '$668', '$6A4', '$72E']
       ... and 19 more
  V1: Modified at 29 locations
       Addresses: ['$2E4', '$394', '$3B0', '$3EE', '$3FE', '$50E', '$586', '$59E']
       ... and 21 more
  V2: Modified at 19 locations
       Addresses: ['$2E0', '$38E', '$408', '$48E', '$52C', '$566', '$59E', '$5FA']
       ... and 11 more
  V3: Modified at 31 locations
       Addresses: ['$2DC', '$422', '$51E', '$540', '$59E', '$5C2', '$5CC', '$6CA']
       ... and 23 more
  V4: Modified at 33 locations
       Addresses: ['$224', '$2A8', '$42E', '$4BA', '$4DC', '$59E', '$61C', '$62A']
       ... and 25 more
  V5: Modified at 34 locations
       Addresses: ['$266', '$2F2', '$3FC', '$40C', '$416', '$48C', '$504', '$514']
       ... and 26 more
  V6: Modified at 23 locations
       Addresses: ['$318', '$31E', '$32A', '$376', '$54A', '$59E', '$5A4', '$62C']
       ... and 15 more
  V7: Modified at 26 locations
       Addresses: ['$24A', '$26C', '$2BA', '$2C2', '$34A', '$418', '$4FA', '$59E']
       ... and 18 more

CONTROL FLOW ANALYSIS:
  200 control transfers detected:
    $202 ‚Üí $FB2
    $212 ‚Üí $DAF
    $232 ‚Üí $21A (LOOP)
    $238 ‚Üí $166 (LOOP)
    $24C ‚Üí $0EB (LOOP)
    ... and 195 more transfers
  Potential sorting loops: 112 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  261 instructions identified as sorting-related:
    Modifies sorted registers V[4]: 31 instructions
      $224: ADD  V4, #B9      ; Add $B9 to V4 (V4 = (V4 + $B9) & 0xFF)
      $2A8: RND  V4, #D8      ; V4 = random() AND $D8
      $42E: LD   V4, #71      ; Load $71 into V4
      ... and 28 more
    Compares sorted registers V[6]: 10 instructions
      $22A: SE   V6, #6F      ; Skip next instruction if V6 == $6F
      $3C6: SNE  V6, #D6      ; Skip next instruction if V6 != $D6
      $3C8: SE   V6, VD       ; Skip next instruction if V6 == VD
      ... and 7 more
    Compares sorted registers V[4]: 20 instructions
      $250: SE   V4, #DF      ; Skip next instruction if V4 == $DF
      $294: SE   V4, #21      ; Skip next instruction if V4 == $21
      $2F6: SNE  V4, #37      ; Skip next instruction if V4 != $37
      ... and 17 more
    Compares sorted registers V[1]: 13 instructions
      $25C: SNE  V1, #D6      ; Skip next instruction if V1 != $D6
      $450: SNE  V1, #24      ; Skip next instruction if V1 != $24
      $4B2: SE   V1, #72      ; Skip next instruction if V1 == $72
      ... and 10 more
    Modifies sorted registers V[5]: 32 instructions
      $266: LD   V5, #F4      ; Load $F4 into V5
      $2F2: SHR  V5           ; V5 = V5 >> 1, VF = LSB
      $3FC: ADD  V5, #9B      ; Add $9B to V5 (V5 = (V5 + $9B) & 0xFF)
      ... and 29 more
    Compares sorted registers V[3]: 13 instructions
      $2A4: SNE  V3, #1E      ; Skip next instruction if V3 != $1E
      $342: SNE  V3, #9A      ; Skip next instruction if V3 != $9A
      $346: SE   V3, #85      ; Skip next instruction if V3 == $85
      ... and 10 more
    Modifies sorted registers V[3]: 29 instructions
      $2DC: RND  V3, #B2      ; V3 = random() AND $B2
      $422: ADD  V3, #85      ; Add $85 to V3 (V3 = (V3 + $85) & 0xFF)
      $51E: ADD  V3, #B8      ; Add $B8 to V3 (V3 = (V3 + $B8) & 0xFF)
      ... and 26 more
    Modifies sorted registers V[2]: 17 instructions
      $2E0: RND  V2, #4B      ; V2 = random() AND $4B
      $38E: ADD  V2, #F9      ; Add $F9 to V2 (V2 = (V2 + $F9) & 0xFF)
      $408: RND  V2, #D2      ; V2 = random() AND $D2
      ... and 14 more
    Modifies sorted registers V[1]: 27 instructions
      $2E4: SUB  V1, V0       ; V1 = (V1 - V0) & 0xFF, VF = NOT borrow
      $394: ADD  V1, #19      ; Add $19 to V1 (V1 = (V1 + $19) & 0xFF)
      $3B0: RND  V1, #B5      ; V1 = random() AND $B5
      ... and 24 more
    Compares sorted registers V[2]: 22 instructions
      $2E6: SNE  V2, #86      ; Skip next instruction if V2 != $86
      $33A: SNE  V2, V8       ; Skip next instruction if V2 != V8
      $3AA: SNE  V2, #E6      ; Skip next instruction if V2 != $E6
      ... and 19 more
    Arithmetic on sorted registers V[2]: 2 instructions
      $30C: SUB  VF, V2       ; VF = (VF - V2) & 0xFF, VF = NOT borrow
      $4D6: SUB  V9, V2       ; V9 = (V9 - V2) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[6]: 21 instructions
      $318: LD   V6, #D8      ; Load $D8 into V6
      $31E: LD   V6, #70      ; Load $70 into V6
      $32A: ADD  V6, #C9      ; Add $C9 to V6 (V6 = (V6 + $C9) & 0xFF)
      ... and 18 more
    Compares sorted registers V[5]: 11 instructions
      $492: SNE  V5, #60      ; Skip next instruction if V5 != $60
      $49C: SE   V5, #C8      ; Skip next instruction if V5 == $C8
      $4C4: SE   V5, #48      ; Skip next instruction if V5 == $48
      ... and 8 more
    Arithmetic on sorted registers V[3]: 2 instructions
      $53E: SUBN V8, V3       ; V8 = (V3 - V8) & 0xFF, VF = NOT borrow
      $C30: SUBN VF, V3       ; VF = (V3 - VF) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 2 instructions
      $59E: LD   V8, [I]      ; Load V0-V8 from [I], then I += 9
      $8FA: LD   V9, [I]      ; Load V0-V9 from [I], then I += 10
    Arithmetic on sorted registers V[4]: 1 instructions
      $6EE: SUB  VB, V4       ; VB = (VB - V4) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $8B6: XOR  VC, V3       ; VC = VC XOR V3, VF = 0
      $994: XOR  V7, V3       ; V7 = V7 XOR V3, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $8EA: SUBN V8, V6       ; V8 = (V6 - V8) & 0xFF, VF = NOT borrow
    Logical operation on V[2] (sets VF=0 in CUDA): 2 instructions
      $B00: XOR  VD, V2       ; VD = VD XOR V2, VF = 0
      $D7E: AND  VD, V2       ; VD = VD AND V2, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $CFA: XOR  VD, V6       ; VD = VD XOR V6, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $D28: XOR  VB, V4       ; VB = VB XOR V4, VF = 0
    Arithmetic on sorted registers V[5]: 1 instructions
      $E0A: SUBN V9, V5       ; V9 = (V5 - V9) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 519 (29.0%)
    LD: 233 (13.0%)
    JP: 193 (10.8%)
    ADD: 132 (7.4%)
    RND: 126 (7.0%)
    SNE: 118 (6.6%)
    NOP: 111 (6.2%)
    SE: 111 (6.2%)
    DRW: 104 (5.8%)
    CALL: 99 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 661
  Based on: 261 sorting instructions + 200 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3625D01_V1-V6_L6_ASC_C540_fdd3685c.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 110 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [1, 46, 47, 48, 49, 50, 51, 144]
  Changes: V0: 8‚Üí1, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí144
  ‚úì Correct initial test pattern detected
  Achievement cycle: 540

CUDA EXECUTION STATISTICS:
  Total register operations: 28
  Register reads: 277
  Register writes: 419
  Register writes per cycle: 0.776

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 19 locations
       Addresses: ['$290', '$2AE', '$44E', '$59C', '$5A4', '$68C', '$750', '$7B0']
       ... and 11 more
  V1: Modified at 29 locations
       Addresses: ['$2FE', '$406', '$51C', '$51E', '$584', '$5BA', '$640', '$69E']
       ... and 21 more
  V2: Modified at 24 locations
       Addresses: ['$2E0', '$3CA', '$6AE', '$6DA', '$72E', '$746', '$7EE', '$800']
       ... and 16 more
  V3: Modified at 23 locations
       Addresses: ['$30E', '$330', '$33A', '$422', '$4FA', '$4FC', '$56E', '$68E']
       ... and 15 more
  V4: Modified at 34 locations
       Addresses: ['$20A', '$240', '$286', '$2C4', '$30A', '$3D6', '$428', '$48C']
       ... and 26 more
  V5: Modified at 26 locations
       Addresses: ['$236', '$3BC', '$50C', '$770', '$78C', '$82A', '$850', '$89A']
       ... and 18 more
  V6: Modified at 21 locations
       Addresses: ['$246', '$2CC', '$2DC', '$39E', '$3C4', '$41E', '$4D2', '$694']
       ... and 13 more
  V7: Modified at 29 locations
       Addresses: ['$296', '$29C', '$38C', '$4C2', '$4D4', '$6EC', '$7A0', '$7AE']
       ... and 21 more

CONTROL FLOW ANALYSIS:
  216 control transfers detected:
    $200 ‚Üí $EBF
    $210 ‚Üí $241
    $214 ‚Üí $020 (LOOP)
    $218 ‚Üí $A62
    $21C ‚Üí $363
    ... and 211 more transfers
  Potential sorting loops: 125 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  245 instructions identified as sorting-related:
    Compares sorted registers V[5]: 16 instructions
      $206: SE   V5, #35      ; Skip next instruction if V5 == $35
      $358: SE   V5, #11      ; Skip next instruction if V5 == $11
      $436: SE   V5, #FA      ; Skip next instruction if V5 == $FA
      ... and 13 more
    Modifies sorted registers V[4]: 32 instructions
      $20A: RND  V4, #08      ; V4 = random() AND $08
      $240: LD   V4, #18      ; Load $18 into V4
      $286: RND  V4, #87      ; V4 = random() AND $87
      ... and 29 more
    Compares sorted registers V[2]: 13 instructions
      $220: SE   V2, #AD      ; Skip next instruction if V2 == $AD
      $256: SE   V2, #CA      ; Skip next instruction if V2 == $CA
      $2BC: SE   V2, #F9      ; Skip next instruction if V2 == $F9
      ... and 10 more
    Compares sorted registers V[6]: 11 instructions
      $228: SNE  V6, #D0      ; Skip next instruction if V6 != $D0
      $274: SE   V6, #70      ; Skip next instruction if V6 == $70
      $3F4: SNE  V6, #6E      ; Skip next instruction if V6 != $6E
      ... and 8 more
    Compares sorted registers V[1]: 9 instructions
      $22A: SNE  VB, V1       ; Skip next instruction if VB != V1
      $322: SE   V1, #8B      ; Skip next instruction if V1 == $8B
      $456: SNE  V1, #19      ; Skip next instruction if V1 != $19
      ... and 6 more
    Modifies sorted registers V[5]: 24 instructions
      $236: LD   V5, #AF      ; Load $AF into V5
      $3BC: LD   V5, #7C      ; Load $7C into V5
      $50C: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      ... and 21 more
    Modifies sorted registers V[6]: 19 instructions
      $246: RND  V6, #73      ; V6 = random() AND $73
      $2CC: LD   V6, #91      ; Load $91 into V6
      $2DC: SHR  V6           ; V6 = V6 >> 1, VF = LSB
      ... and 16 more
    Arithmetic on sorted registers V[1]: 1 instructions
      $27A: ADD  VF, V1       ; VF = (VF + V1) & 0xFF, VF = carry
    Compares sorted registers V[3]: 13 instructions
      $27E: SNE  V3, V9       ; Skip next instruction if V3 != V9
      $39C: SNE  V3, #98      ; Skip next instruction if V3 != $98
      $530: SE   VE, V3       ; Skip next instruction if VE == V3
      ... and 10 more
    Compares sorted registers V[4]: 19 instructions
      $284: SE   V4, #3B      ; Skip next instruction if V4 == $3B
      $2C8: SE   V4, #2B      ; Skip next instruction if V4 == $2B
      $2E8: SE   V4, #44      ; Skip next instruction if V4 == $44
      ... and 16 more
    Modifies sorted registers V[2]: 22 instructions
      $2E0: ADD  V2, #A9      ; Add $A9 to V2 (V2 = (V2 + $A9) & 0xFF)
      $3CA: RND  V2, #E3      ; V2 = random() AND $E3
      $6AE: AND  V2, VC       ; V2 = V2 AND VC, VF = 0
      ... and 19 more
    Modifies sorted registers V[1]: 27 instructions
      $2FE: SUB  V1, V1       ; V1 = (V1 - V1) & 0xFF, VF = NOT borrow
      $406: SHR  V1           ; V1 = V1 >> 1, VF = LSB
      $51C: RND  V1, #43      ; V1 = random() AND $43
      ... and 24 more
    Modifies sorted registers V[3]: 21 instructions
      $30E: LD   V3, #14      ; Load $14 into V3
      $330: ADD  V3, V5       ; V3 = (V3 + V5) & 0xFF, VF = carry
      $33A: RND  V3, #5D      ; V3 = random() AND $5D
      ... and 18 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $390: SUB  VC, V6       ; VC = (VC - V6) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 3 instructions
      $5A4: SUB  V0, V3       ; V0 = (V0 - V3) & 0xFF, VF = NOT borrow
      $712: SUBN VC, V3       ; VC = (V3 - VC) & 0xFF, VF = NOT borrow
      $DCA: SUB  VE, V3       ; VE = (VE - V3) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4, 5]: 1 instructions
      $660: SNE  V4, V5       ; Skip next instruction if V4 != V5
    Logical operation on V[5] (sets VF=0 in CUDA): 4 instructions
      $674: OR   VD, V5       ; VD = VD OR V5, VF = 0
      $7DA: XOR  V9, V5       ; V9 = V9 XOR V5, VF = 0
      $880: AND  VF, V5       ; VF = VF AND V5, VF = 0
      ... and 1 more
    Register transfer involving V[1]: 1 instructions
      $772: LD   VF, V1       ; Load V1 into VF
    Compares sorted registers V[3, 5]: 1 instructions
      $7B8: SNE  V3, V5       ; Skip next instruction if V3 != V5
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $9CA: AND  VF, V4       ; VF = VF AND V4, VF = 0
    Compares sorted registers V[3, 6]: 1 instructions
      $BB2: SNE  V3, V6       ; Skip next instruction if V3 != V6
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 2 instructions
      $BC8: LD   VD, [I]      ; Load V0-VD from [I], then I += 14
      $CD4: LD   VB, [I]      ; Load V0-VB from [I], then I += 12
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $E9A: XOR  VA, V2       ; VA = VA XOR V2, VF = 0
    Arithmetic on sorted registers V[5]: 1 instructions
      $EFC: ADD  V9, V5       ; V9 = (V9 + V5) & 0xFF, VF = carry
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $F38: XOR  V8, V1       ; V8 = V8 XOR V1, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 490 (27.3%)
    LD: 240 (13.4%)
    JP: 193 (10.8%)
    CALL: 120 (6.7%)
    NOP: 118 (6.6%)
    DRW: 115 (6.4%)
    SE: 115 (6.4%)
    SNE: 115 (6.4%)
    ADD: 114 (6.4%)
    RND: 110 (6.1%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 677
  Based on: 245 sorting instructions + 216 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3651D01_V1-V6_L6_ASC_C700_64262b56.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 99 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [21, 46, 47, 48, 49, 50, 51, 148]
  Changes: V0: 8‚Üí21, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí148
  ‚úì Correct initial test pattern detected
  Achievement cycle: 700

CUDA EXECUTION STATISTICS:
  Total register operations: 42
  Register reads: 343
  Register writes: 472
  Register writes per cycle: 0.674

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 27 locations
       Addresses: ['$200', '$2D2', '$312', '$39A', '$3D2', '$54E', '$598', '$5D6']
       ... and 19 more
  V1: Modified at 23 locations
       Addresses: ['$2B2', '$3A0', '$456', '$582', '$612', '$614', '$6B8', '$74A']
       ... and 15 more
  V2: Modified at 28 locations
       Addresses: ['$202', '$224', '$334', '$4F6', '$5A6', '$7B8', '$7BA', '$7CA']
       ... and 20 more
  V3: Modified at 25 locations
       Addresses: ['$250', '$358', '$3E8', '$466', '$470', '$498', '$4A4', '$4DE']
       ... and 17 more
  V4: Modified at 32 locations
       Addresses: ['$26A', '$272', '$284', '$294', '$47C', '$48C', '$608', '$61A']
       ... and 24 more
  V5: Modified at 31 locations
       Addresses: ['$238', '$2BC', '$2EC', '$2EE', '$306', '$376', '$3E2', '$400']
       ... and 23 more
  V6: Modified at 32 locations
       Addresses: ['$23A', '$28E', '$442', '$5B0', '$672', '$696', '$722', '$7A0']
       ... and 24 more
  V7: Modified at 29 locations
       Addresses: ['$212', '$394', '$414', '$4CE', '$500', '$546', '$57A', '$644']
       ... and 21 more

CONTROL FLOW ANALYSIS:
  186 control transfers detected:
    $206 ‚Üí $B4F
    $208 ‚Üí $5A3
    $20A ‚Üí $3F7
    $21C ‚Üí $25F
    $228 ‚Üí $A7D
    ... and 181 more transfers
  Potential sorting loops: 100 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  252 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 26 instructions
      $202: LD   V2, #FB      ; Load $FB into V2
      $224: ADD  V2, #6B      ; Add $6B to V2 (V2 = (V2 + $6B) & 0xFF)
      $334: RND  V2, #B2      ; V2 = random() AND $B2
      ... and 23 more
    Compares sorted registers V[2]: 14 instructions
      $218: SE   V2, #EE      ; Skip next instruction if V2 == $EE
      $268: SNE  V2, #BC      ; Skip next instruction if V2 != $BC
      $30C: SE   V2, #56      ; Skip next instruction if V2 == $56
      ... and 11 more
    Compares sorted registers V[6]: 11 instructions
      $230: SNE  V6, #F8      ; Skip next instruction if V6 != $F8
      $41C: SNE  V6, #1F      ; Skip next instruction if V6 != $1F
      $436: SE   V6, #9A      ; Skip next instruction if V6 == $9A
      ... and 8 more
    Modifies sorted registers V[5]: 29 instructions
      $238: OR   V5, V5       ; V5 = V5 OR V5, VF = 0
      $2BC: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      $2EC: RND  V5, #D6      ; V5 = random() AND $D6
      ... and 26 more
    Modifies sorted registers V[6]: 30 instructions
      $23A: LD   V6, #A6      ; Load $A6 into V6
      $28E: RND  V6, #BB      ; V6 = random() AND $BB
      $442: ADD  V6, VD       ; V6 = (V6 + VD) & 0xFF, VF = carry
      ... and 27 more
    Compares sorted registers V[5]: 13 instructions
      $240: SE   V5, #41      ; Skip next instruction if V5 == $41
      $32A: SNE  V5, #51      ; Skip next instruction if V5 != $51
      $4E8: SE   V5, #EB      ; Skip next instruction if V5 == $EB
      ... and 10 more
    Modifies sorted registers V[3]: 23 instructions
      $250: LD   V3, #00      ; Load $00 into V3
      $358: LD   V3, #33      ; Load $33 into V3
      $3E8: RND  V3, #35      ; V3 = random() AND $35
      ... and 20 more
    Modifies sorted registers V[4]: 30 instructions
      $26A: RND  V4, #52      ; V4 = random() AND $52
      $272: RND  V4, #5D      ; V4 = random() AND $5D
      $284: RND  V4, #5A      ; V4 = random() AND $5A
      ... and 27 more
    Modifies sorted registers V[1]: 21 instructions
      $2B2: ADD  V1, #8D      ; Add $8D to V1 (V1 = (V1 + $8D) & 0xFF)
      $3A0: SUBN V1, VC       ; V1 = (VC - V1) & 0xFF, VF = NOT borrow
      $456: LD   V1, #4F      ; Load $4F into V1
      ... and 18 more
    Compares sorted registers V[4]: 11 instructions
      $30A: SNE  V4, #96      ; Skip next instruction if V4 != $96
      $4C2: SE   V4, #07      ; Skip next instruction if V4 == $07
      $4D8: SNE  V4, VF       ; Skip next instruction if V4 != VF
      ... and 8 more
    Compares sorted registers V[3]: 17 instructions
      $3D4: SE   V3, #C7      ; Skip next instruction if V3 == $C7
      $3DE: SE   V3, #FE      ; Skip next instruction if V3 == $FE
      $3F2: SE   V3, #D8      ; Skip next instruction if V3 == $D8
      ... and 14 more
    Arithmetic on sorted registers V[1]: 1 instructions
      $3EA: SUBN V8, V1       ; V8 = (V1 - V8) & 0xFF, VF = NOT borrow
    Compares sorted registers V[1]: 11 instructions
      $4C6: SE   V1, #84      ; Skip next instruction if V1 == $84
      $6B4: SNE  V1, #45      ; Skip next instruction if V1 != $45
      $8AA: SE   V1, #A1      ; Skip next instruction if V1 == $A1
      ... and 8 more
    Register transfer involving V[1]: 1 instructions
      $54A: LD   VA, V1       ; Load V1 into VA
    Logical operation on V[5] (sets VF=0 in CUDA): 3 instructions
      $662: OR   VE, V5       ; VE = VE OR V5, VF = 0
      $7F4: OR   VC, V5       ; VC = VC OR V5, VF = 0
      $A50: AND  VD, V5       ; VD = VD AND V5, VF = 0
    Register transfer involving V[5]: 1 instructions
      $66E: LD   VF, V5       ; Load V5 into VF
    Register transfer involving V[1, 2, 3, 4, 5, 6]: 1 instructions
      $874: LD   [I], V8      ; Store V0-V8 at [I], then I += 9
    Compares sorted registers V[1, 3]: 1 instructions
      $8BC: SE   V3, V1       ; Skip next instruction if V3 == V1
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 2 instructions
      $8FE: LD   V6, [I]      ; Load V0-V6 from [I], then I += 7
      $A5A: LD   VE, [I]      ; Load V0-VE from [I], then I += 15
    Compares sorted registers V[3, 4]: 1 instructions
      $9C0: SNE  V3, V4       ; Skip next instruction if V3 != V4
    Arithmetic on sorted registers V[4]: 1 instructions
      $B14: SUBN V9, V4       ; V9 = (V4 - V9) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[5]: 1 instructions
      $C4C: ADD  I, V5        ; I = (I + V5) & 0xFFFF
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $C82: XOR  V8, V4       ; V8 = V8 XOR V4, VF = 0
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $E34: XOR  V7, V1       ; V7 = V7 XOR V1, VF = 0
    Register transfer involving V[3]: 1 instructions
      $FB8: LD   VA, V3       ; Load V3 into VA

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 479 (26.7%)
    LD: 267 (14.9%)
    JP: 218 (12.2%)
    NOP: 123 (6.9%)
    SNE: 118 (6.6%)
    SE: 115 (6.4%)
    DRW: 113 (6.3%)
    ADD: 108 (6.0%)
    RND: 99 (5.5%)
    CALL: 84 (4.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 624
  Based on: 252 sorting instructions + 186 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3684D01_V1-V6_L6_ASC_C460_82602d98.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [46, 47, 48, 49, 50, 51] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [46, 47, 48, 49, 50, 51] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 113 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [46, 47, 48, 49, 50, 51]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [149, 46, 47, 48, 49, 50, 51, 144]
  Changes: V0: 8‚Üí149, V1: 3‚Üí46, V2: 6‚Üí47, V3: 1‚Üí48, V4: 7‚Üí49, V5: 2‚Üí50, V6: 5‚Üí51, V7: 4‚Üí144
  ‚úì Correct initial test pattern detected
  Achievement cycle: 460

CUDA EXECUTION STATISTICS:
  Total register operations: 32
  Register reads: 250
  Register writes: 346
  Register writes per cycle: 0.752

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$254', '$382', '$3A6', '$3C6', '$44C', '$4A4', '$4B4', '$4CE']
       ... and 22 more
  V1: Modified at 31 locations
       Addresses: ['$222', '$22C', '$252', '$2CA', '$326', '$436', '$470', '$47A']
       ... and 23 more
  V2: Modified at 25 locations
       Addresses: ['$23A', '$3D0', '$402', '$40E', '$504', '$5A4', '$6D6', '$71E']
       ... and 17 more
  V3: Modified at 22 locations
       Addresses: ['$2EA', '$332', '$3DE', '$3F6', '$410', '$422', '$460', '$5D4']
       ... and 14 more
  V4: Modified at 19 locations
       Addresses: ['$22E', '$256', '$38C', '$3D2', '$4B0', '$574', '$696', '$6A0']
       ... and 11 more
  V5: Modified at 34 locations
       Addresses: ['$212', '$262', '$2F0', '$3EE', '$42A', '$576', '$59A', '$5C6']
       ... and 26 more
  V6: Modified at 15 locations
       Addresses: ['$27C', '$296', '$2EE', '$358', '$376', '$440', '$462', '$5C0']
       ... and 7 more
  V7: Modified at 29 locations
       Addresses: ['$220', '$234', '$292', '$2A6', '$2FE', '$3D8', '$4F4', '$56E']
       ... and 21 more

CONTROL FLOW ANALYSIS:
  221 control transfers detected:
    $20A ‚Üí $E40
    $21A ‚Üí $255
    $228 ‚Üí $2A5
    $23C ‚Üí $64F
    $248 ‚Üí $4D4
    ... and 216 more transfers
  Potential sorting loops: 139 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  241 instructions identified as sorting-related:
    Compares sorted registers V[6]: 18 instructions
      $206: SE   V6, #F6      ; Skip next instruction if V6 == $F6
      $2C2: SE   V6, #5B      ; Skip next instruction if V6 == $5B
      $408: SE   V6, #AF      ; Skip next instruction if V6 == $AF
      ... and 15 more
    Modifies sorted registers V[5]: 34 instructions
      $212: ADD  V5, #54      ; Add $54 to V5 (V5 = (V5 + $54) & 0xFF)
      $262: ADD  V5, #A0      ; Add $A0 to V5 (V5 = (V5 + $A0) & 0xFF)
      $2F0: LD   V5, #CD      ; Load $CD into V5
      ... and 31 more
    Modifies sorted registers V[1]: 31 instructions
      $222: LD   V1, #51      ; Load $51 into V1
      $22C: ADD  V1, #87      ; Add $87 to V1 (V1 = (V1 + $87) & 0xFF)
      $252: LD   V1, #73      ; Load $73 into V1
      ... and 28 more
    Modifies sorted registers V[4]: 19 instructions
      $22E: LD   V4, #B0      ; Load $B0 into V4
      $256: SUB  V4, V2       ; V4 = (V4 - V2) & 0xFF, VF = NOT borrow
      $38C: OR   V4, V0       ; V4 = V4 OR V0, VF = 0
      ... and 16 more
    Modifies sorted registers V[2]: 25 instructions
      $23A: RND  V2, #AB      ; V2 = random() AND $AB
      $3D0: LD   V2, #F8      ; Load $F8 into V2
      $402: RND  V2, #63      ; V2 = random() AND $63
      ... and 22 more
    Compares sorted registers V[2]: 12 instructions
      $264: SNE  V2, #DC      ; Skip next instruction if V2 != $DC
      $32A: SNE  V2, #6B      ; Skip next instruction if V2 != $6B
      $38E: SE   V2, #1A      ; Skip next instruction if V2 == $1A
      ... and 9 more
    Compares sorted registers V[5]: 14 instructions
      $26C: SNE  V5, #5A      ; Skip next instruction if V5 != $5A
      $300: SE   V5, #E9      ; Skip next instruction if V5 == $E9
      $33C: SNE  V5, #A0      ; Skip next instruction if V5 != $A0
      ... and 11 more
    Modifies sorted registers V[6]: 15 instructions
      $27C: ADD  V6, #F8      ; Add $F8 to V6 (V6 = (V6 + $F8) & 0xFF)
      $296: RND  V6, #04      ; V6 = random() AND $04
      $2EE: ADD  V6, #05      ; Add $05 to V6 (V6 = (V6 + $05) & 0xFF)
      ... and 12 more
    Compares sorted registers V[1]: 15 instructions
      $2AE: SNE  V1, #4B      ; Skip next instruction if V1 != $4B
      $2DA: SNE  V1, #A3      ; Skip next instruction if V1 != $A3
      $3AA: SNE  V1, #BF      ; Skip next instruction if V1 != $BF
      ... and 12 more
    Compares sorted registers V[4]: 15 instructions
      $2B4: SE   V4, #98      ; Skip next instruction if V4 == $98
      $2CE: SE   V4, #27      ; Skip next instruction if V4 == $27
      $30A: SE   V4, #4C      ; Skip next instruction if V4 == $4C
      ... and 12 more
    Modifies sorted registers V[3]: 22 instructions
      $2EA: RND  V3, #01      ; V3 = random() AND $01
      $332: AND  V3, V8       ; V3 = V3 AND V8, VF = 0
      $3DE: ADD  V3, #51      ; Add $51 to V3 (V3 = (V3 + $51) & 0xFF)
      ... and 19 more
    Compares sorted registers V[3]: 8 instructions
      $3B2: SE   V3, #3D      ; Skip next instruction if V3 == $3D
      $3F0: SNE  VE, V3       ; Skip next instruction if VE != V3
      $7D4: SNE  V3, #FF      ; Skip next instruction if V3 != $FF
      ... and 5 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $3C2: ADD  VB, V6       ; VB = (VB + V6) & 0xFF, VF = carry
    Register transfer involving V[1]: 1 instructions
      $53C: LD   VF, V1       ; Load V1 into VF
    Register transfer involving V[2]: 1 instructions
      $57C: LD   VB, V2       ; Load V2 into VB
    Register transfer involving V[1, 2, 3, 4]: 1 instructions
      $5DC: LD   [I], V4      ; Store V0-V4 at [I], then I += 5
    Register transfer involving V[5]: 1 instructions
      $A86: LD   V9, V5       ; Load V5 into V9
    Logical operation on V[1] (sets VF=0 in CUDA): 2 instructions
      $B4C: XOR  V9, V1       ; V9 = V9 XOR V1, VF = 0
      $F3A: OR   V9, V1       ; V9 = V9 OR V1, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $B60: SUB  VF, V3       ; VF = (VF - V3) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $B8E: XOR  VF, V4       ; VF = VF XOR V4, VF = 0
    Compares sorted registers V[2, 5]: 1 instructions
      $C3C: SNE  V2, V5       ; Skip next instruction if V2 != V5
    Compares sorted registers V[1, 6]: 1 instructions
      $CD4: SNE  V6, V1       ; Skip next instruction if V6 != V1
    Arithmetic on sorted registers V[1]: 1 instructions
      $F2E: ADD  VB, V1       ; VB = (VB + V1) & 0xFF, VF = carry
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $FFA: XOR  VC, V6       ; VC = VC XOR V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 505 (28.2%)
    LD: 227 (12.7%)
    JP: 217 (12.1%)
    CALL: 118 (6.6%)
    SNE: 117 (6.5%)
    RND: 113 (6.3%)
    DRW: 112 (6.2%)
    ADD: 109 (6.1%)
    NOP: 109 (6.1%)
    SE: 106 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 683
  Based on: 241 sorting instructions + 221 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3725D01_V2-V7_L6_DES_C110_09a464f2.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 116 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 110

CUDA EXECUTION STATISTICS:
  Total register operations: 3
  Register reads: 13
  Register writes: 11
  Register writes per cycle: 0.100

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 20 locations
       Addresses: ['$230', '$2FE', '$3AA', '$3C2', '$5B2', '$5E6', '$640', '$654']
       ... and 12 more
  V1: Modified at 34 locations
       Addresses: ['$224', '$25E', '$2C6', '$2D2', '$350', '$49A', '$522', '$5A6']
       ... and 26 more
  V2: Modified at 16 locations
       Addresses: ['$220', '$2D0', '$400', '$4B8', '$6D2', '$99C', '$9D2', '$A8C']
       ... and 8 more
  V3: Modified at 26 locations
       Addresses: ['$36C', '$37A', '$3F2', '$50E', '$512', '$534', '$59C', '$704']
       ... and 18 more
  V4: Modified at 25 locations
       Addresses: ['$216', '$25C', '$290', '$336', '$3DE', '$4A0', '$4D6', '$5B4']
       ... and 17 more
  V5: Modified at 22 locations
       Addresses: ['$292', '$2CA', '$31A', '$364', '$470', '$488', '$580', '$5CC']
       ... and 14 more
  V6: Modified at 18 locations
       Addresses: ['$294', '$2EC', '$3AE', '$45E', '$492', '$5A0', '$5D2', '$624']
       ... and 10 more
  V7: Modified at 23 locations
       Addresses: ['$26C', '$310', '$38E', '$440', '$4EC', '$51E', '$526', '$5FC']
       ... and 15 more

CONTROL FLOW ANALYSIS:
  208 control transfers detected:
    $210 ‚Üí $04D (LOOP)
    $228 ‚Üí $FD9
    $22E ‚Üí $DB3
    $23A ‚Üí $AC9
    $246 ‚Üí $7A4
    ... and 203 more transfers
  Potential sorting loops: 118 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  246 instructions identified as sorting-related:
    Modifies sorted registers V[4]: 25 instructions
      $216: ADD  V4, #1C      ; Add $1C to V4 (V4 = (V4 + $1C) & 0xFF)
      $25C: ADD  V4, #98      ; Add $98 to V4 (V4 = (V4 + $98) & 0xFF)
      $290: LD   V4, #BF      ; Load $BF into V4
      ... and 22 more
    Modifies sorted registers V[2]: 16 instructions
      $220: ADD  V2, #35      ; Add $35 to V2 (V2 = (V2 + $35) & 0xFF)
      $2D0: ADD  V2, #57      ; Add $57 to V2 (V2 = (V2 + $57) & 0xFF)
      $400: RND  V2, #A9      ; V2 = random() AND $A9
      ... and 13 more
    Compares sorted registers V[2]: 22 instructions
      $248: SE   V2, #A1      ; Skip next instruction if V2 == $A1
      $298: SE   V2, #2B      ; Skip next instruction if V2 == $2B
      $358: SNE  V2, #D9      ; Skip next instruction if V2 != $D9
      ... and 19 more
    Compares sorted registers V[6]: 18 instructions
      $250: SE   V6, #28      ; Skip next instruction if V6 == $28
      $2BA: SNE  V6, #27      ; Skip next instruction if V6 != $27
      $2DC: SNE  V6, #0D      ; Skip next instruction if V6 != $0D
      ... and 15 more
    Modifies sorted registers V[7]: 23 instructions
      $26C: RND  V7, #DE      ; V7 = random() AND $DE
      $310: RND  V7, #8F      ; V7 = random() AND $8F
      $38E: ADD  V7, #06      ; Add $06 to V7 (V7 = (V7 + $06) & 0xFF)
      ... and 20 more
    Compares sorted registers V[7]: 20 instructions
      $26E: SNE  V7, #32      ; Skip next instruction if V7 != $32
      $296: SE   V7, #4F      ; Skip next instruction if V7 == $4F
      $452: SE   V7, VB       ; Skip next instruction if V7 == VB
      ... and 17 more
    Compares sorted registers V[5]: 19 instructions
      $28E: SE   V5, #47      ; Skip next instruction if V5 == $47
      $312: SNE  V5, VD       ; Skip next instruction if V5 != VD
      $3F6: SE   V5, #67      ; Skip next instruction if V5 == $67
      ... and 16 more
    Modifies sorted registers V[5]: 22 instructions
      $292: RND  V5, #CF      ; V5 = random() AND $CF
      $2CA: RND  V5, #38      ; V5 = random() AND $38
      $31A: RND  V5, #59      ; V5 = random() AND $59
      ... and 19 more
    Modifies sorted registers V[6]: 18 instructions
      $294: RND  V6, #21      ; V6 = random() AND $21
      $2EC: SUB  V6, V8       ; V6 = (V6 - V8) & 0xFF, VF = NOT borrow
      $3AE: XOR  V6, V2       ; V6 = V6 XOR V2, VF = 0
      ... and 15 more
    Compares sorted registers V[3]: 12 instructions
      $31C: SNE  V3, #7A      ; Skip next instruction if V3 != $7A
      $6A6: SNE  V3, VA       ; Skip next instruction if V3 != VA
      $6B2: SE   V3, #A9      ; Skip next instruction if V3 == $A9
      ... and 9 more
    Modifies sorted registers V[3]: 26 instructions
      $36C: ADD  V3, #70      ; Add $70 to V3 (V3 = (V3 + $70) & 0xFF)
      $37A: LD   V3, #C5      ; Load $C5 into V3
      $3F2: LD   V3, #46      ; Load $46 into V3
      ... and 23 more
    Compares sorted registers V[4]: 10 instructions
      $3A6: SNE  V4, #04      ; Skip next instruction if V4 != $04
      $420: SE   V4, #72      ; Skip next instruction if V4 == $72
      $4BA: SE   V4, #50      ; Skip next instruction if V4 == $50
      ... and 7 more
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $402: XOR  VB, V5       ; VB = VB XOR V5, VF = 0
      $7F2: AND  VF, V5       ; VF = VF AND V5, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $654: XOR  V0, V4       ; V0 = V0 XOR V4, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $7D2: ADD  V1, V2       ; V1 = (V1 + V2) & 0xFF, VF = carry
    Arithmetic on sorted registers V[4]: 2 instructions
      $812: ADD  I, V4        ; I = (I + V4) & 0xFFFF
      $C62: SUBN V1, V4       ; V1 = (V4 - V1) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[6]: 1 instructions
      $95E: SUB  VA, V6       ; VA = (VA - V6) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $A30: OR   VC, V3       ; VC = VC OR V3, VF = 0
    Register transfer involving V[3]: 1 instructions
      $B2E: LD   VA, V3       ; Load V3 into VA
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $B48: AND  VB, V7       ; VB = VB AND V7, VF = 0
    Register transfer involving V[2]: 1 instructions
      $BDE: LD   V8, V2       ; Load V2 into V8
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $E76: LD   [I], VA      ; Store V0-VA at [I], then I += 11
    Compares sorted registers V[2, 7]: 1 instructions
      $E82: SNE  V2, V7       ; Skip next instruction if V2 != V7
    Register transfer involving V[4]: 1 instructions
      $F5A: LD   DT, V4       ; Load V4 into delay timer
    Compares sorted registers V[6, 7]: 1 instructions
      $FEA: SE   V7, V6       ; Skip next instruction if V7 == V6

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 482 (26.9%)
    LD: 223 (12.4%)
    JP: 205 (11.4%)
    NOP: 137 (7.6%)
    DRW: 126 (7.0%)
    SE: 122 (6.8%)
    SNE: 121 (6.8%)
    RND: 116 (6.5%)
    ADD: 109 (6.1%)
    CALL: 106 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 662
  Based on: 246 sorting instructions + 208 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3873D01_V2-V7_L6_DES_C10_040bcbbe.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 115 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 10

CUDA EXECUTION STATISTICS:
  Total register operations: 2
  Register reads: 11
  Register writes: 10
  Register writes per cycle: 1.000

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 29 locations
       Addresses: ['$24E', '$31C', '$34C', '$3A2', '$3B0', '$46A', '$48C', '$504']
       ... and 21 more
  V1: Modified at 28 locations
       Addresses: ['$232', '$354', '$398', '$44A', '$4C2', '$68E', '$698', '$70A']
       ... and 20 more
  V2: Modified at 29 locations
       Addresses: ['$342', '$4D8', '$548', '$5D6', '$626', '$64A', '$66C', '$71E']
       ... and 21 more
  V3: Modified at 24 locations
       Addresses: ['$246', '$336', '$3F4', '$444', '$47E', '$4AE', '$5BC', '$640']
       ... and 16 more
  V4: Modified at 37 locations
       Addresses: ['$22C', '$234', '$26E', '$284', '$41A', '$456', '$48E', '$4A4']
       ... and 29 more
  V5: Modified at 21 locations
       Addresses: ['$292', '$29A', '$29C', '$2B8', '$2EE', '$3E0', '$414', '$440']
       ... and 13 more
  V6: Modified at 31 locations
       Addresses: ['$21A', '$31E', '$384', '$38A', '$3EE', '$402', '$4C8', '$4E6']
       ... and 23 more
  V7: Modified at 27 locations
       Addresses: ['$2C0', '$326', '$3F6', '$45A', '$4FE', '$574', '$62C', '$668']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  221 control transfers detected:
    $20C ‚Üí $CD0
    $218 ‚Üí $07D (LOOP)
    $21E ‚Üí $9D6
    $226 ‚Üí $4D2
    $23E ‚Üí $E1B
    ... and 216 more transfers
  Potential sorting loops: 122 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  255 instructions identified as sorting-related:
    Modifies sorted registers V[6]: 31 instructions
      $21A: ADD  V6, #63      ; Add $63 to V6 (V6 = (V6 + $63) & 0xFF)
      $31E: RND  V6, #04      ; V6 = random() AND $04
      $384: ADD  V6, #B3      ; Add $B3 to V6 (V6 = (V6 + $B3) & 0xFF)
      ... and 28 more
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $224: AND  V8, V4       ; V8 = V8 AND V4, VF = 0
    Modifies sorted registers V[4]: 37 instructions
      $22C: RND  V4, #CA      ; V4 = random() AND $CA
      $234: LD   V4, #73      ; Load $73 into V4
      $26E: ADD  V4, #CA      ; Add $CA to V4 (V4 = (V4 + $CA) & 0xFF)
      ... and 34 more
    Modifies sorted registers V[3]: 24 instructions
      $246: ADD  V3, #98      ; Add $98 to V3 (V3 = (V3 + $98) & 0xFF)
      $336: ADD  V3, #68      ; Add $68 to V3 (V3 = (V3 + $68) & 0xFF)
      $3F4: LD   V3, #32      ; Load $32 into V3
      ... and 21 more
    Compares sorted registers V[2, 3]: 1 instructions
      $268: SNE  V3, V2       ; Skip next instruction if V3 != V2
    Compares sorted registers V[3, 4]: 1 instructions
      $270: SNE  V3, V4       ; Skip next instruction if V3 != V4
    Compares sorted registers V[3]: 16 instructions
      $276: SE   V3, #DC      ; Skip next instruction if V3 == $DC
      $286: SNE  VE, V3       ; Skip next instruction if VE != V3
      $30C: SE   V3, #32      ; Skip next instruction if V3 == $32
      ... and 13 more
    Modifies sorted registers V[5]: 21 instructions
      $292: ADD  V5, #27      ; Add $27 to V5 (V5 = (V5 + $27) & 0xFF)
      $29A: RND  V5, #C6      ; V5 = random() AND $C6
      $29C: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      ... and 18 more
    Compares sorted registers V[5]: 13 instructions
      $2A8: SNE  V5, V9       ; Skip next instruction if V5 != V9
      $466: SNE  V5, #27      ; Skip next instruction if V5 != $27
      $7C0: SE   V5, #26      ; Skip next instruction if V5 == $26
      ... and 10 more
    Compares sorted registers V[2]: 15 instructions
      $2B2: SE   V2, #E0      ; Skip next instruction if V2 == $E0
      $334: SE   V2, #B9      ; Skip next instruction if V2 == $B9
      $3B8: SE   V2, #63      ; Skip next instruction if V2 == $63
      ... and 12 more
    Modifies sorted registers V[7]: 27 instructions
      $2C0: RND  V7, #52      ; V7 = random() AND $52
      $326: LD   V7, #C3      ; Load $C3 into V7
      $3F6: RND  V7, #27      ; V7 = random() AND $27
      ... and 24 more
    Compares sorted registers V[6]: 10 instructions
      $2EA: SNE  V6, #1D      ; Skip next instruction if V6 != $1D
      $506: SE   V6, V6       ; Skip next instruction if V6 == V6
      $63A: SE   V6, #01      ; Skip next instruction if V6 == $01
      ... and 7 more
    Compares sorted registers V[7]: 12 instructions
      $30E: SNE  V7, V1       ; Skip next instruction if V7 != V1
      $3F8: SNE  V7, #1C      ; Skip next instruction if V7 != $1C
      $460: SNE  V7, #22      ; Skip next instruction if V7 != $22
      ... and 9 more
    Modifies sorted registers V[2]: 29 instructions
      $342: SUBN V2, V6       ; V2 = (V6 - V2) & 0xFF, VF = NOT borrow
      $4D8: ADD  V2, #77      ; Add $77 to V2 (V2 = (V2 + $77) & 0xFF)
      $548: LD   V2, #CD      ; Load $CD into V2
      ... and 26 more
    Compares sorted registers V[5, 7]: 1 instructions
      $36A: SNE  V7, V5       ; Skip next instruction if V7 != V5
    Compares sorted registers V[4]: 10 instructions
      $380: SE   V4, #57      ; Skip next instruction if V4 == $57
      $596: SNE  V4, #6E      ; Skip next instruction if V4 != $6E
      $670: SE   V4, #E3      ; Skip next instruction if V4 == $E3
      ... and 7 more
    Arithmetic on sorted registers V[4]: 2 instructions
      $624: SUB  VA, V4       ; VA = (VA - V4) & 0xFF, VF = NOT borrow
      $CAC: SUB  VC, V4       ; VC = (VC - V4) & 0xFF, VF = NOT borrow
    Logical operation on V[6] (sets VF=0 in CUDA): 3 instructions
      $896: XOR  VB, V6       ; VB = VB XOR V6, VF = 0
      $D00: XOR  VA, V6       ; VA = VA XOR V6, VF = 0
      $D20: AND  VF, V6       ; VF = VF AND V6, VF = 0
    Register transfer involving V[7]: 1 instructions
      $EB6: LD   V1, V7       ; Load V7 into V1

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 487 (27.2%)
    JP: 231 (12.9%)
    LD: 229 (12.8%)
    ADD: 141 (7.9%)
    RND: 115 (6.4%)
    CALL: 114 (6.4%)
    NOP: 110 (6.1%)
    SNE: 108 (6.0%)
    SE: 103 (5.7%)
    DRW: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 697
  Based on: 255 sorting instructions + 221 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4057D01_V2-V7_L6_DES_C140_b0592d81.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 7 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 110 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [2, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí2, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 140

CUDA EXECUTION STATISTICS:
  Total register operations: 13
  Register reads: 74
  Register writes: 124
  Register writes per cycle: 0.886

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 29 locations
       Addresses: ['$2EE', '$32A', '$372', '$38A', '$3E0', '$416', '$432', '$4E8']
       ... and 21 more
  V1: Modified at 24 locations
       Addresses: ['$490', '$49A', '$4F6', '$51A', '$54A', '$612', '$7BE', '$7C4']
       ... and 16 more
  V2: Modified at 25 locations
       Addresses: ['$3F8', '$4E2', '$5BA', '$5D6', '$646', '$72E', '$772', '$7A0']
       ... and 17 more
  V3: Modified at 28 locations
       Addresses: ['$220', '$222', '$24C', '$354', '$49C', '$4CA', '$4DC', '$73C']
       ... and 20 more
  V4: Modified at 25 locations
       Addresses: ['$294', '$33A', '$378', '$3B2', '$514', '$54E', '$5CE', '$5DC']
       ... and 17 more
  V5: Modified at 26 locations
       Addresses: ['$2FE', '$40A', '$40C', '$520', '$528', '$54C', '$5CA', '$6DA']
       ... and 18 more
  V6: Modified at 27 locations
       Addresses: ['$250', '$256', '$268', '$2DC', '$3AC', '$4B6', '$56A', '$658']
       ... and 19 more
  V7: Modified at 26 locations
       Addresses: ['$258', '$260', '$31E', '$37A', '$384', '$420', '$448', '$50A']
       ... and 18 more

CONTROL FLOW ANALYSIS:
  234 control transfers detected:
    $204 ‚Üí $17F (LOOP)
    $20A ‚Üí $7D9
    $20C ‚Üí $6FF
    $22C ‚Üí $24C
    $230 ‚Üí $D88
    ... and 229 more transfers
  Potential sorting loops: 133 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  253 instructions identified as sorting-related:
    Compares sorted registers V[5]: 13 instructions
      $21C: SE   V5, #34      ; Skip next instruction if V5 == $34
      $282: SNE  V5, #03      ; Skip next instruction if V5 != $03
      $2D8: SE   V5, #A3      ; Skip next instruction if V5 == $A3
      ... and 10 more
    Modifies sorted registers V[3]: 28 instructions
      $220: SUB  V3, VB       ; V3 = (V3 - VB) & 0xFF, VF = NOT borrow
      $222: ADD  V3, #F2      ; Add $F2 to V3 (V3 = (V3 + $F2) & 0xFF)
      $24C: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      ... and 25 more
    Modifies sorted registers V[6]: 27 instructions
      $250: LD   V6, #4C      ; Load $4C into V6
      $256: RND  V6, #A2      ; V6 = random() AND $A2
      $268: RND  V6, #62      ; V6 = random() AND $62
      ... and 24 more
    Modifies sorted registers V[7]: 26 instructions
      $258: LD   V7, #C6      ; Load $C6 into V7
      $260: LD   V7, #2A      ; Load $2A into V7
      $31E: ADD  V7, #BF      ; Add $BF to V7 (V7 = (V7 + $BF) & 0xFF)
      ... and 23 more
    Compares sorted registers V[6]: 12 instructions
      $25E: SNE  V6, #05      ; Skip next instruction if V6 != $05
      $36E: SNE  V6, #EA      ; Skip next instruction if V6 != $EA
      $5F6: SNE  V6, #F3      ; Skip next instruction if V6 != $F3
      ... and 9 more
    Compares sorted registers V[3]: 14 instructions
      $266: SE   V3, V3       ; Skip next instruction if V3 == V3
      $2AC: SE   V3, #CC      ; Skip next instruction if V3 == $CC
      $2BC: SNE  V3, #66      ; Skip next instruction if V3 != $66
      ... and 11 more
    Modifies sorted registers V[4]: 25 instructions
      $294: LD   V4, #47      ; Load $47 into V4
      $33A: LD   V4, #D4      ; Load $D4 into V4
      $378: SUB  V4, VB       ; V4 = (V4 - VB) & 0xFF, VF = NOT borrow
      ... and 22 more
    Compares sorted registers V[4]: 15 instructions
      $2AA: SNE  V4, #6A      ; Skip next instruction if V4 != $6A
      $39E: SE   V4, #B8      ; Skip next instruction if V4 == $B8
      $3A2: SNE  V4, #F6      ; Skip next instruction if V4 != $F6
      ... and 12 more
    Modifies sorted registers V[5]: 26 instructions
      $2FE: RND  V5, #96      ; V5 = random() AND $96
      $40A: LD   V5, #5E      ; Load $5E into V5
      $40C: RND  V5, #3E      ; V5 = random() AND $3E
      ... and 23 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $36A: ADD  VA, V4       ; VA = (VA + V4) & 0xFF, VF = carry
    Compares sorted registers V[7]: 21 instructions
      $3C8: SNE  V7, #3B      ; Skip next instruction if V7 != $3B
      $3D2: SE   V7, #8B      ; Skip next instruction if V7 == $8B
      $3E2: SE   V7, #01      ; Skip next instruction if V7 == $01
      ... and 18 more
    Modifies sorted registers V[2]: 25 instructions
      $3F8: RND  V2, #28      ; V2 = random() AND $28
      $4E2: RND  V2, #59      ; V2 = random() AND $59
      $5BA: ADD  V2, #DE      ; Add $DE to V2 (V2 = (V2 + $DE) & 0xFF)
      ... and 22 more
    Register transfer involving V[5]: 1 instructions
      $41E: LD   VF, V5       ; Load V5 into VF
    Arithmetic on sorted registers V[7]: 2 instructions
      $54A: SUB  V1, V7       ; V1 = (V1 - V7) & 0xFF, VF = NOT borrow
      $B62: SUB  VC, V7       ; VC = (VC - V7) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2]: 11 instructions
      $5DE: SE   V2, #4B      ; Skip next instruction if V2 == $4B
      $8A8: SNE  V2, #EE      ; Skip next instruction if V2 != $EE
      $A8A: SNE  V2, #50      ; Skip next instruction if V2 != $50
      ... and 8 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $890: SUBN V9, V6       ; V9 = (V6 - V9) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $8DE: OR   V1, V4       ; V1 = V1 OR V4, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $B02: AND  VC, V3       ; VC = VC AND V3, VF = 0
    Arithmetic on sorted registers V[3]: 2 instructions
      $E20: ADD  V1, V3       ; V1 = (V1 + V3) & 0xFF, VF = carry
      $F06: SUBN VB, V3       ; VB = (V3 - VB) & 0xFF, VF = NOT borrow
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $F1A: AND  VC, V6       ; VC = VC AND V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 485 (27.1%)
    JP: 240 (13.4%)
    LD: 226 (12.6%)
    ADD: 128 (7.1%)
    NOP: 119 (6.6%)
    CALL: 117 (6.5%)
    RND: 110 (6.1%)
    SE: 108 (6.0%)
    DRW: 107 (6.0%)
    SNE: 106 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 721
  Based on: 253 sorting instructions + 234 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4759D01_V0-V5_L6_ASC_C50_e19cd024.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [176, 177, 178, 179, 180, 181] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [176, 177, 178, 179, 180, 181] with no initial pattern involvement
    ‚ö†Ô∏è  Suspicious: 15.3% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 110 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [176, 177, 178, 179, 180, 181]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V0-V5
  Start position: V0
  End position: V5
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [176, 177, 178, 179, 180, 181, 162, 137]
  Changes: V0: 8‚Üí176, V1: 3‚Üí177, V2: 6‚Üí178, V3: 1‚Üí179, V4: 7‚Üí180, V5: 2‚Üí181, V6: 5‚Üí162, V7: 4‚Üí137
  ‚úì Correct initial test pattern detected
  Achievement cycle: 50

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 22
  Register writes: 61
  Register writes per cycle: 1.220

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$250', '$266', '$2FE', '$490', '$496', '$4F4', '$51A', '$530']
       ... and 22 more
  V1: Modified at 30 locations
       Addresses: ['$266', '$392', '$3C8', '$42A', '$45C', '$4FE', '$546', '$5C6']
       ... and 22 more
  V2: Modified at 33 locations
       Addresses: ['$266', '$2D0', '$3A2', '$50C', '$526', '$5A8', '$5E4', '$68C']
       ... and 25 more
  V3: Modified at 25 locations
       Addresses: ['$266', '$3A0', '$3E0', '$454', '$542', '$5A4', '$5BC', '$5F6']
       ... and 17 more
  V4: Modified at 25 locations
       Addresses: ['$20A', '$252', '$266', '$2E8', '$302', '$308', '$358', '$5C8']
       ... and 17 more
  V5: Modified at 36 locations
       Addresses: ['$24E', '$262', '$266', '$278', '$31C', '$370', '$3B2', '$494']
       ... and 28 more
  V6: Modified at 22 locations
       Addresses: ['$266', '$2A6', '$336', '$36A', '$3B0', '$43C', '$4E8', '$612']
       ... and 14 more
  V7: Modified at 32 locations
       Addresses: ['$266', '$284', '$346', '$34A', '$390', '$3C6', '$4D8', '$508']
       ... and 24 more

CONTROL FLOW ANALYSIS:
  231 control transfers detected:
    $200 ‚Üí $80A
    $208 ‚Üí $1D4 (LOOP)
    $210 ‚Üí $3CF
    $248 ‚Üí $2CF
    $268 ‚Üí $4DC
    ... and 226 more transfers
  Potential sorting loops: 127 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  274 instructions identified as sorting-related:
    Modifies sorted registers V[4]: 24 instructions
      $20A: ADD  V4, #C5      ; Add $C5 to V4 (V4 = (V4 + $C5) & 0xFF)
      $252: LD   V4, #70      ; Load $70 into V4
      $2E8: LD   V4, #1D      ; Load $1D into V4
      ... and 21 more
    Compares sorted registers V[1]: 17 instructions
      $20E: SE   V1, #1D      ; Skip next instruction if V1 == $1D
      $212: SE   V1, #E6      ; Skip next instruction if V1 == $E6
      $49E: SNE  V1, VE       ; Skip next instruction if V1 != VE
      ... and 14 more
    Compares sorted registers V[2]: 22 instructions
      $21E: SNE  V2, #0C      ; Skip next instruction if V2 != $0C
      $30C: SE   V2, #9A      ; Skip next instruction if V2 == $9A
      $46C: SE   V2, #94      ; Skip next instruction if V2 == $94
      ... and 19 more
    Compares sorted registers V[3]: 13 instructions
      $228: SNE  V3, #52      ; Skip next instruction if V3 != $52
      $298: SNE  V3, #9B      ; Skip next instruction if V3 != $9B
      $2B6: SE   VE, V3       ; Skip next instruction if VE == V3
      ... and 10 more
    Modifies sorted registers V[5]: 35 instructions
      $24E: LD   V5, #C1      ; Load $C1 into V5
      $262: XOR  V5, VF       ; V5 = V5 XOR VF, VF = 0
      $278: LD   V5, #FC      ; Load $FC into V5
      ... and 32 more
    Modifies sorted registers V[0]: 28 instructions
      $250: LD   V0, #94      ; Load $94 into V0
      $2FE: LD   V0, #74      ; Load $74 into V0
      $490: LD   V0, #4D      ; Load $4D into V0
      ... and 25 more
    Modifies sorted registers V[0, 1, 2, 3, 4, 5]: 1 instructions
      $266: LD   V9, [I]      ; Load V0-V9 from [I], then I += 10
    Compares sorted registers V[5]: 20 instructions
      $296: SE   VA, V5       ; Skip next instruction if VA == V5
      $3CE: SNE  V5, #47      ; Skip next instruction if V5 != $47
      $3DC: SNE  V5, VB       ; Skip next instruction if V5 != VB
      ... and 17 more
    Compares sorted registers V[0]: 11 instructions
      $2C8: SNE  V0, #DF      ; Skip next instruction if V0 != $DF
      $37C: SE   V0, #FE      ; Skip next instruction if V0 == $FE
      $3A4: SNE  V0, #D2      ; Skip next instruction if V0 != $D2
      ... and 8 more
    Modifies sorted registers V[2]: 31 instructions
      $2D0: LD   V2, #4C      ; Load $4C into V2
      $3A2: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB
      $50C: RND  V2, #B9      ; V2 = random() AND $B9
      ... and 28 more
    Compares sorted registers V[4]: 10 instructions
      $2D4: SE   V4, #90      ; Skip next instruction if V4 == $90
      $2EE: SNE  V4, #87      ; Skip next instruction if V4 != $87
      $314: SNE  V4, #5B      ; Skip next instruction if V4 != $5B
      ... and 7 more
    Compares sorted registers V[4, 5]: 1 instructions
      $32A: SE   V5, V4       ; Skip next instruction if V5 == V4
    Arithmetic on sorted registers V[1]: 1 instructions
      $340: SUB  VD, V1       ; VD = (VD - V1) & 0xFF, VF = NOT borrow
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $372: AND  VE, V5       ; VE = VE AND V5, VF = 0
      $B70: AND  VF, V5       ; VF = VF AND V5, VF = 0
    Modifies sorted registers V[1]: 28 instructions
      $392: ADD  V1, #01      ; Add $01 to V1 (V1 = (V1 + $01) & 0xFF)
      $3C8: OR   V1, V1       ; V1 = V1 OR V1, VF = 0
      $42A: RND  V1, #64      ; V1 = random() AND $64
      ... and 25 more
    Modifies sorted registers V[3]: 23 instructions
      $3A0: RND  V3, #B9      ; V3 = random() AND $B9
      $3E0: ADD  V3, #6F      ; Add $6F to V3 (V3 = (V3 + $6F) & 0xFF)
      $454: ADD  V3, #A0      ; Add $A0 to V3 (V3 = (V3 + $A0) & 0xFF)
      ... and 20 more
    Arithmetic on sorted registers V[2]: 1 instructions
      $4D6: ADD  VE, V2       ; VE = (VE + V2) & 0xFF, VF = carry
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $5AC: OR   V9, V1       ; V9 = V9 OR V1, VF = 0
    Modifies sorted registers V[0, 1, 2, 3]: 1 instructions
      $854: LD   V3, [I]      ; Load V0-V3 from [I], then I += 4
    Arithmetic on sorted registers V[5]: 1 instructions
      $A10: SUB  VC, V5       ; VC = (VC - V5) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 1 instructions
      $CA8: ADD  VB, V3       ; VB = (VB + V3) & 0xFF, VF = carry
    Arithmetic on sorted registers V[0]: 1 instructions
      $DFA: SUB  V7, V0       ; V7 = (V7 - V0) & 0xFF, VF = NOT borrow
    Register transfer involving V[2]: 1 instructions
      $F1E: LD   DT, V2       ; Load V2 into delay timer

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 477 (26.6%)
    LD: 234 (13.1%)
    JP: 223 (12.4%)
    SE: 129 (7.2%)
    SNE: 122 (6.8%)
    CALL: 120 (6.7%)
    ADD: 118 (6.6%)
    DRW: 112 (6.2%)
    RND: 110 (6.1%)
    NOP: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 736
  Based on: 274 sorting instructions + 231 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4775D01_V1-V6_L6_ASC_C20_09d2626d.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Perfect consecutive sequence [0, 1, 2, 3, 4, 5] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 114 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [0, 1, 2, 3, 4, 5]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [0, 0, 1, 2, 3, 4, 5, 4]
  Changes: V0: 8‚Üí0, V1: 3‚Üí0, V2: 6‚Üí1, V3: 1‚Üí2, V4: 7‚Üí3, V5: 2‚Üí4
  ‚úì Correct initial test pattern detected
  Achievement cycle: 20

CUDA EXECUTION STATISTICS:
  Total register operations: 0
  Register reads: 5
  Register writes: 13
  Register writes per cycle: 0.650

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 34 locations
       Addresses: ['$264', '$282', '$29A', '$40E', '$47A', '$4A6', '$4BA', '$53A']
       ... and 26 more
  V1: Modified at 17 locations
       Addresses: ['$3DC', '$42C', '$440', '$4BA', '$564', '$5CC', '$5DA', '$5F2']
       ... and 9 more
  V2: Modified at 22 locations
       Addresses: ['$296', '$2A6', '$2B4', '$3EE', '$4BA', '$4D0', '$5BA', '$5F2']
       ... and 14 more
  V3: Modified at 33 locations
       Addresses: ['$27C', '$294', '$312', '$47C', '$4A2', '$4BA', '$4F8', '$4FC']
       ... and 25 more
  V4: Modified at 22 locations
       Addresses: ['$26C', '$27A', '$320', '$372', '$38C', '$3E0', '$43A', '$4BA']
       ... and 14 more
  V5: Modified at 24 locations
       Addresses: ['$366', '$3D8', '$3DE', '$4BA', '$594', '$5F2', '$678', '$698']
       ... and 16 more
  V6: Modified at 30 locations
       Addresses: ['$22A', '$25C', '$30A', '$38E', '$410', '$460', '$4BA', '$5E8']
       ... and 22 more
  V7: Modified at 22 locations
       Addresses: ['$236', '$23A', '$266', '$2BE', '$30C', '$446', '$4BA', '$528']
       ... and 14 more

CONTROL FLOW ANALYSIS:
  210 control transfers detected:
    $224 ‚Üí $964
    $230 ‚Üí $A90
    $244 ‚Üí $D89
    $25A ‚Üí $980
    $25E ‚Üí $6BB
    ... and 205 more transfers
  Potential sorting loops: 117 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  244 instructions identified as sorting-related:
    Compares sorted registers V[4]: 22 instructions
      $216: SNE  V4, #B9      ; Skip next instruction if V4 != $B9
      $226: SE   V4, #ED      ; Skip next instruction if V4 == $ED
      $338: SE   V4, #97      ; Skip next instruction if V4 == $97
      ... and 19 more
    Modifies sorted registers V[6]: 28 instructions
      $22A: RND  V6, #2F      ; V6 = random() AND $2F
      $25C: LD   V6, #A1      ; Load $A1 into V6
      $30A: ADD  V6, V6       ; V6 = (V6 + V6) & 0xFF, VF = carry
      ... and 25 more
    Compares sorted registers V[2]: 23 instructions
      $23C: SNE  V2, #64      ; Skip next instruction if V2 != $64
      $462: SNE  V2, #5D      ; Skip next instruction if V2 != $5D
      $490: SE   V2, #50      ; Skip next instruction if V2 == $50
      ... and 20 more
    Modifies sorted registers V[4]: 20 instructions
      $26C: ADD  V4, #BF      ; Add $BF to V4 (V4 = (V4 + $BF) & 0xFF)
      $27A: ADD  V4, #C2      ; Add $C2 to V4 (V4 = (V4 + $C2) & 0xFF)
      $320: LD   V4, #40      ; Load $40 into V4
      ... and 17 more
    Compares sorted registers V[6]: 10 instructions
      $26E: SE   V6, #1F      ; Skip next instruction if V6 == $1F
      $532: SNE  V6, #AD      ; Skip next instruction if V6 != $AD
      $748: SE   V6, #1C      ; Skip next instruction if V6 == $1C
      ... and 7 more
    Modifies sorted registers V[3]: 31 instructions
      $27C: ADD  V3, #89      ; Add $89 to V3 (V3 = (V3 + $89) & 0xFF)
      $294: RND  V3, #D7      ; V3 = random() AND $D7
      $312: ADD  V3, #C2      ; Add $C2 to V3 (V3 = (V3 + $C2) & 0xFF)
      ... and 28 more
    Compares sorted registers V[5]: 10 instructions
      $284: SE   V5, #BB      ; Skip next instruction if V5 == $BB
      $292: SE   V5, #9F      ; Skip next instruction if V5 == $9F
      $616: SNE  V5, #84      ; Skip next instruction if V5 != $84
      ... and 7 more
    Modifies sorted registers V[2]: 20 instructions
      $296: ADD  V2, #B9      ; Add $B9 to V2 (V2 = (V2 + $B9) & 0xFF)
      $2A6: RND  V2, #21      ; V2 = random() AND $21
      $2B4: LD   V2, #61      ; Load $61 into V2
      ... and 17 more
    Compares sorted registers V[3]: 17 instructions
      $2E2: SE   V3, #C4      ; Skip next instruction if V3 == $C4
      $37C: SE   V3, #13      ; Skip next instruction if V3 == $13
      $3FA: SE   V3, #A2      ; Skip next instruction if V3 == $A2
      ... and 14 more
    Arithmetic on sorted registers V[5]: 4 instructions
      $300: SUBN V9, V5       ; V9 = (V5 - V9) & 0xFF, VF = NOT borrow
      $54C: ADD  VB, V5       ; VB = (VB + V5) & 0xFF, VF = carry
      $88C: ADD  VB, V5       ; VB = (VB + V5) & 0xFF, VF = carry
      ... and 1 more
    Modifies sorted registers V[5]: 22 instructions
      $366: ADD  V5, #16      ; Add $16 to V5 (V5 = (V5 + $16) & 0xFF)
      $3D8: LD   V5, #88      ; Load $88 into V5
      $3DE: LD   V5, #99      ; Load $99 into V5
      ... and 19 more
    Modifies sorted registers V[1]: 15 instructions
      $3DC: SHL  V1           ; V1 = (V1 << 1) & 0xFF, VF = MSB
      $42C: RND  V1, #50      ; V1 = random() AND $50
      $440: SUBN V1, V5       ; V1 = (V5 - V1) & 0xFF, VF = NOT borrow
      ... and 12 more
    Compares sorted registers V[1]: 14 instructions
      $41A: SNE  V1, #8C      ; Skip next instruction if V1 != $8C
      $4AE: SNE  V1, #8F      ; Skip next instruction if V1 != $8F
      $4EE: SE   V1, #CA      ; Skip next instruction if V1 == $CA
      ... and 11 more
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 2 instructions
      $4BA: LD   V9, [I]      ; Load V0-V9 from [I], then I += 10
      $5F2: LD   V6, [I]      ; Load V0-V6 from [I], then I += 7
    Arithmetic on sorted registers V[1]: 1 instructions
      $4DC: ADD  VC, V1       ; VC = (VC + V1) & 0xFF, VF = carry
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $56A: AND  V8, V5       ; V8 = V8 AND V5, VF = 0
    Arithmetic on sorted registers V[3]: 2 instructions
      $7EE: ADD  V0, V3       ; V0 = (V0 + V3) & 0xFF, VF = carry
      $CFE: SUB  VD, V3       ; VD = (VD - V3) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $848: OR   VF, V3       ; VF = VF OR V3, VF = 0
    Compares sorted registers V[4, 6]: 1 instructions
      $F5C: SNE  V4, V6       ; Skip next instruction if V4 != V6

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 486 (27.1%)
    JP: 230 (12.8%)
    LD: 203 (11.3%)
    ADD: 131 (7.3%)
    NOP: 129 (7.2%)
    SNE: 126 (7.0%)
    SE: 119 (6.6%)
    RND: 114 (6.4%)
    DRW: 113 (6.3%)
    CALL: 97 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 664
  Based on: 244 sorting instructions + 210 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B0556D01_V2-V7_L6_DES_C228_2fedb08e.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 111 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [250, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí250, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 228

CUDA EXECUTION STATISTICS:
  Total register operations: 7
  Register reads: 50
  Register writes: 69
  Register writes per cycle: 0.303

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 18 locations
       Addresses: ['$544', '$5AC', '$5BE', '$6A4', '$720', '$76C', '$7CA', '$802']
       ... and 10 more
  V1: Modified at 24 locations
       Addresses: ['$234', '$242', '$2E4', '$3B4', '$3D4', '$3D6', '$422', '$544']
       ... and 16 more
  V2: Modified at 22 locations
       Addresses: ['$266', '$27C', '$2FC', '$37A', '$45E', '$48A', '$544', '$610']
       ... and 14 more
  V3: Modified at 26 locations
       Addresses: ['$284', '$332', '$37C', '$3CC', '$41E', '$528', '$544', '$6A6']
       ... and 18 more
  V4: Modified at 24 locations
       Addresses: ['$2DA', '$432', '$476', '$4CC', '$544', '$636', '$642', '$6FA']
       ... and 16 more
  V5: Modified at 27 locations
       Addresses: ['$23E', '$28C', '$2FA', '$38A', '$460', '$544', '$56E', '$61C']
       ... and 19 more
  V6: Modified at 31 locations
       Addresses: ['$21E', '$220', '$25A', '$296', '$384', '$4A0', '$4C4', '$4F0']
       ... and 23 more
  V7: Modified at 32 locations
       Addresses: ['$218', '$230', '$28A', '$2A2', '$360', '$376', '$53E', '$544']
       ... and 24 more

CONTROL FLOW ANALYSIS:
  198 control transfers detected:
    $206 ‚Üí $DEF
    $216 ‚Üí $60E
    $226 ‚Üí $F87
    $22C ‚Üí $51F
    $250 ‚Üí $04B (LOOP)
    ... and 193 more transfers
  Potential sorting loops: 112 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  261 instructions identified as sorting-related:
    Modifies sorted registers V[7]: 31 instructions
      $218: LD   V7, #7A      ; Load $7A into V7
      $230: RND  V7, #ED      ; V7 = random() AND $ED
      $28A: RND  V7, #BC      ; V7 = random() AND $BC
      ... and 28 more
    Modifies sorted registers V[6]: 30 instructions
      $21E: RND  V6, #89      ; V6 = random() AND $89
      $220: LD   V6, #76      ; Load $76 into V6
      $25A: ADD  V6, #6D      ; Add $6D to V6 (V6 = (V6 + $6D) & 0xFF)
      ... and 27 more
    Modifies sorted registers V[5]: 26 instructions
      $23E: LD   V5, #FB      ; Load $FB into V5
      $28C: LD   V5, #71      ; Load $71 into V5
      $2FA: ADD  V5, #E4      ; Add $E4 to V5 (V5 = (V5 + $E4) & 0xFF)
      ... and 23 more
    Modifies sorted registers V[2]: 21 instructions
      $266: RND  V2, #A4      ; V2 = random() AND $A4
      $27C: RND  V2, #4F      ; V2 = random() AND $4F
      $2FC: ADD  V2, #11      ; Add $11 to V2 (V2 = (V2 + $11) & 0xFF)
      ... and 18 more
    Modifies sorted registers V[3]: 25 instructions
      $284: ADD  V3, #6C      ; Add $6C to V3 (V3 = (V3 + $6C) & 0xFF)
      $332: LD   V3, #9C      ; Load $9C into V3
      $37C: RND  V3, #95      ; V3 = random() AND $95
      ... and 22 more
    Compares sorted registers V[7]: 19 instructions
      $29A: SNE  V7, #78      ; Skip next instruction if V7 != $78
      $312: SE   V7, #50      ; Skip next instruction if V7 == $50
      $430: SE   V7, #16      ; Skip next instruction if V7 == $16
      ... and 16 more
    Arithmetic on sorted registers V[5]: 1 instructions
      $2A6: ADD  VD, V5       ; VD = (VD + V5) & 0xFF, VF = carry
    Compares sorted registers V[6]: 21 instructions
      $2C4: SE   V6, #9A      ; Skip next instruction if V6 == $9A
      $338: SE   V6, #7E      ; Skip next instruction if V6 == $7E
      $4D8: SNE  V6, #F0      ; Skip next instruction if V6 != $F0
      ... and 18 more
    Arithmetic on sorted registers V[3]: 2 instructions
      $2CC: SUB  VE, V3       ; VE = (VE - V3) & 0xFF, VF = NOT borrow
      $DF4: SUB  VA, V3       ; VA = (VA - V3) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[4]: 23 instructions
      $2DA: RND  V4, #D3      ; V4 = random() AND $D3
      $432: ADD  V4, #FD      ; Add $FD to V4 (V4 = (V4 + $FD) & 0xFF)
      $476: ADD  V4, #BD      ; Add $BD to V4 (V4 = (V4 + $BD) & 0xFF)
      ... and 20 more
    Compares sorted registers V[2]: 15 instructions
      $304: SE   V2, #DC      ; Skip next instruction if V2 == $DC
      $47E: SE   V2, #43      ; Skip next instruction if V2 == $43
      $5A8: SE   V2, #BE      ; Skip next instruction if V2 == $BE
      ... and 12 more
    Compares sorted registers V[5]: 11 instructions
      $3B8: SE   V5, #41      ; Skip next instruction if V5 == $41
      $412: SNE  V5, #C8      ; Skip next instruction if V5 != $C8
      $416: SNE  VD, V5       ; Skip next instruction if VD != V5
      ... and 8 more
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $3E6: OR   VC, V3       ; VC = VC OR V3, VF = 0
    Compares sorted registers V[3]: 9 instructions
      $484: SE   VC, V3       ; Skip next instruction if VC == V3
      $606: SNE  V3, #06      ; Skip next instruction if V3 != $06
      $7F2: SNE  V3, #A1      ; Skip next instruction if V3 != $A1
      ... and 6 more
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $544: LD   V7, [I]      ; Load V0-V7 from [I], then I += 8
    Arithmetic on sorted registers V[2]: 3 instructions
      $588: ADD  VD, V2       ; VD = (VD + V2) & 0xFF, VF = carry
      $79A: SUB  VC, V2       ; VC = (VC - V2) & 0xFF, VF = NOT borrow
      $9BC: SUBN V9, V2       ; V9 = (V2 - V9) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4]: 10 instructions
      $5D2: SNE  V4, #09      ; Skip next instruction if V4 != $09
      $6D0: SE   V4, #F7      ; Skip next instruction if V4 == $F7
      $846: SE   V4, #DC      ; Skip next instruction if V4 == $DC
      ... and 7 more
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $5DC: AND  V8, V4       ; V8 = V8 AND V4, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $72A: SUBN VD, V6       ; VD = (V6 - VD) & 0xFF, VF = NOT borrow
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $786: LD   [I], VE      ; Store V0-VE at [I], then I += 15
    Compares sorted registers V[3, 6]: 1 instructions
      $7F4: SE   V3, V6       ; Skip next instruction if V3 == V6
    Compares sorted registers V[2, 4]: 2 instructions
      $86A: SE   V2, V4       ; Skip next instruction if V2 == V4
      $B78: SE   V2, V4       ; Skip next instruction if V2 == V4
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $966: OR   VD, V5       ; VD = VD OR V5, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $B58: SUB  VC, V4       ; VC = (VC - V4) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[7]: 1 instructions
      $C94: ADD  V1, V7       ; V1 = (V1 + V7) & 0xFF, VF = carry
    Register transfer involving V[5]: 1 instructions
      $CAE: LD   ST, V5       ; Load V5 into sound timer
    Register transfer involving V[6]: 1 instructions
      $DD0: LD   VA, V6       ; Load V6 into VA
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $EA4: AND  V8, V6       ; V8 = V8 AND V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 475 (26.5%)
    LD: 248 (13.8%)
    JP: 208 (11.6%)
    SE: 131 (7.3%)
    DRW: 120 (6.7%)
    ADD: 116 (6.5%)
    NOP: 114 (6.4%)
    SNE: 113 (6.3%)
    RND: 111 (6.2%)
    CALL: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 657
  Based on: 261 sorting instructions + 198 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1552D01_V1-V6_L6_ASC_C54_c3d5ee08.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Perfect consecutive sequence [0, 1, 2, 3, 4, 5] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 105 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [0, 1, 2, 3, 4, 5]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [0, 0, 1, 2, 3, 4, 5, 4]
  Changes: V0: 8‚Üí0, V1: 3‚Üí0, V2: 6‚Üí1, V3: 1‚Üí2, V4: 7‚Üí3, V5: 2‚Üí4
  ‚úì Correct initial test pattern detected
  Achievement cycle: 54

CUDA EXECUTION STATISTICS:
  Total register operations: 0
  Register reads: 9
  Register writes: 15
  Register writes per cycle: 0.278

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 21 locations
       Addresses: ['$276', '$302', '$344', '$362', '$39E', '$3FE', '$430', '$576']
       ... and 13 more
  V1: Modified at 25 locations
       Addresses: ['$320', '$338', '$3AA', '$3D0', '$3F8', '$482', '$572', '$5EC']
       ... and 17 more
  V2: Modified at 30 locations
       Addresses: ['$200', '$2FE', '$34A', '$374', '$3F0', '$494', '$64A', '$6AE']
       ... and 22 more
  V3: Modified at 25 locations
       Addresses: ['$206', '$4A2', '$52C', '$64C', '$6AC', '$6EE', '$756', '$770']
       ... and 17 more
  V4: Modified at 20 locations
       Addresses: ['$2B4', '$37C', '$3DA', '$4F8', '$5BC', '$5C6', '$5D0', '$6DE']
       ... and 12 more
  V5: Modified at 26 locations
       Addresses: ['$288', '$2F8', '$528', '$534', '$65C', '$6CA', '$6F8', '$6FA']
       ... and 18 more
  V6: Modified at 25 locations
       Addresses: ['$322', '$332', '$3EA', '$4D8', '$538', '$54C', '$6A2', '$6AA']
       ... and 17 more
  V7: Modified at 31 locations
       Addresses: ['$250', '$27E', '$2C6', '$300', '$394', '$52E', '$5B8', '$5E4']
       ... and 23 more

CONTROL FLOW ANALYSIS:
  229 control transfers detected:
    $202 ‚Üí $567
    $22A ‚Üí $4B3
    $22C ‚Üí $6F6
    $23A ‚Üí $5A7
    $24A ‚Üí $12B (LOOP)
    ... and 224 more transfers
  Potential sorting loops: 130 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  251 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 29 instructions
      $200: LD   V2, #CB      ; Load $CB into V2
      $2FE: LD   V2, #CD      ; Load $CD into V2
      $34A: LD   V2, #E5      ; Load $E5 into V2
      ... and 26 more
    Modifies sorted registers V[3]: 24 instructions
      $206: AND  V3, V4       ; V3 = V3 AND V4, VF = 0
      $4A2: RND  V3, #76      ; V3 = random() AND $76
      $52C: ADD  V3, #91      ; Add $91 to V3 (V3 = (V3 + $91) & 0xFF)
      ... and 21 more
    Compares sorted registers V[2]: 8 instructions
      $208: SNE  V2, #90      ; Skip next instruction if V2 != $90
      $2E6: SNE  VB, V2       ; Skip next instruction if VB != V2
      $38A: SNE  V2, #23      ; Skip next instruction if V2 != $23
      ... and 5 more
    Compares sorted registers V[4]: 16 instructions
      $246: SNE  V4, #06      ; Skip next instruction if V4 != $06
      $25A: SNE  V4, #1F      ; Skip next instruction if V4 != $1F
      $404: SNE  V4, #7E      ; Skip next instruction if V4 != $7E
      ... and 13 more
    Compares sorted registers V[3]: 20 instructions
      $268: SE   V3, #64      ; Skip next instruction if V3 == $64
      $364: SE   V3, #9F      ; Skip next instruction if V3 == $9F
      $3B8: SNE  V3, #AE      ; Skip next instruction if V3 != $AE
      ... and 17 more
    Modifies sorted registers V[5]: 25 instructions
      $288: RND  V5, #59      ; V5 = random() AND $59
      $2F8: LD   V5, #A2      ; Load $A2 into V5
      $528: ADD  V5, #99      ; Add $99 to V5 (V5 = (V5 + $99) & 0xFF)
      ... and 22 more
    Compares sorted registers V[6]: 18 instructions
      $290: SNE  V6, #9E      ; Skip next instruction if V6 != $9E
      $35E: SE   V6, #1C      ; Skip next instruction if V6 == $1C
      $40A: SE   V6, #CB      ; Skip next instruction if V6 == $CB
      ... and 15 more
    Modifies sorted registers V[4]: 19 instructions
      $2B4: ADD  V4, #8A      ; Add $8A to V4 (V4 = (V4 + $8A) & 0xFF)
      $37C: LD   V4, VD       ; Load VD into V4
      $3DA: ADD  V4, #CC      ; Add $CC to V4 (V4 = (V4 + $CC) & 0xFF)
      ... and 16 more
    Compares sorted registers V[1]: 18 instructions
      $30E: SE   V1, #43      ; Skip next instruction if V1 == $43
      $43C: SNE  V1, #E9      ; Skip next instruction if V1 != $E9
      $48A: SE   V1, #ED      ; Skip next instruction if V1 == $ED
      ... and 15 more
    Modifies sorted registers V[1]: 24 instructions
      $320: LD   V1, #A5      ; Load $A5 into V1
      $338: LD   V1, #C1      ; Load $C1 into V1
      $3AA: AND  V1, VD       ; V1 = V1 AND VD, VF = 0
      ... and 21 more
    Modifies sorted registers V[6]: 24 instructions
      $322: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      $332: ADD  V6, #17      ; Add $17 to V6 (V6 = (V6 + $17) & 0xFF)
      $3EA: RND  V6, #28      ; V6 = random() AND $28
      ... and 21 more
    Arithmetic on sorted registers V[3]: 1 instructions
      $430: ADD  V0, V3       ; V0 = (V0 + V3) & 0xFF, VF = carry
    Compares sorted registers V[5]: 15 instructions
      $442: SE   V5, #1A      ; Skip next instruction if V5 == $1A
      $478: SNE  V5, #2A      ; Skip next instruction if V5 != $2A
      $498: SNE  V5, #1A      ; Skip next instruction if V5 != $1A
      ... and 12 more
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $4C0: XOR  VB, V5       ; VB = VB XOR V5, VF = 0
      $CD0: AND  VB, V5       ; VB = VB AND V5, VF = 0
    Register transfer involving V[2]: 1 instructions
      $634: LD   B, V2        ; Store BCD of V2 at [I], [I+1], [I+2]
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $8C8: OR   V8, V6       ; V8 = V8 OR V6, VF = 0
    Register transfer involving V[3]: 1 instructions
      $A42: LD   V0, V3       ; Load V3 into V0
    Register transfer involving V[4]: 1 instructions
      $C6A: LD   VF, V4       ; Load V4 into VF
    Compares sorted registers V[4, 5]: 1 instructions
      $C90: SE   V4, V5       ; Skip next instruction if V4 == V5
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 1 instructions
      $CDE: LD   V6, [I]      ; Load V0-V6 from [I], then I += 7
    Arithmetic on sorted registers V[5]: 1 instructions
      $E80: SUB  VD, V5       ; VD = (VD - V5) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $FE8: XOR  V7, V4       ; V7 = V7 XOR V4, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 478 (26.7%)
    LD: 230 (12.8%)
    JP: 216 (12.1%)
    SNE: 137 (7.6%)
    DRW: 123 (6.9%)
    ADD: 118 (6.6%)
    NOP: 116 (6.5%)
    SE: 114 (6.4%)
    CALL: 110 (6.1%)
    RND: 105 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 709
  Based on: 251 sorting instructions + 229 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1622D01_V2-V7_L6_DES_C12_9e4bab54.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 16.9% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 124 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 12

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 4
  Register writes: 7
  Register writes per cycle: 0.583

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 28 locations
       Addresses: ['$27A', '$288', '$2A6', '$328', '$3FE', '$4D4', '$53A', '$5C0']
       ... and 20 more
  V1: Modified at 23 locations
       Addresses: ['$288', '$2B0', '$2BC', '$2E0', '$390', '$420', '$450', '$4CA']
       ... and 15 more
  V2: Modified at 40 locations
       Addresses: ['$214', '$22C', '$260', '$288', '$388', '$3D8', '$3FC', '$4A6']
       ... and 32 more
  V3: Modified at 23 locations
       Addresses: ['$288', '$3C2', '$3CA', '$552', '$632', '$6E2', '$78A', '$7CA']
       ... and 15 more
  V4: Modified at 28 locations
       Addresses: ['$264', '$288', '$3F6', '$45C', '$49E', '$4A2', '$4E8', '$558']
       ... and 20 more
  V5: Modified at 37 locations
       Addresses: ['$258', '$288', '$320', '$34A', '$36C', '$386', '$3B4', '$3E8']
       ... and 29 more
  V6: Modified at 31 locations
       Addresses: ['$24A', '$288', '$2FC', '$308', '$380', '$3A2', '$45E', '$550']
       ... and 23 more
  V7: Modified at 37 locations
       Addresses: ['$29A', '$2C6', '$2E2', '$42E', '$46E', '$474', '$4E4', '$502']
       ... and 29 more

CONTROL FLOW ANALYSIS:
  230 control transfers detected:
    $206 ‚Üí $63B
    $216 ‚Üí $F23
    $228 ‚Üí $57F
    $232 ‚Üí $9B1
    $240 ‚Üí $8DC
    ... and 225 more transfers
  Potential sorting loops: 130 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  302 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 38 instructions
      $214: RND  V2, #6D      ; V2 = random() AND $6D
      $22C: RND  V2, #62      ; V2 = random() AND $62
      $260: LD   V2, V5       ; Load V5 into V2
      ... and 35 more
    Compares sorted registers V[4]: 18 instructions
      $226: SE   V4, #7C      ; Skip next instruction if V4 == $7C
      $300: SE   V4, #B5      ; Skip next instruction if V4 == $B5
      $5A6: SE   V4, #0A      ; Skip next instruction if V4 == $0A
      ... and 15 more
    Compares sorted registers V[3]: 13 instructions
      $230: SE   V3, V9       ; Skip next instruction if V3 == V9
      $414: SNE  V3, #42      ; Skip next instruction if V3 != $42
      $4D0: SNE  V3, #71      ; Skip next instruction if V3 != $71
      ... and 10 more
    Compares sorted registers V[7]: 16 instructions
      $238: SNE  V7, #F7      ; Skip next instruction if V7 != $F7
      $53E: SNE  V7, #02      ; Skip next instruction if V7 != $02
      $644: SE   V7, #AE      ; Skip next instruction if V7 == $AE
      ... and 13 more
    Modifies sorted registers V[6]: 30 instructions
      $24A: LD   V6, #16      ; Load $16 into V6
      $2FC: LD   V6, #DF      ; Load $DF into V6
      $308: SUB  V6, V6       ; V6 = (V6 - V6) & 0xFF, VF = NOT borrow
      ... and 27 more
    Modifies sorted registers V[5]: 36 instructions
      $258: XOR  V5, V2       ; V5 = V5 XOR V2, VF = 0
      $320: RND  V5, #A7      ; V5 = random() AND $A7
      $34A: ADD  V5, #0C      ; Add $0C to V5 (V5 = (V5 + $0C) & 0xFF)
      ... and 33 more
    Modifies sorted registers V[4]: 26 instructions
      $264: RND  V4, #6A      ; V4 = random() AND $6A
      $3F6: XOR  V4, V6       ; V4 = V4 XOR V6, VF = 0
      $45C: RND  V4, #E6      ; V4 = random() AND $E6
      ... and 23 more
    Modifies sorted registers V[2, 3, 4, 5, 6]: 1 instructions
      $288: LD   V6, [I]      ; Load V0-V6 from [I], then I += 7
    Compares sorted registers V[5]: 17 instructions
      $28C: SE   V5, #F5      ; Skip next instruction if V5 == $F5
      $31E: SNE  V5, #A1      ; Skip next instruction if V5 != $A1
      $368: SNE  V5, #1F      ; Skip next instruction if V5 != $1F
      ... and 14 more
    Logical operation on V[2] (sets VF=0 in CUDA): 2 instructions
      $294: XOR  VE, V2       ; VE = VE XOR V2, VF = 0
      $958: XOR  VD, V2       ; VD = VD XOR V2, VF = 0
    Modifies sorted registers V[7]: 37 instructions
      $29A: SUBN V7, VB       ; V7 = (VB - V7) & 0xFF, VF = NOT borrow
      $2C6: LD   V7, #11      ; Load $11 into V7
      $2E2: ADD  V7, VD       ; V7 = (V7 + VD) & 0xFF, VF = carry
      ... and 34 more
    Register transfer involving V[5]: 1 instructions
      $2BC: LD   V1, V5       ; Load V5 into V1
    Compares sorted registers V[2]: 18 instructions
      $318: SE   V2, #0D      ; Skip next instruction if V2 == $0D
      $3D0: SE   VE, V2       ; Skip next instruction if VE == V2
      $490: SNE  V2, #0D      ; Skip next instruction if V2 != $0D
      ... and 15 more
    Compares sorted registers V[6]: 13 instructions
      $344: SE   V6, #18      ; Skip next instruction if V6 == $18
      $4BA: SNE  V6, #5C      ; Skip next instruction if V6 != $5C
      $4FC: SNE  V6, #50      ; Skip next instruction if V6 != $50
      ... and 10 more
    Logical operation on V[3] (sets VF=0 in CUDA): 3 instructions
      $348: AND  V8, V3       ; V8 = V8 AND V3, VF = 0
      $420: OR   V1, V3       ; V1 = V1 OR V3, VF = 0
      $612: XOR  VB, V3       ; VB = VB XOR V3, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $354: SUBN VE, V3       ; VE = (V3 - VE) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3, 6]: 1 instructions
      $39C: SNE  V3, V6       ; Skip next instruction if V3 != V6
    Modifies sorted registers V[3]: 21 instructions
      $3C2: ADD  V3, #98      ; Add $98 to V3 (V3 = (V3 + $98) & 0xFF)
      $3CA: LD   V3, #E3      ; Load $E3 into V3
      $552: RND  V3, #BC      ; V3 = random() AND $BC
      ... and 18 more
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $484: XOR  VF, V5       ; VF = VF XOR V5, VF = 0
      $F0A: AND  VD, V5       ; VD = VD AND V5, VF = 0
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $62E: LD   [I], VE      ; Store V0-VE at [I], then I += 15
    Arithmetic on sorted registers V[2]: 1 instructions
      $AC2: ADD  V0, V2       ; V0 = (V0 + V2) & 0xFF, VF = carry
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $AD6: XOR  VE, V6       ; VE = VE XOR V6, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $B6E: XOR  VC, V7       ; VC = VC XOR V7, VF = 0
    Modifies sorted registers V[2, 3, 4]: 1 instructions
      $C00: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $CC8: AND  V0, V4       ; V0 = V0 AND V4, VF = 0
    Arithmetic on sorted registers V[7]: 2 instructions
      $CDC: SUB  V0, V7       ; V0 = (V0 - V7) & 0xFF, VF = NOT borrow
      $EC2: SUB  VE, V7       ; VE = (VE - V7) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 478 (26.7%)
    LD: 231 (12.9%)
    JP: 211 (11.8%)
    CALL: 128 (7.1%)
    RND: 124 (6.9%)
    SNE: 122 (6.8%)
    NOP: 109 (6.1%)
    SE: 108 (6.0%)
    ADD: 106 (5.9%)
    DRW: 106 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 762
  Based on: 302 sorting instructions + 230 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1693D01_V1-V6_L6_ASC_C9_20cf3e9c.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Perfect consecutive sequence [0, 1, 2, 3, 4, 5] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 115 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [0, 1, 2, 3, 4, 5]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [0, 0, 1, 2, 3, 4, 5, 4]
  Changes: V0: 8‚Üí0, V1: 3‚Üí0, V2: 6‚Üí1, V3: 1‚Üí2, V4: 7‚Üí3, V5: 2‚Üí4
  ‚úì Correct initial test pattern detected
  Achievement cycle: 9

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 4
  Register writes: 12
  Register writes per cycle: 1.333

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$210', '$2A2', '$454', '$47A', '$52A', '$532', '$678', '$7D8']
       ... and 22 more
  V1: Modified at 24 locations
       Addresses: ['$210', '$2BA', '$400', '$5C0', '$6FA', '$6FC', '$912', '$95C']
       ... and 16 more
  V2: Modified at 19 locations
       Addresses: ['$210', '$236', '$2E6', '$38C', '$3E0', '$5DE', '$69A', '$938']
       ... and 11 more
  V3: Modified at 20 locations
       Addresses: ['$200', '$210', '$24A', '$2B0', '$2EE', '$5CE', '$5DA', '$62E']
       ... and 12 more
  V4: Modified at 26 locations
       Addresses: ['$210', '$2C8', '$372', '$37C', '$3E6', '$654', '$664', '$6BC']
       ... and 18 more
  V5: Modified at 30 locations
       Addresses: ['$210', '$230', '$238', '$3A2', '$3B6', '$432', '$456', '$5D8']
       ... and 22 more
  V6: Modified at 42 locations
       Addresses: ['$210', '$26A', '$270', '$2DA', '$328', '$33A', '$3BE', '$3FC']
       ... and 34 more
  V7: Modified at 15 locations
       Addresses: ['$264', '$2B8', '$3DA', '$67A', '$70E', '$7FE', '$84E', '$D30']
       ... and 7 more

CONTROL FLOW ANALYSIS:
  233 control transfers detected:
    $216 ‚Üí $E68
    $222 ‚Üí $B44
    $22C ‚Üí $AD6
    $22E ‚Üí $018 (LOOP)
    $24E ‚Üí $FE2
    ... and 228 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  265 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 19 instructions
      $200: LD   V3, #42      ; Load $42 into V3
      $24A: SHR  V3           ; V3 = V3 >> 1, VF = LSB
      $2B0: XOR  V3, V4       ; V3 = V3 XOR V4, VF = 0
      ... and 16 more
    Compares sorted registers V[5]: 18 instructions
      $206: SE   V5, #DC      ; Skip next instruction if V5 == $DC
      $2C0: SE   V5, #52      ; Skip next instruction if V5 == $52
      $422: SE   V5, #2E      ; Skip next instruction if V5 == $2E
      ... and 15 more
    Modifies sorted registers V[1, 2, 3, 4, 5, 6]: 1 instructions
      $210: LD   V6, [I]      ; Load V0-V6 from [I], then I += 7
    Compares sorted registers V[4]: 12 instructions
      $21C: SNE  V4, #17      ; Skip next instruction if V4 != $17
      $24C: SE   V4, #6A      ; Skip next instruction if V4 == $6A
      $306: SE   V4, V0       ; Skip next instruction if V4 == V0
      ... and 9 more
    Modifies sorted registers V[5]: 29 instructions
      $230: ADD  V5, #2C      ; Add $2C to V5 (V5 = (V5 + $2C) & 0xFF)
      $238: LD   V5, #A1      ; Load $A1 into V5
      $3A2: LD   V5, #36      ; Load $36 into V5
      ... and 26 more
    Modifies sorted registers V[2]: 18 instructions
      $236: RND  V2, #1F      ; V2 = random() AND $1F
      $2E6: ADD  V2, #77      ; Add $77 to V2 (V2 = (V2 + $77) & 0xFF)
      $38C: RND  V2, #05      ; V2 = random() AND $05
      ... and 15 more
    Compares sorted registers V[2]: 18 instructions
      $25A: SNE  V2, #A4      ; Skip next instruction if V2 != $A4
      $2F8: SNE  V2, #6E      ; Skip next instruction if V2 != $6E
      $464: SE   V2, #06      ; Skip next instruction if V2 == $06
      ... and 15 more
    Compares sorted registers V[3]: 15 instructions
      $266: SE   V3, #AC      ; Skip next instruction if V3 == $AC
      $2D2: SE   V3, #68      ; Skip next instruction if V3 == $68
      $3CE: SNE  V3, #27      ; Skip next instruction if V3 != $27
      ... and 12 more
    Modifies sorted registers V[6]: 41 instructions
      $26A: RND  V6, #3A      ; V6 = random() AND $3A
      $270: ADD  V6, #5F      ; Add $5F to V6 (V6 = (V6 + $5F) & 0xFF)
      $2DA: ADD  V6, #AE      ; Add $AE to V6 (V6 = (V6 + $AE) & 0xFF)
      ... and 38 more
    Compares sorted registers V[6]: 20 instructions
      $2B6: SNE  V6, #61      ; Skip next instruction if V6 != $61
      $2D4: SNE  V6, #18      ; Skip next instruction if V6 != $18
      $40C: SNE  V6, #6A      ; Skip next instruction if V6 != $6A
      ... and 17 more
    Modifies sorted registers V[1]: 23 instructions
      $2BA: RND  V1, #A2      ; V1 = random() AND $A2
      $400: ADD  V1, #0A      ; Add $0A to V1 (V1 = (V1 + $0A) & 0xFF)
      $5C0: LD   V1, #54      ; Load $54 into V1
      ... and 20 more
    Modifies sorted registers V[4]: 25 instructions
      $2C8: ADD  V4, VE       ; V4 = (V4 + VE) & 0xFF, VF = carry
      $372: LD   V4, #8D      ; Load $8D into V4
      $37C: ADD  V4, #5B      ; Add $5B to V4 (V4 = (V4 + $5B) & 0xFF)
      ... and 22 more
    Arithmetic on sorted registers V[6]: 2 instructions
      $304: SUBN VD, V6       ; VD = (V6 - VD) & 0xFF, VF = NOT borrow
      $D5C: ADD  V7, V6       ; V7 = (V7 + V6) & 0xFF, VF = carry
    Compares sorted registers V[1]: 11 instructions
      $412: SE   V1, VA       ; Skip next instruction if V1 == VA
      $468: SE   V1, #4D      ; Skip next instruction if V1 == $4D
      $5EC: SE   V1, #63      ; Skip next instruction if V1 == $63
      ... and 8 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $436: SUBN VB, V4       ; VB = (V4 - VB) & 0xFF, VF = NOT borrow
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $6EE: AND  VE, V1       ; VE = VE AND V1, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $93C: SUBN VC, V2       ; VC = (V2 - VC) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[1]: 1 instructions
      $958: SUBN VC, V1       ; VC = (V1 - VC) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $A60: OR   VB, V3       ; VB = VB OR V3, VF = 0
    Register transfer involving V[4]: 1 instructions
      $B22: LD   VD, V4       ; Load V4 into VD
    Register transfer involving V[5]: 1 instructions
      $BD6: LD   B, V5        ; Store BCD of V5 at [I], [I+1], [I+2]
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $BEE: OR   V0, V5       ; V0 = V0 OR V5, VF = 0
      $E04: XOR  VC, V5       ; VC = VC XOR V5, VF = 0
    Arithmetic on sorted registers V[5]: 2 instructions
      $D5A: SUB  V7, V5       ; V7 = (V7 - V5) & 0xFF, VF = NOT borrow
      $D60: ADD  V9, V5       ; V9 = (V9 + V5) & 0xFF, VF = carry
    Compares sorted registers V[3, 5]: 1 instructions
      $E2A: SE   V5, V3       ; Skip next instruction if V5 == V3
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $E3A: AND  VD, V6       ; VD = VD AND V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 473 (26.4%)
    LD: 243 (13.6%)
    JP: 224 (12.5%)
    CALL: 121 (6.8%)
    SNE: 118 (6.6%)
    ADD: 116 (6.5%)
    NOP: 115 (6.4%)
    RND: 115 (6.4%)
    SE: 114 (6.4%)
    DRW: 106 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 731
  Based on: 265 sorting instructions + 233 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1794D01_V2-V7_L6_DES_C624_e87ba511.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 100 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 624

CUDA EXECUTION STATISTICS:
  Total register operations: 3
  Register reads: 142
  Register writes: 138
  Register writes per cycle: 0.221

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 22 locations
       Addresses: ['$31A', '$338', '$33E', '$3DA', '$3F4', '$564', '$600', '$704']
       ... and 14 more
  V1: Modified at 31 locations
       Addresses: ['$38A', '$468', '$4FC', '$560', '$618', '$64C', '$6DE', '$74E']
       ... and 23 more
  V2: Modified at 19 locations
       Addresses: ['$296', '$35A', '$440', '$4C4', '$76A', '$9A6', '$ABA', '$B52']
       ... and 11 more
  V3: Modified at 23 locations
       Addresses: ['$394', '$3B6', '$3E2', '$584', '$62A', '$680', '$688', '$72C']
       ... and 15 more
  V4: Modified at 29 locations
       Addresses: ['$2DC', '$3E4', '$40C', '$424', '$45E', '$49A', '$4CC', '$4DA']
       ... and 21 more
  V5: Modified at 17 locations
       Addresses: ['$22C', '$3CC', '$436', '$54E', '$5AC', '$64A', '$720', '$7A4']
       ... and 9 more
  V6: Modified at 32 locations
       Addresses: ['$21C', '$222', '$24C', '$328', '$514', '$522', '$52C', '$670']
       ... and 24 more
  V7: Modified at 22 locations
       Addresses: ['$266', '$2C8', '$4F6', '$672', '$702', '$71C', '$8B0', '$9E6']
       ... and 14 more

CONTROL FLOW ANALYSIS:
  237 control transfers detected:
    $21A ‚Üí $F63
    $230 ‚Üí $955
    $232 ‚Üí $661
    $23C ‚Üí $BC5
    $242 ‚Üí $A5A
    ... and 232 more transfers
  Potential sorting loops: 126 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  248 instructions identified as sorting-related:
    Modifies sorted registers V[6]: 32 instructions
      $21C: SUBN V6, VC       ; V6 = (VC - V6) & 0xFF, VF = NOT borrow
      $222: LD   V6, #B6      ; Load $B6 into V6
      $24C: ADD  V6, #C0      ; Add $C0 to V6 (V6 = (V6 + $C0) & 0xFF)
      ... and 29 more
    Compares sorted registers V[2]: 19 instructions
      $224: SE   V2, #6A      ; Skip next instruction if V2 == $6A
      $268: SE   V2, #13      ; Skip next instruction if V2 == $13
      $2D2: SNE  V2, #B4      ; Skip next instruction if V2 != $B4
      ... and 16 more
    Modifies sorted registers V[5]: 17 instructions
      $22C: ADD  V5, #84      ; Add $84 to V5 (V5 = (V5 + $84) & 0xFF)
      $3CC: LD   V5, #6F      ; Load $6F into V5
      $436: RND  V5, #9F      ; V5 = random() AND $9F
      ... and 14 more
    Compares sorted registers V[6]: 23 instructions
      $238: SNE  V0, V6       ; Skip next instruction if V0 != V6
      $2A8: SE   V6, #C8      ; Skip next instruction if V6 == $C8
      $2B4: SE   V6, #7F      ; Skip next instruction if V6 == $7F
      ... and 20 more
    Compares sorted registers V[4]: 14 instructions
      $254: SE   V4, #03      ; Skip next instruction if V4 == $03
      $38E: SE   V4, #A8      ; Skip next instruction if V4 == $A8
      $390: SNE  V4, #FD      ; Skip next instruction if V4 != $FD
      ... and 11 more
    Modifies sorted registers V[7]: 22 instructions
      $266: LD   V7, #55      ; Load $55 into V7
      $2C8: ADD  V7, #8B      ; Add $8B to V7 (V7 = (V7 + $8B) & 0xFF)
      $4F6: ADD  V7, #28      ; Add $28 to V7 (V7 = (V7 + $28) & 0xFF)
      ... and 19 more
    Compares sorted registers V[3]: 15 instructions
      $274: SNE  V3, #FC      ; Skip next instruction if V3 != $FC
      $2D8: SE   V3, #67      ; Skip next instruction if V3 == $67
      $3CE: SNE  V3, #21      ; Skip next instruction if V3 != $21
      ... and 12 more
    Compares sorted registers V[7]: 11 instructions
      $28A: SE   V7, #6D      ; Skip next instruction if V7 == $6D
      $4B0: SNE  V7, #A0      ; Skip next instruction if V7 != $A0
      $546: SE   V7, #99      ; Skip next instruction if V7 == $99
      ... and 8 more
    Modifies sorted registers V[2]: 19 instructions
      $296: ADD  V2, #52      ; Add $52 to V2 (V2 = (V2 + $52) & 0xFF)
      $35A: LD   V2, #96      ; Load $96 into V2
      $440: LD   V2, #B7      ; Load $B7 into V2
      ... and 16 more
    Compares sorted registers V[5]: 12 instructions
      $2D6: SE   V5, #56      ; Skip next instruction if V5 == $56
      $36E: SNE  V5, #46      ; Skip next instruction if V5 != $46
      $4BC: SE   V5, #3C      ; Skip next instruction if V5 == $3C
      ... and 9 more
    Modifies sorted registers V[4]: 29 instructions
      $2DC: RND  V4, #64      ; V4 = random() AND $64
      $3E4: LD   V4, #18      ; Load $18 into V4
      $40C: OR   V4, VF       ; V4 = V4 OR VF, VF = 0
      ... and 26 more
    Modifies sorted registers V[3]: 23 instructions
      $394: RND  V3, #E4      ; V3 = random() AND $E4
      $3B6: LD   V3, #46      ; Load $46 into V3
      $3E2: LD   V3, #C3      ; Load $C3 into V3
      ... and 20 more
    Register transfer involving V[6]: 1 instructions
      $468: LD   V1, V6       ; Load V6 into V1
    Compares sorted registers V[5, 6]: 1 instructions
      $4B2: SE   V6, V5       ; Skip next instruction if V6 == V5
    Arithmetic on sorted registers V[7]: 2 instructions
      $588: SUB  VB, V7       ; VB = (VB - V7) & 0xFF, VF = NOT borrow
      $8D8: SUB  VF, V7       ; VF = (VF - V7) & 0xFF, VF = NOT borrow
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $796: OR   VB, V5       ; VB = VB OR V5, VF = 0
      $93C: OR   V1, V5       ; V1 = V1 OR V5, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $7C8: SUBN V9, V4       ; V9 = (V4 - V9) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[5]: 1 instructions
      $8BE: ADD  V0, V5       ; V0 = (V0 + V5) & 0xFF, VF = carry
    Compares sorted registers V[3, 7]: 1 instructions
      $C34: SNE  V3, V7       ; Skip next instruction if V3 != V7
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $C96: OR   VF, V4       ; VF = VF OR V4, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $D8A: OR   V9, V6       ; V9 = V9 OR V6, VF = 0
      $E3C: AND  V9, V6       ; V9 = V9 AND V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 463 (25.8%)
    JP: 239 (13.3%)
    LD: 237 (13.2%)
    ADD: 126 (7.0%)
    CALL: 124 (6.9%)
    DRW: 119 (6.6%)
    SNE: 113 (6.3%)
    NOP: 113 (6.3%)
    SE: 112 (6.2%)
    RND: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 722
  Based on: 248 sorting instructions + 237 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4280D01_V2-V7_L6_DES_C9_8f9d364b.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 125 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 9

CUDA EXECUTION STATISTICS:
  Total register operations: 2
  Register reads: 6
  Register writes: 6
  Register writes per cycle: 0.667

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 13 locations
       Addresses: ['$302', '$5B2', '$6D0', '$73A', '$8BC', '$9B0', '$A32', '$B5E']
       ... and 5 more
  V1: Modified at 27 locations
       Addresses: ['$25C', '$38C', '$440', '$458', '$4D8', '$546', '$5F0', '$5F2']
       ... and 19 more
  V2: Modified at 24 locations
       Addresses: ['$200', '$22E', '$2E8', '$32A', '$3A2', '$3FC', '$402', '$404']
       ... and 16 more
  V3: Modified at 24 locations
       Addresses: ['$438', '$49E', '$540', '$5E2', '$60A', '$68C', '$71C', '$790']
       ... and 16 more
  V4: Modified at 22 locations
       Addresses: ['$2A0', '$392', '$3B0', '$3DA', '$594', '$746', '$762', '$796']
       ... and 14 more
  V5: Modified at 31 locations
       Addresses: ['$278', '$2CC', '$38A', '$528', '$636', '$63E', '$6E2', '$736']
       ... and 23 more
  V6: Modified at 33 locations
       Addresses: ['$250', '$296', '$328', '$35E', '$432', '$456', '$488', '$4C8']
       ... and 25 more
  V7: Modified at 24 locations
       Addresses: ['$254', '$276', '$3EA', '$592', '$67A', '$758', '$76E', '$7D6']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  211 control transfers detected:
    $208 ‚Üí $7D0
    $20A ‚Üí $366
    $236 ‚Üí $581
    $23C ‚Üí $988
    $264 ‚Üí $DA4
    ... and 206 more transfers
  Potential sorting loops: 112 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  261 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 24 instructions
      $200: LD   V2, #09      ; Load $09 into V2
      $22E: RND  V2, #00      ; V2 = random() AND $00
      $2E8: ADD  V2, #54      ; Add $54 to V2 (V2 = (V2 + $54) & 0xFF)
      ... and 21 more
    Modifies sorted registers V[6]: 33 instructions
      $250: ADD  V6, #40      ; Add $40 to V6 (V6 = (V6 + $40) & 0xFF)
      $296: RND  V6, #94      ; V6 = random() AND $94
      $328: RND  V6, #58      ; V6 = random() AND $58
      ... and 30 more
    Modifies sorted registers V[7]: 24 instructions
      $254: RND  V7, #C5      ; V7 = random() AND $C5
      $276: SHL  V7           ; V7 = (V7 << 1) & 0xFF, VF = MSB
      $3EA: LD   V7, #F6      ; Load $F6 into V7
      ... and 21 more
    Modifies sorted registers V[5]: 31 instructions
      $278: RND  V5, #97      ; V5 = random() AND $97
      $2CC: ADD  V5, #24      ; Add $24 to V5 (V5 = (V5 + $24) & 0xFF)
      $38A: LD   V5, #8A      ; Load $8A into V5
      ... and 28 more
    Compares sorted registers V[3]: 18 instructions
      $28E: SE   VD, V3       ; Skip next instruction if VD == V3
      $2C4: SE   V3, #8E      ; Skip next instruction if V3 == $8E
      $2DC: SE   V3, #3D      ; Skip next instruction if V3 == $3D
      ... and 15 more
    Modifies sorted registers V[4]: 22 instructions
      $2A0: RND  V4, #ED      ; V4 = random() AND $ED
      $392: ADD  V4, #2F      ; Add $2F to V4 (V4 = (V4 + $2F) & 0xFF)
      $3B0: RND  V4, #7B      ; V4 = random() AND $7B
      ... and 19 more
    Compares sorted registers V[2]: 15 instructions
      $2D0: SE   V2, #56      ; Skip next instruction if V2 == $56
      $470: SE   V2, #8D      ; Skip next instruction if V2 == $8D
      $696: SNE  V2, #3D      ; Skip next instruction if V2 != $3D
      ... and 12 more
    Compares sorted registers V[6]: 15 instructions
      $316: SNE  V6, #CD      ; Skip next instruction if V6 != $CD
      $32E: SNE  V6, #9A      ; Skip next instruction if V6 != $9A
      $3F4: SNE  V6, #D9      ; Skip next instruction if V6 != $D9
      ... and 12 more
    Compares sorted registers V[7]: 9 instructions
      $334: SNE  V7, #58      ; Skip next instruction if V7 != $58
      $3A4: SE   V7, #98      ; Skip next instruction if V7 == $98
      $472: SNE  V7, #B1      ; Skip next instruction if V7 != $B1
      ... and 6 more
    Compares sorted registers V[5]: 15 instructions
      $3C6: SE   V5, #47      ; Skip next instruction if V5 == $47
      $3FE: SNE  V5, #98      ; Skip next instruction if V5 != $98
      $6C0: SNE  V5, #28      ; Skip next instruction if V5 != $28
      ... and 12 more
    Compares sorted registers V[4]: 13 instructions
      $3D6: SNE  V4, #FA      ; Skip next instruction if V4 != $FA
      $4D4: SNE  V9, V4       ; Skip next instruction if V9 != V4
      $568: SE   V4, #96      ; Skip next instruction if V4 == $96
      ... and 10 more
    Modifies sorted registers V[3]: 24 instructions
      $438: ADD  V3, #EB      ; Add $EB to V3 (V3 = (V3 + $EB) & 0xFF)
      $49E: ADD  V3, #A8      ; Add $A8 to V3 (V3 = (V3 + $A8) & 0xFF)
      $540: SHR  V3           ; V3 = V3 >> 1, VF = LSB
      ... and 21 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $4D8: ADD  V1, V6       ; V1 = (V1 + V6) & 0xFF, VF = carry
    Register transfer involving V[4]: 1 instructions
      $52E: LD   ST, V4       ; Load V4 into sound timer
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $5AE: XOR  V8, V3       ; V8 = V8 XOR V3, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $628: OR   VE, V6       ; VE = VE OR V6, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $638: AND  VA, V4       ; VA = VA AND V4, VF = 0
      $B2C: XOR  VB, V4       ; VB = VB XOR V4, VF = 0
    Compares sorted registers V[4, 5]: 1 instructions
      $688: SNE  V5, V4       ; Skip next instruction if V5 != V4
    Register transfer involving V[5]: 2 instructions
      $708: LD   VC, V5       ; Load V5 into VC
      $94C: LD   V9, V5       ; Load V5 into V9
    Register transfer involving V[7]: 2 instructions
      $70C: LD   DT, V7       ; Load V7 into delay timer
      $A36: LD   VD, V7       ; Load V7 into VD
    Compares sorted registers V[4, 6]: 1 instructions
      $764: SNE  V4, V6       ; Skip next instruction if V4 != V6
    Arithmetic on sorted registers V[2]: 3 instructions
      $872: SUB  V1, V2       ; V1 = (V1 - V2) & 0xFF, VF = NOT borrow
      $EE8: ADD  V1, V2       ; V1 = (V1 + V2) & 0xFF, VF = carry
      $F4A: SUB  VE, V2       ; VE = (VE - V2) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[7]: 1 instructions
      $898: ADD  I, V7        ; I = (I + V7) & 0xFFFF
    Arithmetic on sorted registers V[4]: 1 instructions
      $8BC: SUB  V0, V4       ; V0 = (V0 - V4) & 0xFF, VF = NOT borrow
    Register transfer involving V[6]: 1 instructions
      $AA4: LD   VF, V6       ; Load V6 into VF

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 507 (28.3%)
    LD: 217 (12.1%)
    JP: 215 (12.0%)
    ADD: 126 (7.0%)
    RND: 125 (7.0%)
    SE: 121 (6.8%)
    SNE: 118 (6.6%)
    DRW: 112 (6.2%)
    NOP: 108 (6.0%)
    CALL: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 683
  Based on: 261 sorting instructions + 211 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4283D01_V2-V7_L6_DES_C84_e3d27ebf.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 98 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [4, 57, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí4, V1: 3‚Üí57, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 84

CUDA EXECUTION STATISTICS:
  Total register operations: 6
  Register reads: 27
  Register writes: 18
  Register writes per cycle: 0.214

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 19 locations
       Addresses: ['$256', '$2EA', '$37C', '$51C', '$594', '$88C', '$9B2', '$A42']
       ... and 11 more
  V1: Modified at 29 locations
       Addresses: ['$2B8', '$2D6', '$3DC', '$42C', '$45E', '$4A4', '$54E', '$580']
       ... and 21 more
  V2: Modified at 24 locations
       Addresses: ['$210', '$212', '$4E6', '$502', '$524', '$548', '$556', '$5A4']
       ... and 16 more
  V3: Modified at 32 locations
       Addresses: ['$28A', '$312', '$376', '$378', '$4F4', '$6BC', '$6EA', '$710']
       ... and 24 more
  V4: Modified at 28 locations
       Addresses: ['$3C4', '$428', '$44E', '$4E4', '$54C', '$5CE', '$676', '$692']
       ... and 20 more
  V5: Modified at 22 locations
       Addresses: ['$21A', '$32E', '$42E', '$4A6', '$550', '$5C0', '$70C', '$786']
       ... and 14 more
  V6: Modified at 25 locations
       Addresses: ['$240', '$478', '$5AE', '$5C8', '$5FA', '$766', '$76C', '$8A8']
       ... and 17 more
  V7: Modified at 27 locations
       Addresses: ['$2DC', '$2DE', '$3A0', '$3CE', '$422', '$4CE', '$5CC', '$630']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  246 control transfers detected:
    $206 ‚Üí $ABA
    $208 ‚Üí $7D3
    $214 ‚Üí $342
    $242 ‚Üí $783
    $25C ‚Üí $045 (LOOP)
    ... and 241 more transfers
  Potential sorting loops: 141 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  265 instructions identified as sorting-related:
    Compares sorted registers V[6]: 20 instructions
      $20A: SE   V6, #E2      ; Skip next instruction if V6 == $E2
      $286: SNE  V6, #9E      ; Skip next instruction if V6 != $9E
      $2D2: SNE  V6, #1B      ; Skip next instruction if V6 != $1B
      ... and 17 more
    Modifies sorted registers V[2]: 23 instructions
      $210: LD   V2, #21      ; Load $21 into V2
      $212: RND  V2, #97      ; V2 = random() AND $97
      $4E6: XOR  V2, V9       ; V2 = V2 XOR V9, VF = 0
      ... and 20 more
    Modifies sorted registers V[5]: 21 instructions
      $21A: ADD  V5, #5A      ; Add $5A to V5 (V5 = (V5 + $5A) & 0xFF)
      $32E: ADD  V5, #6A      ; Add $6A to V5 (V5 = (V5 + $6A) & 0xFF)
      $42E: XOR  V5, VA       ; V5 = V5 XOR VA, VF = 0
      ... and 18 more
    Modifies sorted registers V[6]: 24 instructions
      $240: ADD  V6, #C3      ; Add $C3 to V6 (V6 = (V6 + $C3) & 0xFF)
      $478: XOR  V6, V1       ; V6 = V6 XOR V1, VF = 0
      $5AE: RND  V6, #C2      ; V6 = random() AND $C2
      ... and 21 more
    Compares sorted registers V[2]: 22 instructions
      $282: SNE  V2, #38      ; Skip next instruction if V2 != $38
      $2A4: SE   V2, #3A      ; Skip next instruction if V2 == $3A
      $4A8: SE   V2, #25      ; Skip next instruction if V2 == $25
      ... and 19 more
    Modifies sorted registers V[3]: 31 instructions
      $28A: SHR  V3           ; V3 = V3 >> 1, VF = LSB
      $312: ADD  V3, #51      ; Add $51 to V3 (V3 = (V3 + $51) & 0xFF)
      $376: LD   V3, #36      ; Load $36 into V3
      ... and 28 more
    Compares sorted registers V[7]: 20 instructions
      $28C: SNE  V7, #9F      ; Skip next instruction if V7 != $9F
      $68E: SNE  V7, #AC      ; Skip next instruction if V7 != $AC
      $760: SNE  V7, #A5      ; Skip next instruction if V7 != $A5
      ... and 17 more
    Compares sorted registers V[5]: 16 instructions
      $2C6: SNE  V5, #70      ; Skip next instruction if V5 != $70
      $34E: SNE  V5, #A3      ; Skip next instruction if V5 != $A3
      $5A0: SNE  V5, #47      ; Skip next instruction if V5 != $47
      ... and 13 more
    Modifies sorted registers V[7]: 26 instructions
      $2DC: SHR  V7           ; V7 = V7 >> 1, VF = LSB
      $2DE: LD   V7, #86      ; Load $86 into V7
      $3A0: ADD  V7, #CF      ; Add $CF to V7 (V7 = (V7 + $CF) & 0xFF)
      ... and 23 more
    Compares sorted registers V[3]: 10 instructions
      $2F2: SNE  V3, #DB      ; Skip next instruction if V3 != $DB
      $354: SNE  V3, #0A      ; Skip next instruction if V3 != $0A
      $688: SNE  V3, #87      ; Skip next instruction if V3 != $87
      ... and 7 more
    Compares sorted registers V[4]: 15 instructions
      $32A: SE   V4, #66      ; Skip next instruction if V4 == $66
      $404: SE   V4, #CA      ; Skip next instruction if V4 == $CA
      $700: SE   V4, #92      ; Skip next instruction if V4 == $92
      ... and 12 more
    Modifies sorted registers V[4]: 27 instructions
      $3C4: ADD  V4, #4B      ; Add $4B to V4 (V4 = (V4 + $4B) & 0xFF)
      $428: ADD  V4, #64      ; Add $64 to V4 (V4 = (V4 + $64) & 0xFF)
      $44E: ADD  V4, #84      ; Add $84 to V4 (V4 = (V4 + $84) & 0xFF)
      ... and 24 more
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $678: OR   V9, V3       ; V9 = V9 OR V3, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $722: XOR  VB, V4       ; VB = VB XOR V4, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $756: AND  V1, V6       ; V1 = V1 AND V6, VF = 0
    Arithmetic on sorted registers V[6]: 2 instructions
      $802: SUB  V1, V6       ; V1 = (V1 - V6) & 0xFF, VF = NOT borrow
      $F2E: SUBN VF, V6       ; VF = (V6 - VF) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 1 instructions
      $962: ADD  V9, V3       ; V9 = (V9 + V3) & 0xFF, VF = carry
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $A94: LD   VC, [I]      ; Load V0-VC from [I], then I += 13
    Compares sorted registers V[2, 5]: 1 instructions
      $D00: SNE  V5, V2       ; Skip next instruction if V5 != V2
    Arithmetic on sorted registers V[2]: 1 instructions
      $D42: ADD  VA, V2       ; VA = (VA + V2) & 0xFF, VF = carry
    Register transfer involving V[6]: 1 instructions
      $F5A: LD   V8, V6       ; Load V6 into V8

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 428 (23.9%)
    LD: 261 (14.6%)
    JP: 252 (14.1%)
    SNE: 127 (7.1%)
    ADD: 126 (7.0%)
    CALL: 117 (6.5%)
    SE: 116 (6.5%)
    DRW: 111 (6.2%)
    NOP: 108 (6.0%)
    RND: 98 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 757
  Based on: 265 sorting instructions + 246 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B6117D01_V2-V7_L6_DES_C54_5497cf1f.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 119 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 54

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 19
  Register writes: 34
  Register writes per cycle: 0.630

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$244', '$2D0', '$39C', '$47A', '$4BA', '$4CA', '$4F4', '$578']
       ... and 15 more
  V1: Modified at 29 locations
       Addresses: ['$29C', '$2DA', '$2EA', '$526', '$546', '$5E6', '$5FC', '$68C']
       ... and 21 more
  V2: Modified at 35 locations
       Addresses: ['$218', '$2B2', '$354', '$35C', '$388', '$39A', '$3D0', '$454']
       ... and 27 more
  V3: Modified at 28 locations
       Addresses: ['$23E', '$32E', '$5FA', '$600', '$6FA', '$71A', '$74C', '$808']
       ... and 20 more
  V4: Modified at 26 locations
       Addresses: ['$266', '$28E', '$2C0', '$2D8', '$3EE', '$568', '$5BC', '$5BE']
       ... and 18 more
  V5: Modified at 24 locations
       Addresses: ['$33C', '$374', '$420', '$57E', '$60A', '$686', '$71C', '$74E']
       ... and 16 more
  V6: Modified at 23 locations
       Addresses: ['$276', '$362', '$41E', '$474', '$4B2', '$4EE', '$552', '$566']
       ... and 15 more
  V7: Modified at 28 locations
       Addresses: ['$340', '$386', '$3AA', '$468', '$486', '$4B8', '$59C', '$604']
       ... and 20 more

CONTROL FLOW ANALYSIS:
  230 control transfers detected:
    $236 ‚Üí $1D1 (LOOP)
    $246 ‚Üí $242 (LOOP)
    $26C ‚Üí $BEC
    $296 ‚Üí $3B8
    $2A6 ‚Üí $3AA
    ... and 225 more transfers
  Potential sorting loops: 126 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  258 instructions identified as sorting-related:
    Arithmetic on sorted registers V[2]: 2 instructions
      $20A: ADD  VD, V2       ; VD = (VD + V2) & 0xFF, VF = carry
      $7E8: SUB  VF, V2       ; VF = (VF - V2) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3]: 13 instructions
      $20E: SNE  V3, #83      ; Skip next instruction if V3 != $83
      $34C: SE   V3, #92      ; Skip next instruction if V3 == $92
      $4C2: SNE  V3, #7A      ; Skip next instruction if V3 != $7A
      ... and 10 more
    Compares sorted registers V[6]: 15 instructions
      $214: SE   V6, #DF      ; Skip next instruction if V6 == $DF
      $22A: SNE  V6, #F2      ; Skip next instruction if V6 != $F2
      $326: SE   V6, #F9      ; Skip next instruction if V6 == $F9
      ... and 12 more
    Compares sorted registers V[5]: 15 instructions
      $216: SE   V5, #D7      ; Skip next instruction if V5 == $D7
      $3B2: SNE  V5, #CD      ; Skip next instruction if V5 != $CD
      $3B6: SNE  V5, #9C      ; Skip next instruction if V5 != $9C
      ... and 12 more
    Modifies sorted registers V[2]: 35 instructions
      $218: RND  V2, #0B      ; V2 = random() AND $0B
      $2B2: RND  V2, #92      ; V2 = random() AND $92
      $354: RND  V2, #C8      ; V2 = random() AND $C8
      ... and 32 more
    Modifies sorted registers V[3]: 28 instructions
      $23E: RND  V3, #34      ; V3 = random() AND $34
      $32E: LD   V3, #DF      ; Load $DF into V3
      $5FA: ADD  V3, #B6      ; Add $B6 to V3 (V3 = (V3 + $B6) & 0xFF)
      ... and 25 more
    Compares sorted registers V[7]: 10 instructions
      $250: SE   V7, #F2      ; Skip next instruction if V7 == $F2
      $830: SNE  V7, #00      ; Skip next instruction if V7 != $00
      $91C: SNE  V7, #DF      ; Skip next instruction if V7 != $DF
      ... and 7 more
    Arithmetic on sorted registers V[7]: 2 instructions
      $260: SUBN VB, V7       ; VB = (V7 - VB) & 0xFF, VF = NOT borrow
      $48E: SUB  VB, V7       ; VB = (VB - V7) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[4]: 26 instructions
      $266: LD   V4, #4F      ; Load $4F into V4
      $28E: RND  V4, #40      ; V4 = random() AND $40
      $2C0: ADD  V4, #63      ; Add $63 to V4 (V4 = (V4 + $63) & 0xFF)
      ... and 23 more
    Modifies sorted registers V[6]: 23 instructions
      $276: LD   V6, #70      ; Load $70 into V6
      $362: ADD  V6, #4D      ; Add $4D to V6 (V6 = (V6 + $4D) & 0xFF)
      $41E: RND  V6, #09      ; V6 = random() AND $09
      ... and 20 more
    Compares sorted registers V[2]: 13 instructions
      $27E: SE   V2, #90      ; Skip next instruction if V2 == $90
      $31E: SE   V2, #C2      ; Skip next instruction if V2 == $C2
      $642: SNE  V2, #10      ; Skip next instruction if V2 != $10
      ... and 10 more
    Compares sorted registers V[2, 6]: 1 instructions
      $298: SE   V2, V6       ; Skip next instruction if V2 == V6
    Modifies sorted registers V[5]: 24 instructions
      $33C: RND  V5, #84      ; V5 = random() AND $84
      $374: ADD  V5, #DC      ; Add $DC to V5 (V5 = (V5 + $DC) & 0xFF)
      $420: RND  V5, #4C      ; V5 = random() AND $4C
      ... and 21 more
    Modifies sorted registers V[7]: 28 instructions
      $340: LD   V7, #95      ; Load $95 into V7
      $386: ADD  V7, #11      ; Add $11 to V7 (V7 = (V7 + $11) & 0xFF)
      $3AA: RND  V7, #71      ; V7 = random() AND $71
      ... and 25 more
    Register transfer involving V[5]: 2 instructions
      $522: LD   B, V5        ; Store BCD of V5 at [I], [I+1], [I+2]
      $8CE: LD   VD, V5       ; Load V5 into VD
    Register transfer involving V[4]: 1 instructions
      $570: LD   F, V4        ; I = font_address(V4 & 0xF) = 0x50 + (V4 & 0xF) * 5
    Register transfer involving V[6]: 1 instructions
      $58C: LD   VF, V6       ; Load V6 into VF
    Compares sorted registers V[5, 7]: 1 instructions
      $75C: SNE  V7, V5       ; Skip next instruction if V7 != V5
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $826: AND  V8, V4       ; V8 = V8 AND V4, VF = 0
      $8F0: OR   V1, V4       ; V1 = V1 OR V4, VF = 0
    Compares sorted registers V[4]: 7 instructions
      $8CA: SE   V4, #C3      ; Skip next instruction if V4 == $C3
      $A82: SE   V4, #1C      ; Skip next instruction if V4 == $1C
      $B20: SE   V4, #3B      ; Skip next instruction if V4 == $3B
      ... and 4 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $99A: ADD  VA, V6       ; VA = (VA + V6) & 0xFF, VF = carry
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $A0A: OR   V0, V3       ; V0 = V0 OR V3, VF = 0
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $AB8: OR   V8, V5       ; V8 = V8 OR V5, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $AC8: OR   VF, V7       ; VF = VF OR V7, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $B94: AND  VC, V6       ; VC = VC AND V6, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $C7C: SUBN VD, V3       ; VD = (V3 - VD) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3, 4]: 1 instructions
      $CB8: SE   V4, V3       ; Skip next instruction if V4 == V3
    Arithmetic on sorted registers V[5]: 1 instructions
      $D94: SUBN V9, V5       ; V9 = (V5 - V9) & 0xFF, VF = NOT borrow
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $EAE: OR   VD, V2       ; VD = VD OR V2, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 492 (27.5%)
    LD: 233 (13.0%)
    JP: 220 (12.3%)
    ADD: 124 (6.9%)
    SNE: 124 (6.9%)
    RND: 119 (6.6%)
    CALL: 119 (6.6%)
    SE: 111 (6.2%)
    NOP: 106 (5.9%)
    DRW: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 718
  Based on: 258 sorting instructions + 230 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B0583D01_V2-V7_L6_DES_C231_3eabd128.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 115 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [0, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí0, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 231

CUDA EXECUTION STATISTICS:
  Total register operations: 3
  Register reads: 34
  Register writes: 48
  Register writes per cycle: 0.208

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 19 locations
       Addresses: ['$504', '$50E', '$53A', '$63A', '$674', '$6B8', '$71E', '$938']
       ... and 11 more
  V1: Modified at 28 locations
       Addresses: ['$308', '$34E', '$3AE', '$474', '$4DA', '$53C', '$59E', '$73C']
       ... and 20 more
  V2: Modified at 23 locations
       Addresses: ['$244', '$282', '$294', '$35E', '$52A', '$564', '$570', '$588']
       ... and 15 more
  V3: Modified at 27 locations
       Addresses: ['$202', '$212', '$22E', '$2E6', '$3FC', '$43C', '$462', '$6C6']
       ... and 19 more
  V4: Modified at 27 locations
       Addresses: ['$2AC', '$2AE', '$2FC', '$3EC', '$476', '$552', '$56E', '$77A']
       ... and 19 more
  V5: Modified at 30 locations
       Addresses: ['$280', '$372', '$37E', '$3D2', '$3E8', '$4EC', '$542', '$5F8']
       ... and 22 more
  V6: Modified at 28 locations
       Addresses: ['$21E', '$2C8', '$30E', '$4E4', '$544', '$59C', '$602', '$642']
       ... and 20 more
  V7: Modified at 27 locations
       Addresses: ['$344', '$364', '$368', '$3AC', '$424', '$48C', '$4A6', '$4CE']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  209 control transfers detected:
    $226 ‚Üí $D53
    $232 ‚Üí $410
    $248 ‚Üí $351
    $24E ‚Üí $E26
    $254 ‚Üí $332
    ... and 204 more transfers
  Potential sorting loops: 107 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  250 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 26 instructions
      $202: RND  V3, #31      ; V3 = random() AND $31
      $212: ADD  V3, #BC      ; Add $BC to V3 (V3 = (V3 + $BC) & 0xFF)
      $22E: RND  V3, #C1      ; V3 = random() AND $C1
      ... and 23 more
    Modifies sorted registers V[6]: 27 instructions
      $21E: LD   V6, #A0      ; Load $A0 into V6
      $2C8: ADD  V6, VB       ; V6 = (V6 + VB) & 0xFF, VF = carry
      $30E: RND  V6, #E9      ; V6 = random() AND $E9
      ... and 24 more
    Compares sorted registers V[7]: 14 instructions
      $224: SE   V7, V7       ; Skip next instruction if V7 == V7
      $2BE: SNE  V7, #A8      ; Skip next instruction if V7 != $A8
      $392: SNE  V7, #A8      ; Skip next instruction if V7 != $A8
      ... and 11 more
    Compares sorted registers V[3]: 16 instructions
      $242: SE   V3, #56      ; Skip next instruction if V3 == $56
      $298: SE   VE, V3       ; Skip next instruction if VE == V3
      $2F4: SNE  V3, #84      ; Skip next instruction if V3 != $84
      ... and 13 more
    Modifies sorted registers V[2]: 22 instructions
      $244: LD   V2, #84      ; Load $84 into V2
      $282: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB
      $294: LD   V2, #91      ; Load $91 into V2
      ... and 19 more
    Compares sorted registers V[2]: 14 instructions
      $252: SE   V2, #E8      ; Skip next instruction if V2 == $E8
      $356: SE   V2, #60      ; Skip next instruction if V2 == $60
      $370: SNE  V2, #02      ; Skip next instruction if V2 != $02
      ... and 11 more
    Modifies sorted registers V[5]: 29 instructions
      $280: RND  V5, #4C      ; V5 = random() AND $4C
      $372: RND  V5, #C8      ; V5 = random() AND $C8
      $37E: RND  V5, #37      ; V5 = random() AND $37
      ... and 26 more
    Modifies sorted registers V[4]: 26 instructions
      $2AC: RND  V4, #1B      ; V4 = random() AND $1B
      $2AE: ADD  V4, #42      ; Add $42 to V4 (V4 = (V4 + $42) & 0xFF)
      $2FC: ADD  V4, #90      ; Add $90 to V4 (V4 = (V4 + $90) & 0xFF)
      ... and 23 more
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $2CA: AND  V9, V7       ; V9 = V9 AND V7, VF = 0
      $A16: OR   V1, V7       ; V1 = V1 OR V7, VF = 0
    Modifies sorted registers V[7]: 26 instructions
      $344: LD   V7, #F7      ; Load $F7 into V7
      $364: RND  V7, #D5      ; V7 = random() AND $D5
      $368: ADD  V7, #01      ; Add $01 to V7 (V7 = (V7 + $01) & 0xFF)
      ... and 23 more
    Compares sorted registers V[5]: 10 instructions
      $3C6: SE   V5, #BE      ; Skip next instruction if V5 == $BE
      $520: SNE  V5, #3E      ; Skip next instruction if V5 != $3E
      $72A: SNE  V5, #22      ; Skip next instruction if V5 != $22
      ... and 7 more
    Compares sorted registers V[4]: 16 instructions
      $440: SE   V4, #59      ; Skip next instruction if V4 == $59
      $464: SNE  V4, #6D      ; Skip next instruction if V4 != $6D
      $508: SNE  V4, #A0      ; Skip next instruction if V4 != $A0
      ... and 13 more
    Arithmetic on sorted registers V[3]: 2 instructions
      $530: ADD  V8, V3       ; V8 = (V8 + V3) & 0xFF, VF = carry
      $ECC: SUBN VD, V3       ; VD = (V3 - VD) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[4]: 1 instructions
      $53C: ADD  V1, V4       ; V1 = (V1 + V4) & 0xFF, VF = carry
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $5A0: XOR  VB, V3       ; VB = VB XOR V3, VF = 0
    Compares sorted registers V[6]: 12 instructions
      $5D0: SNE  V6, #0A      ; Skip next instruction if V6 != $0A
      $77C: SNE  V6, #FD      ; Skip next instruction if V6 != $FD
      $7A4: SNE  V6, #BA      ; Skip next instruction if V6 != $BA
      ... and 9 more
    Arithmetic on sorted registers V[6]: 2 instructions
      $718: SUBN VD, V6       ; VD = (V6 - VD) & 0xFF, VF = NOT borrow
      $DB0: SUBN V9, V6       ; V9 = (V6 - V9) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 6]: 1 instructions
      $71C: SE   V2, V6       ; Skip next instruction if V2 == V6
    Compares sorted registers V[4, 6]: 1 instructions
      $BD4: SE   V6, V4       ; Skip next instruction if V6 == V4
    Register transfer involving V[2]: 1 instructions
      $E4A: LD   DT, V2       ; Load V2 into delay timer
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $ED0: LD   VE, [I]      ; Load V0-VE from [I], then I += 15

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 494 (27.6%)
    LD: 254 (14.2%)
    JP: 214 (11.9%)
    SNE: 124 (6.9%)
    ADD: 116 (6.5%)
    SE: 116 (6.5%)
    RND: 115 (6.4%)
    DRW: 110 (6.1%)
    CALL: 104 (5.8%)
    NOP: 92 (5.1%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 668
  Based on: 250 sorting instructions + 209 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3247D01_V2-V7_L6_DES_C12_1034ff70.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 130 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 12

CUDA EXECUTION STATISTICS:
  Total register operations: 2
  Register reads: 7
  Register writes: 7
  Register writes per cycle: 0.583

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$2BC', '$2CE', '$4A0', '$4B0', '$58C', '$60C', '$710', '$714']
       ... and 22 more
  V1: Modified at 28 locations
       Addresses: ['$218', '$2A8', '$314', '$37C', '$3A6', '$42E', '$450', '$458']
       ... and 20 more
  V2: Modified at 21 locations
       Addresses: ['$230', '$244', '$308', '$328', '$342', '$356', '$526', '$616']
       ... and 13 more
  V3: Modified at 23 locations
       Addresses: ['$20C', '$3E2', '$3EA', '$406', '$560', '$586', '$5DE', '$5E2']
       ... and 15 more
  V4: Modified at 24 locations
       Addresses: ['$30E', '$348', '$402', '$504', '$528', '$570', '$5D8', '$71E']
       ... and 16 more
  V5: Modified at 28 locations
       Addresses: ['$30A', '$334', '$336', '$3EC', '$452', '$4C2', '$4DC', '$4EA']
       ... and 20 more
  V6: Modified at 27 locations
       Addresses: ['$22C', '$28A', '$312', '$3BC', '$3C6', '$460', '$47E', '$56C']
       ... and 19 more
  V7: Modified at 26 locations
       Addresses: ['$296', '$350', '$386', '$514', '$51A', '$58A', '$638', '$78A']
       ... and 18 more

CONTROL FLOW ANALYSIS:
  191 control transfers detected:
    $20E ‚Üí $E09
    $226 ‚Üí $336
    $248 ‚Üí $955
    $24E ‚Üí $092 (LOOP)
    $25C ‚Üí $32A
    ... and 186 more transfers
  Potential sorting loops: 103 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  257 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 22 instructions
      $20C: RND  V3, #B8      ; V3 = random() AND $B8
      $3E2: LD   V3, #4A      ; Load $4A into V3
      $3EA: ADD  V3, VC       ; V3 = (V3 + VC) & 0xFF, VF = carry
      ... and 19 more
    Compares sorted registers V[7]: 15 instructions
      $224: SNE  V7, #95      ; Skip next instruction if V7 != $95
      $4A8: SNE  V7, #66      ; Skip next instruction if V7 != $66
      $4BC: SNE  V7, #D2      ; Skip next instruction if V7 != $D2
      ... and 12 more
    Modifies sorted registers V[6]: 26 instructions
      $22C: LD   V6, #C9      ; Load $C9 into V6
      $28A: LD   V6, #D9      ; Load $D9 into V6
      $312: RND  V6, #CE      ; V6 = random() AND $CE
      ... and 23 more
    Modifies sorted registers V[2]: 20 instructions
      $230: RND  V2, #64      ; V2 = random() AND $64
      $244: LD   V2, #DA      ; Load $DA into V2
      $308: LD   V2, #96      ; Load $96 into V2
      ... and 17 more
    Compares sorted registers V[3]: 17 instructions
      $234: SE   V3, #B1      ; Skip next instruction if V3 == $B1
      $262: SNE  V3, #1E      ; Skip next instruction if V3 != $1E
      $3DA: SNE  V3, #7E      ; Skip next instruction if V3 != $7E
      ... and 14 more
    Compares sorted registers V[5]: 18 instructions
      $252: SNE  V5, VA       ; Skip next instruction if V5 != VA
      $598: SE   V1, V5       ; Skip next instruction if V1 == V5
      $678: SNE  V5, #13      ; Skip next instruction if V5 != $13
      ... and 15 more
    Compares sorted registers V[2]: 21 instructions
      $284: SNE  V2, #33      ; Skip next instruction if V2 != $33
      $37A: SNE  V2, #FF      ; Skip next instruction if V2 != $FF
      $3A0: SE   V2, #63      ; Skip next instruction if V2 == $63
      ... and 18 more
    Modifies sorted registers V[7]: 25 instructions
      $296: LD   V7, DT       ; Load delay timer into V7
      $350: LD   V7, #04      ; Load $04 into V7
      $386: LD   V7, #03      ; Load $03 into V7
      ... and 22 more
    Compares sorted registers V[6]: 12 instructions
      $2A2: SNE  V6, #CB      ; Skip next instruction if V6 != $CB
      $428: SNE  VC, V6       ; Skip next instruction if VC != V6
      $554: SNE  V6, #30      ; Skip next instruction if V6 != $30
      ... and 9 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $2A6: SUB  V8, V4       ; V8 = (V8 - V4) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 1 instructions
      $2DA: SUBN VB, V2       ; VB = (V2 - VB) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4]: 16 instructions
      $2EC: SNE  V4, #C7      ; Skip next instruction if V4 != $C7
      $30C: SE   V4, #6A      ; Skip next instruction if V4 == $6A
      $3CC: SE   V4, #6C      ; Skip next instruction if V4 == $6C
      ... and 13 more
    Modifies sorted registers V[5]: 27 instructions
      $30A: RND  V5, #3D      ; V5 = random() AND $3D
      $334: SUBN V5, V9       ; V5 = (V9 - V5) & 0xFF, VF = NOT borrow
      $336: SUB  V5, VF       ; V5 = (V5 - VF) & 0xFF, VF = NOT borrow
      ... and 24 more
    Modifies sorted registers V[4]: 23 instructions
      $30E: ADD  V4, #9F      ; Add $9F to V4 (V4 = (V4 + $9F) & 0xFF)
      $348: RND  V4, #B5      ; V4 = random() AND $B5
      $402: XOR  V4, VF       ; V4 = V4 XOR VF, VF = 0
      ... and 20 more
    Arithmetic on sorted registers V[5]: 2 instructions
      $314: SUB  V1, V5       ; V1 = (V1 - V5) & 0xFF, VF = NOT borrow
      $A1A: SUBN V0, V5       ; V0 = (V5 - V0) & 0xFF, VF = NOT borrow
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $384: XOR  VC, V2       ; VC = VC XOR V2, VF = 0
    Compares sorted registers V[2, 4]: 1 instructions
      $580: SNE  V4, V2       ; Skip next instruction if V4 != V2
    Arithmetic on sorted registers V[3]: 2 instructions
      $610: ADD  V8, V3       ; V8 = (V8 + V3) & 0xFF, VF = carry
      $BA2: ADD  VD, V3       ; VD = (VD + V3) & 0xFF, VF = carry
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $A26: AND  V9, V7       ; V9 = V9 AND V7, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $A74: OR   V1, V4       ; V1 = V1 OR V4, VF = 0
    Compares sorted registers V[3, 6]: 1 instructions
      $B1A: SE   V3, V6       ; Skip next instruction if V3 == V6
    Arithmetic on sorted registers V[6]: 1 instructions
      $C04: SUBN V1, V6       ; V1 = (V6 - V1) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $C5C: LD   VD, [I]      ; Load V0-VD from [I], then I += 14
    Register transfer involving V[2]: 2 instructions
      $E7A: LD   VC, V2       ; Load V2 into VC
      $F6E: LD   VD, V2       ; Load V2 into VD

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 501 (28.0%)
    LD: 228 (12.7%)
    JP: 200 (11.2%)
    RND: 130 (7.3%)
    SE: 125 (7.0%)
    SNE: 121 (6.8%)
    DRW: 117 (6.5%)
    ADD: 114 (6.4%)
    NOP: 113 (6.3%)
    CALL: 103 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 639
  Based on: 257 sorting instructions + 191 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3363D01_V2-V7_L6_ASC_C279_4814e5cb.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 20.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
    ‚úì Found 7 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.2% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 122 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [3, 4, 5, 6, 7, 8]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [1, 0, 3, 4, 5, 6, 7, 8]
  Changes: V0: 8‚Üí1, V1: 3‚Üí0, V2: 6‚Üí3, V3: 1‚Üí4, V4: 7‚Üí5, V5: 2‚Üí6, V6: 5‚Üí7, V7: 4‚Üí8
  ‚úì Correct initial test pattern detected
  Achievement cycle: 279

CUDA EXECUTION STATISTICS:
  Total register operations: 12
  Register reads: 122
  Register writes: 196
  Register writes per cycle: 0.703

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$26C', '$28E', '$29C', '$2BA', '$2DE', '$37A', '$3A8', '$5B6']
       ... and 15 more
  V1: Modified at 31 locations
       Addresses: ['$20C', '$2E2', '$388', '$426', '$4D4', '$568', '$574', '$5D8']
       ... and 23 more
  V2: Modified at 31 locations
       Addresses: ['$2E8', '$47C', '$4C4', '$536', '$65E', '$7F2', '$7FA', '$856']
       ... and 23 more
  V3: Modified at 26 locations
       Addresses: ['$3D6', '$484', '$4B8', '$4EE', '$5F0', '$634', '$6CC', '$71E']
       ... and 18 more
  V4: Modified at 26 locations
       Addresses: ['$21C', '$3BE', '$4C8', '$5A0', '$5A8', '$616', '$738', '$746']
       ... and 18 more
  V5: Modified at 29 locations
       Addresses: ['$37E', '$3E4', '$430', '$54A', '$570', '$590', '$5A6', '$722']
       ... and 21 more
  V6: Modified at 31 locations
       Addresses: ['$212', '$2C0', '$2D4', '$334', '$366', '$3BA', '$454', '$4F6']
       ... and 23 more
  V7: Modified at 27 locations
       Addresses: ['$202', '$2CA', '$3B0', '$46A', '$54C', '$556', '$5AE', '$654']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  220 control transfers detected:
    $200 ‚Üí $EE9
    $232 ‚Üí $4E7
    $246 ‚Üí $C59
    $254 ‚Üí $DFA
    $25E ‚Üí $D47
    ... and 215 more transfers
  Potential sorting loops: 116 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  272 instructions identified as sorting-related:
    Modifies sorted registers V[7]: 25 instructions
      $202: ADD  V7, #25      ; Add $25 to V7 (V7 = (V7 + $25) & 0xFF)
      $2CA: LD   V7, #A9      ; Load $A9 into V7
      $3B0: ADD  V7, #EA      ; Add $EA to V7 (V7 = (V7 + $EA) & 0xFF)
      ... and 22 more
    Modifies sorted registers V[6]: 29 instructions
      $212: LD   V6, #20      ; Load $20 into V6
      $2C0: RND  V6, #F2      ; V6 = random() AND $F2
      $2D4: RND  V6, #6B      ; V6 = random() AND $6B
      ... and 26 more
    Modifies sorted registers V[4]: 24 instructions
      $21C: AND  V4, V4       ; V4 = V4 AND V4, VF = 0
      $3BE: ADD  V4, #39      ; Add $39 to V4 (V4 = (V4 + $39) & 0xFF)
      $4C8: ADD  V4, #CD      ; Add $CD to V4 (V4 = (V4 + $CD) & 0xFF)
      ... and 21 more
    Compares sorted registers V[2]: 14 instructions
      $23C: SE   V2, #D0      ; Skip next instruction if V2 == $D0
      $25A: SE   V2, #E3      ; Skip next instruction if V2 == $E3
      $272: SE   V2, #3B      ; Skip next instruction if V2 == $3B
      ... and 11 more
    Compares sorted registers V[4]: 9 instructions
      $248: SNE  V4, #A7      ; Skip next instruction if V4 != $A7
      $290: SNE  V4, #CA      ; Skip next instruction if V4 != $CA
      $3DE: SE   V4, #57      ; Skip next instruction if V4 == $57
      ... and 6 more
    Compares sorted registers V[7]: 15 instructions
      $280: SE   V7, #D0      ; Skip next instruction if V7 == $D0
      $2A4: SE   V7, #F2      ; Skip next instruction if V7 == $F2
      $2FE: SE   V7, #29      ; Skip next instruction if V7 == $29
      ... and 12 more
    Compares sorted registers V[6]: 17 instructions
      $29A: SNE  V6, V8       ; Skip next instruction if V6 != V8
      $2F2: SNE  V6, #D5      ; Skip next instruction if V6 != $D5
      $348: SE   V6, #96      ; Skip next instruction if V6 == $96
      ... and 14 more
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $2B6: OR   VA, V4       ; VA = VA OR V4, VF = 0
      $874: OR   V1, V4       ; V1 = V1 OR V4, VF = 0
    Compares sorted registers V[5]: 16 instructions
      $2D2: SNE  V5, #33      ; Skip next instruction if V5 != $33
      $32E: SNE  V5, #D8      ; Skip next instruction if V5 != $D8
      $358: SE   V5, #B7      ; Skip next instruction if V5 == $B7
      ... and 13 more
    Modifies sorted registers V[2]: 29 instructions
      $2E8: ADD  V2, #60      ; Add $60 to V2 (V2 = (V2 + $60) & 0xFF)
      $47C: ADD  V2, #40      ; Add $40 to V2 (V2 = (V2 + $40) & 0xFF)
      $4C4: ADD  V2, #65      ; Add $65 to V2 (V2 = (V2 + $65) & 0xFF)
      ... and 26 more
    Compares sorted registers V[3]: 17 instructions
      $2F0: SE   V3, #19      ; Skip next instruction if V3 == $19
      $38C: SNE  V3, #A7      ; Skip next instruction if V3 != $A7
      $3CC: SE   V3, #AE      ; Skip next instruction if V3 == $AE
      ... and 14 more
    Arithmetic on sorted registers V[7]: 1 instructions
      $2FA: SUBN VB, V7       ; VB = (V7 - VB) & 0xFF, VF = NOT borrow
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $312: OR   VC, V2       ; VC = VC OR V2, VF = 0
    Arithmetic on sorted registers V[2]: 3 instructions
      $344: SUB  VF, V2       ; VF = (VF - V2) & 0xFF, VF = NOT borrow
      $6C8: SUB  VE, V2       ; VE = (VE - V2) & 0xFF, VF = NOT borrow
      $868: ADD  VA, V2       ; VA = (VA + V2) & 0xFF, VF = carry
    Modifies sorted registers V[5]: 27 instructions
      $37E: RND  V5, #6A      ; V5 = random() AND $6A
      $3E4: RND  V5, #D5      ; V5 = random() AND $D5
      $430: LD   V5, #A8      ; Load $A8 into V5
      ... and 24 more
    Arithmetic on sorted registers V[6]: 5 instructions
      $388: SUB  V1, V6       ; V1 = (V1 - V6) & 0xFF, VF = NOT borrow
      $7DE: SUBN VD, V6       ; VD = (V6 - VD) & 0xFF, VF = NOT borrow
      $A6C: SUBN VC, V6       ; VC = (V6 - VC) & 0xFF, VF = NOT borrow
      ... and 2 more
    Modifies sorted registers V[3]: 24 instructions
      $3D6: RND  V3, #3A      ; V3 = random() AND $3A
      $484: RND  V3, #C9      ; V3 = random() AND $C9
      $4B8: RND  V3, #7D      ; V3 = random() AND $7D
      ... and 21 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $4C6: SUB  VC, V4       ; VC = (VC - V4) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 3 instructions
      $62A: XOR  V8, V3       ; V8 = V8 XOR V3, VF = 0
      $8B0: AND  V8, V3       ; V8 = V8 AND V3, VF = 0
      $F24: AND  VE, V3       ; VE = VE AND V3, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $6AA: SUBN V0, V3       ; V0 = (V3 - V0) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 6]: 1 instructions
      $93A: SE   V2, V6       ; Skip next instruction if V2 == V6
    Compares sorted registers V[3, 4]: 1 instructions
      $B26: SE   V4, V3       ; Skip next instruction if V4 == V3
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $C1A: AND  V0, V6       ; V0 = V0 AND V6, VF = 0
      $D40: AND  V1, V6       ; V1 = V1 AND V6, VF = 0
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 2 instructions
      $CCA: LD   VD, [I]      ; Load V0-VD from [I], then I += 14
      $D6C: LD   VD, [I]      ; Load V0-VD from [I], then I += 14
    Compares sorted registers V[5, 6]: 1 instructions
      $DD8: SE   V5, V6       ; Skip next instruction if V5 == V6
    Register transfer involving V[6]: 1 instructions
      $DFA: LD   VC, V6       ; Load V6 into VC
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $FD4: LD   [I], VE      ; Store V0-VE at [I], then I += 15

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 464 (25.9%)
    LD: 231 (12.9%)
    JP: 219 (12.2%)
    SE: 131 (7.3%)
    DRW: 126 (7.0%)
    RND: 122 (6.8%)
    NOP: 118 (6.6%)
    ADD: 111 (6.2%)
    CALL: 108 (6.0%)
    SNE: 103 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 712
  Based on: 272 sorting instructions + 220 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3752D01_V2-V7_L6_DES_C69_701fb312.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 20.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.6% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 115 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [16, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí16, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 69

CUDA EXECUTION STATISTICS:
  Total register operations: 2
  Register reads: 17
  Register writes: 11
  Register writes per cycle: 0.159

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 28 locations
       Addresses: ['$28C', '$362', '$520', '$57A', '$5B2', '$5F6', '$684', '$6D6']
       ... and 20 more
  V1: Modified at 18 locations
       Addresses: ['$290', '$306', '$58E', '$6F8', '$82E', '$878', '$8EA', '$920']
       ... and 10 more
  V2: Modified at 33 locations
       Addresses: ['$244', '$27A', '$284', '$2F6', '$344', '$45A', '$48C', '$48E']
       ... and 25 more
  V3: Modified at 26 locations
       Addresses: ['$30C', '$34C', '$3BE', '$3D2', '$446', '$4F6', '$5CA', '$686']
       ... and 18 more
  V4: Modified at 28 locations
       Addresses: ['$242', '$2E0', '$314', '$332', '$36A', '$3EE', '$45E', '$470']
       ... and 20 more
  V5: Modified at 31 locations
       Addresses: ['$216', '$300', '$352', '$36C', '$38A', '$420', '$476', '$4B6']
       ... and 23 more
  V6: Modified at 28 locations
       Addresses: ['$212', '$2C0', '$3C0', '$3CE', '$4AA', '$526', '$53E', '$558']
       ... and 20 more
  V7: Modified at 23 locations
       Addresses: ['$254', '$2BC', '$2EA', '$4CA', '$622', '$6C0', '$6F4', '$822']
       ... and 15 more

CONTROL FLOW ANALYSIS:
  220 control transfers detected:
    $200 ‚Üí $E26
    $20C ‚Üí $4B8
    $220 ‚Üí $A7E
    $222 ‚Üí $332
    $224 ‚Üí $88D
    ... and 215 more transfers
  Potential sorting loops: 125 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  279 instructions identified as sorting-related:
    Compares sorted registers V[5]: 14 instructions
      $204: SNE  V5, #7A      ; Skip next instruction if V5 != $7A
      $356: SE   V5, #DC      ; Skip next instruction if V5 == $DC
      $35E: SNE  V5, #A2      ; Skip next instruction if V5 != $A2
      ... and 11 more
    Compares sorted registers V[2]: 15 instructions
      $210: SE   V2, #48      ; Skip next instruction if V2 == $48
      $266: SNE  V2, #C3      ; Skip next instruction if V2 != $C3
      $2AA: SNE  V2, #B9      ; Skip next instruction if V2 != $B9
      ... and 12 more
    Modifies sorted registers V[6]: 27 instructions
      $212: ADD  V6, V6       ; V6 = (V6 + V6) & 0xFF, VF = carry
      $2C0: SUB  V6, V5       ; V6 = (V6 - V5) & 0xFF, VF = NOT borrow
      $3C0: RND  V6, #31      ; V6 = random() AND $31
      ... and 24 more
    Modifies sorted registers V[5]: 30 instructions
      $216: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      $300: LD   V5, #45      ; Load $45 into V5
      $352: ADD  V5, #03      ; Add $03 to V5 (V5 = (V5 + $03) & 0xFF)
      ... and 27 more
    Compares sorted registers V[3]: 17 instructions
      $232: SE   V3, #C7      ; Skip next instruction if V3 == $C7
      $2E8: SE   V3, #E1      ; Skip next instruction if V3 == $E1
      $3D4: SE   V3, #49      ; Skip next instruction if V3 == $49
      ... and 14 more
    Compares sorted registers V[4]: 15 instructions
      $240: SNE  V4, #6C      ; Skip next instruction if V4 != $6C
      $2F4: SE   V4, #7E      ; Skip next instruction if V4 == $7E
      $358: SNE  V4, #17      ; Skip next instruction if V4 != $17
      ... and 12 more
    Modifies sorted registers V[4]: 27 instructions
      $242: XOR  V4, V2       ; V4 = V4 XOR V2, VF = 0
      $2E0: ADD  V4, VE       ; V4 = (V4 + VE) & 0xFF, VF = carry
      $314: ADD  V4, #3F      ; Add $3F to V4 (V4 = (V4 + $3F) & 0xFF)
      ... and 24 more
    Modifies sorted registers V[2]: 32 instructions
      $244: ADD  V2, VA       ; V2 = (V2 + VA) & 0xFF, VF = carry
      $27A: LD   V2, #77      ; Load $77 into V2
      $284: RND  V2, #06      ; V2 = random() AND $06
      ... and 29 more
    Modifies sorted registers V[7]: 22 instructions
      $254: SHL  V7           ; V7 = (V7 << 1) & 0xFF, VF = MSB
      $2BC: SHL  V7           ; V7 = (V7 << 1) & 0xFF, VF = MSB
      $2EA: ADD  V7, #F1      ; Add $F1 to V7 (V7 = (V7 + $F1) & 0xFF)
      ... and 19 more
    Compares sorted registers V[7]: 16 instructions
      $256: SNE  V7, #B4      ; Skip next instruction if V7 != $B4
      $25A: SNE  V7, #73      ; Skip next instruction if V7 != $73
      $37A: SE   V7, #77      ; Skip next instruction if V7 == $77
      ... and 13 more
    Compares sorted registers V[6]: 17 instructions
      $272: SE   V6, #90      ; Skip next instruction if V6 == $90
      $2A0: SE   V6, VF       ; Skip next instruction if V6 == VF
      $3A8: SE   V6, #C1      ; Skip next instruction if V6 == $C1
      ... and 14 more
    Modifies sorted registers V[3]: 25 instructions
      $30C: ADD  V3, #5B      ; Add $5B to V3 (V3 = (V3 + $5B) & 0xFF)
      $34C: OR   V3, V7       ; V3 = V3 OR V7, VF = 0
      $3BE: LD   V3, #B1      ; Load $B1 into V3
      ... and 22 more
    Arithmetic on sorted registers V[2]: 5 instructions
      $350: SUB  V9, V2       ; V9 = (V9 - V2) & 0xFF, VF = NOT borrow
      $67A: SUB  VA, V2       ; VA = (VA - V2) & 0xFF, VF = NOT borrow
      $C68: SUB  VA, V2       ; VA = (VA - V2) & 0xFF, VF = NOT borrow
      ... and 2 more
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $424: XOR  VE, V6       ; VE = VE XOR V6, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $58E: SUBN V1, V4       ; V1 = (V4 - V1) & 0xFF, VF = NOT borrow
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $6D6: XOR  V0, V7       ; V0 = V0 XOR V7, VF = 0
    Arithmetic on sorted registers V[5]: 1 instructions
      $80E: SUBN VA, V5       ; VA = (V5 - VA) & 0xFF, VF = NOT borrow
    Register transfer involving V[2]: 1 instructions
      $866: LD   ST, V2       ; Load V2 into sound timer
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $870: XOR  V9, V5       ; V9 = V9 XOR V5, VF = 0
      $BFA: XOR  V9, V5       ; V9 = V9 XOR V5, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $8BA: XOR  VC, V4       ; VC = VC XOR V4, VF = 0
      $DF2: OR   VF, V4       ; VF = VF OR V4, VF = 0
    Compares sorted registers V[5, 6]: 1 instructions
      $8C0: SE   V6, V5       ; Skip next instruction if V6 == V5
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $900: LD   [I], VB      ; Store V0-VB at [I], then I += 12
    Compares sorted registers V[3, 7]: 1 instructions
      $958: SE   V7, V3       ; Skip next instruction if V7 == V3
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $9A4: LD   VE, [I]      ; Load V0-VE from [I], then I += 15
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $A30: AND  VB, V3       ; VB = VB AND V3, VF = 0
      $B78: XOR  VC, V3       ; VC = VC XOR V3, VF = 0
    Arithmetic on sorted registers V[7]: 2 instructions
      $D20: SUB  VD, V7       ; VD = (VD - V7) & 0xFF, VF = NOT borrow
      $E58: SUB  V1, V7       ; V1 = (V1 - V7) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 469 (26.2%)
    LD: 249 (13.9%)
    JP: 213 (11.9%)
    SE: 130 (7.3%)
    ADD: 118 (6.6%)
    NOP: 117 (6.5%)
    RND: 115 (6.4%)
    SNE: 107 (6.0%)
    DRW: 107 (6.0%)
    CALL: 102 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 719
  Based on: 279 sorting instructions + 220 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3926D01_V2-V7_L6_ASC_C162_e5ae295d.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 97 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 207, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí207, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 162

CUDA EXECUTION STATISTICS:
  Total register operations: 20
  Register reads: 106
  Register writes: 168
  Register writes per cycle: 1.037

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 29 locations
       Addresses: ['$286', '$368', '$3CC', '$520', '$52E', '$546', '$58A', '$596']
       ... and 21 more
  V1: Modified at 38 locations
       Addresses: ['$228', '$302', '$304', '$392', '$440', '$446', '$53A', '$630']
       ... and 30 more
  V2: Modified at 25 locations
       Addresses: ['$2E4', '$3DC', '$600', '$70A', '$754', '$840', '$894', '$8AC']
       ... and 17 more
  V3: Modified at 22 locations
       Addresses: ['$236', '$37E', '$404', '$45A', '$460', '$4C8', '$754', '$75C']
       ... and 14 more
  V4: Modified at 26 locations
       Addresses: ['$264', '$39A', '$3F4', '$4C0', '$56E', '$57A', '$652', '$6A2']
       ... and 18 more
  V5: Modified at 17 locations
       Addresses: ['$206', '$20C', '$366', '$4DC', '$6D6', '$72E', '$754', '$8EA']
       ... and 9 more
  V6: Modified at 30 locations
       Addresses: ['$22A', '$2D0', '$3A0', '$3FC', '$47C', '$4FC', '$686', '$6EC']
       ... and 22 more
  V7: Modified at 24 locations
       Addresses: ['$222', '$328', '$456', '$46A', '$4B8', '$558', '$64C', '$68C']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  233 control transfers detected:
    $208 ‚Üí $C69
    $216 ‚Üí $6E1
    $218 ‚Üí $73F
    $238 ‚Üí $FAB
    $23C ‚Üí $2A0
    ... and 228 more transfers
  Potential sorting loops: 125 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  225 instructions identified as sorting-related:
    Compares sorted registers V[7]: 17 instructions
      $204: SE   V7, #3C      ; Skip next instruction if V7 == $3C
      $23E: SNE  V7, #74      ; Skip next instruction if V7 != $74
      $2CE: SE   V7, #08      ; Skip next instruction if V7 == $08
      ... and 14 more
    Modifies sorted registers V[5]: 15 instructions
      $206: LD   V5, #F5      ; Load $F5 into V5
      $20C: LD   V5, #19      ; Load $19 into V5
      $366: LD   V5, #7B      ; Load $7B into V5
      ... and 12 more
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $214: AND  VF, V7       ; VF = VF AND V7, VF = 0
    Modifies sorted registers V[7]: 23 instructions
      $222: ADD  V7, #2D      ; Add $2D to V7 (V7 = (V7 + $2D) & 0xFF)
      $328: ADD  V7, VB       ; V7 = (V7 + VB) & 0xFF, VF = carry
      $456: ADD  V7, #FB      ; Add $FB to V7 (V7 = (V7 + $FB) & 0xFF)
      ... and 20 more
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $226: OR   VB, V6       ; VB = VB OR V6, VF = 0
      $564: OR   V9, V6       ; V9 = V9 OR V6, VF = 0
    Modifies sorted registers V[6]: 29 instructions
      $22A: LD   V6, #F2      ; Load $F2 into V6
      $2D0: RND  V6, #95      ; V6 = random() AND $95
      $3A0: ADD  V6, #A3      ; Add $A3 to V6 (V6 = (V6 + $A3) & 0xFF)
      ... and 26 more
    Modifies sorted registers V[3]: 20 instructions
      $236: LD   V3, #D2      ; Load $D2 into V3
      $37E: ADD  V3, #34      ; Add $34 to V3 (V3 = (V3 + $34) & 0xFF)
      $404: RND  V3, #CE      ; V3 = random() AND $CE
      ... and 17 more
    Compares sorted registers V[4]: 10 instructions
      $25E: SNE  V4, #A9      ; Skip next instruction if V4 != $A9
      $5D8: SNE  V4, #5B      ; Skip next instruction if V4 != $5B
      $63A: SNE  V4, #18      ; Skip next instruction if V4 != $18
      ... and 7 more
    Modifies sorted registers V[4]: 24 instructions
      $264: ADD  V4, #3F      ; Add $3F to V4 (V4 = (V4 + $3F) & 0xFF)
      $39A: ADD  V4, #A8      ; Add $A8 to V4 (V4 = (V4 + $A8) & 0xFF)
      $3F4: LD   V4, #98      ; Load $98 into V4
      ... and 21 more
    Compares sorted registers V[6]: 12 instructions
      $292: SE   V6, VC       ; Skip next instruction if V6 == VC
      $342: SE   V6, #C0      ; Skip next instruction if V6 == $C0
      $428: SNE  V6, #F5      ; Skip next instruction if V6 != $F5
      ... and 9 more
    Modifies sorted registers V[2]: 23 instructions
      $2E4: RND  V2, #A7      ; V2 = random() AND $A7
      $3DC: LD   V2, #65      ; Load $65 into V2
      $600: ADD  V2, #6B      ; Add $6B to V2 (V2 = (V2 + $6B) & 0xFF)
      ... and 20 more
    Arithmetic on sorted registers V[3]: 3 instructions
      $334: SUB  VE, V3       ; VE = (VE - V3) & 0xFF, VF = NOT borrow
      $710: SUB  V1, V3       ; V1 = (V1 - V3) & 0xFF, VF = NOT borrow
      $EE4: ADD  VD, V3       ; VD = (VD + V3) & 0xFF, VF = carry
    Compares sorted registers V[5]: 12 instructions
      $350: SE   V5, #2B      ; Skip next instruction if V5 == $2B
      $648: SE   V5, #D2      ; Skip next instruction if V5 == $D2
      $6F4: SE   V5, #8B      ; Skip next instruction if V5 == $8B
      ... and 9 more
    Compares sorted registers V[2]: 9 instructions
      $388: SNE  V2, #B5      ; Skip next instruction if V2 != $B5
      $3C6: SNE  V2, #B6      ; Skip next instruction if V2 != $B6
      $518: SE   V2, #5A      ; Skip next instruction if V2 == $5A
      ... and 6 more
    Compares sorted registers V[3]: 19 instructions
      $3BE: SNE  V3, #4D      ; Skip next instruction if V3 != $4D
      $3D0: SNE  V3, #BF      ; Skip next instruction if V3 != $BF
      $41C: SE   V3, #EA      ; Skip next instruction if V3 == $EA
      ... and 16 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $5BE: SUB  VC, V6       ; VC = (VC - V6) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $754: LD   V9, [I]      ; Load V0-V9 from [I], then I += 10
    Arithmetic on sorted registers V[2]: 1 instructions
      $7C2: ADD  V1, V2       ; V1 = (V1 + V2) & 0xFF, VF = carry
    Register transfer involving V[4]: 1 instructions
      $AF6: LD   DT, V4       ; Load V4 into delay timer
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $C4A: OR   V1, V2       ; V1 = V1 OR V2, VF = 0
    Modifies sorted registers V[2, 3, 4, 5]: 1 instructions
      $EB4: LD   V5, [I]      ; Load V0-V5 from [I], then I += 6

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 475 (26.5%)
    LD: 252 (14.1%)
    JP: 217 (12.1%)
    SE: 134 (7.5%)
    CALL: 122 (6.8%)
    ADD: 119 (6.6%)
    SNE: 110 (6.1%)
    DRW: 110 (6.1%)
    NOP: 108 (6.0%)
    RND: 97 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 691
  Based on: 225 sorting instructions + 233 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3957D01_V2-V7_L6_DES_C741_80ee12ed.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 register comparisons in sorted range
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 135 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 84, 9, 8, 7, 6, 5, 4]
  Changes: V1: 3‚Üí84, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 741

CUDA EXECUTION STATISTICS:
  Total register operations: 57
  Register reads: 340
  Register writes: 426
  Register writes per cycle: 0.575

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 34 locations
       Addresses: ['$28A', '$2F4', '$30E', '$350', '$3CA', '$3E2', '$458', '$4F2']
       ... and 26 more
  V1: Modified at 30 locations
       Addresses: ['$214', '$346', '$372', '$38A', '$390', '$3EC', '$428', '$44A']
       ... and 22 more
  V2: Modified at 23 locations
       Addresses: ['$200', '$2A0', '$330', '$3F6', '$468', '$478', '$4DE', '$6D4']
       ... and 15 more
  V3: Modified at 23 locations
       Addresses: ['$204', '$252', '$328', '$39A', '$408', '$594', '$59E', '$674']
       ... and 15 more
  V4: Modified at 22 locations
       Addresses: ['$364', '$3B0', '$446', '$540', '$5B2', '$5F0', '$72C', '$792']
       ... and 14 more
  V5: Modified at 23 locations
       Addresses: ['$2C2', '$2EA', '$4A0', '$4B6', '$4E2', '$4EA', '$65E', '$688']
       ... and 15 more
  V6: Modified at 22 locations
       Addresses: ['$31A', '$34C', '$36E', '$38E', '$528', '$6C2', '$6D8', '$822']
       ... and 14 more
  V7: Modified at 24 locations
       Addresses: ['$356', '$360', '$388', '$3FC', '$4CA', '$51E', '$5CE', '$5D8']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  233 control transfers detected:
    $206 ‚Üí $E5D
    $208 ‚Üí $AC4
    $222 ‚Üí $DA7
    $232 ‚Üí $3E1
    $234 ‚Üí $897
    ... and 228 more transfers
  Potential sorting loops: 132 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  242 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 23 instructions
      $200: LD   V2, #3D      ; Load $3D into V2
      $2A0: ADD  V2, #2E      ; Add $2E to V2 (V2 = (V2 + $2E) & 0xFF)
      $330: AND  V2, VF       ; V2 = V2 AND VF, VF = 0
      ... and 20 more
    Modifies sorted registers V[3]: 23 instructions
      $204: LD   V3, #3B      ; Load $3B into V3
      $252: LD   V3, #21      ; Load $21 into V3
      $328: RND  V3, #9F      ; V3 = random() AND $9F
      ... and 20 more
    Compares sorted registers V[7]: 16 instructions
      $216: SE   V7, #D1      ; Skip next instruction if V7 == $D1
      $3D2: SE   V7, #64      ; Skip next instruction if V7 == $64
      $45E: SE   V7, #18      ; Skip next instruction if V7 == $18
      ... and 13 more
    Compares sorted registers V[4]: 7 instructions
      $21C: SNE  V4, #E4      ; Skip next instruction if V4 != $E4
      $254: SNE  V4, #83      ; Skip next instruction if V4 != $83
      $386: SE   V4, #83      ; Skip next instruction if V4 == $83
      ... and 4 more
    Compares sorted registers V[3]: 17 instructions
      $22A: SE   V3, #5D      ; Skip next instruction if V3 == $5D
      $3DE: SE   V3, #48      ; Skip next instruction if V3 == $48
      $4A4: SE   V3, #48      ; Skip next instruction if V3 == $48
      ... and 14 more
    Compares sorted registers V[6]: 21 instructions
      $268: SE   V6, #9A      ; Skip next instruction if V6 == $9A
      $536: SE   V6, #C2      ; Skip next instruction if V6 == $C2
      $53A: SE   V6, #27      ; Skip next instruction if V6 == $27
      ... and 18 more
    Modifies sorted registers V[5]: 23 instructions
      $2C2: ADD  V5, #02      ; Add $02 to V5 (V5 = (V5 + $02) & 0xFF)
      $2EA: RND  V5, #77      ; V5 = random() AND $77
      $4A0: LD   V5, #2F      ; Load $2F into V5
      ... and 20 more
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $2E8: XOR  V8, V6       ; V8 = V8 XOR V6, VF = 0
      $B54: XOR  V0, V6       ; V0 = V0 XOR V6, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $300: SUB  VD, V3       ; VD = (VD - V3) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[6]: 22 instructions
      $31A: ADD  V6, #D8      ; Add $D8 to V6 (V6 = (V6 + $D8) & 0xFF)
      $34C: RND  V6, #3A      ; V6 = random() AND $3A
      $36E: RND  V6, #7F      ; V6 = random() AND $7F
      ... and 19 more
    Compares sorted registers V[5]: 15 instructions
      $332: SNE  VC, V5       ; Skip next instruction if VC != V5
      $39C: SE   V5, #25      ; Skip next instruction if V5 == $25
      $5C8: SNE  V9, V5       ; Skip next instruction if V9 != V5
      ... and 12 more
    Arithmetic on sorted registers V[5]: 2 instructions
      $338: SUBN V8, V5       ; V8 = (V5 - V8) & 0xFF, VF = NOT borrow
      $9C8: SUB  V1, V5       ; V1 = (V1 - V5) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[7]: 24 instructions
      $356: LD   V7, #A7      ; Load $A7 into V7
      $360: LD   V7, #47      ; Load $47 into V7
      $388: LD   V7, #5F      ; Load $5F into V7
      ... and 21 more
    Modifies sorted registers V[4]: 22 instructions
      $364: RND  V4, #32      ; V4 = random() AND $32
      $3B0: AND  V4, V8       ; V4 = V4 AND V8, VF = 0
      $446: ADD  V4, #C3      ; Add $C3 to V4 (V4 = (V4 + $C3) & 0xFF)
      ... and 19 more
    Arithmetic on sorted registers V[7]: 2 instructions
      $3BA: SUBN VA, V7       ; VA = (V7 - VA) & 0xFF, VF = NOT borrow
      $87A: ADD  VC, V7       ; VC = (VC + V7) & 0xFF, VF = carry
    Compares sorted registers V[2]: 15 instructions
      $498: SNE  V2, #3E      ; Skip next instruction if V2 != $3E
      $4B0: SNE  V2, #E3      ; Skip next instruction if V2 != $E3
      $76C: SE   V2, #E0      ; Skip next instruction if V2 == $E0
      ... and 12 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $49A: AND  VA, V2       ; VA = VA AND V2, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $60E: AND  V0, V4       ; V0 = V0 AND V4, VF = 0
    Compares sorted registers V[6, 7]: 2 instructions
      $9B6: SE   V7, V6       ; Skip next instruction if V7 == V6
      $FA4: SNE  V7, V6       ; Skip next instruction if V7 != V6
    Arithmetic on sorted registers V[2]: 1 instructions
      $A06: SUB  VF, V2       ; VF = (VF - V2) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 5]: 1 instructions
      $AA4: SE   V5, V2       ; Skip next instruction if V5 == V2
    Compares sorted registers V[2, 4]: 1 instructions
      $DF6: SE   V2, V4       ; Skip next instruction if V2 == V4

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 464 (25.9%)
    LD: 227 (12.7%)
    JP: 217 (12.1%)
    CALL: 138 (7.7%)
    RND: 135 (7.5%)
    ADD: 132 (7.4%)
    SE: 120 (6.7%)
    NOP: 111 (6.2%)
    DRW: 105 (5.9%)
    SNE: 95 (5.3%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 708
  Based on: 242 sorting instructions + 233 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4086D01_V2-V7_L6_ASC_C570_5c2a9adb.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 107 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [226, 226, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí226, V1: 3‚Üí226, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 570

CUDA EXECUTION STATISTICS:
  Total register operations: 40
  Register reads: 359
  Register writes: 576
  Register writes per cycle: 1.011

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 24 locations
       Addresses: ['$202', '$248', '$288', '$2E8', '$2FA', '$350', '$606', '$7DC']
       ... and 16 more
  V1: Modified at 31 locations
       Addresses: ['$224', '$266', '$32A', '$3A2', '$3EA', '$464', '$494', '$4B0']
       ... and 23 more
  V2: Modified at 21 locations
       Addresses: ['$2F6', '$3C4', '$418', '$508', '$5AE', '$5E0', '$600', '$63A']
       ... and 13 more
  V3: Modified at 24 locations
       Addresses: ['$236', '$254', '$388', '$3B6', '$466', '$506', '$752', '$754']
       ... and 16 more
  V4: Modified at 26 locations
       Addresses: ['$23A', '$2B8', '$46E', '$4D4', '$4F0', '$71A', '$726', '$758']
       ... and 18 more
  V5: Modified at 20 locations
       Addresses: ['$210', '$244', '$264', '$2F0', '$34E', '$406', '$40E', '$52A']
       ... and 12 more
  V6: Modified at 25 locations
       Addresses: ['$360', '$3AA', '$434', '$4AE', '$510', '$5B2', '$5B4', '$5C2']
       ... and 17 more
  V7: Modified at 18 locations
       Addresses: ['$29C', '$2BA', '$372', '$3E0', '$4BC', '$578', '$5A2', '$5F6']
       ... and 10 more

CONTROL FLOW ANALYSIS:
  233 control transfers detected:
    $208 ‚Üí $D71
    $212 ‚Üí $235
    $242 ‚Üí $5F5
    $24A ‚Üí $7F0
    $24E ‚Üí $076 (LOOP)
    ... and 228 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  249 instructions identified as sorting-related:
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $202: OR   V0, V7       ; V0 = V0 OR V7, VF = 0
      $A40: XOR  V0, V7       ; V0 = V0 XOR V7, VF = 0
    Modifies sorted registers V[5]: 20 instructions
      $210: LD   V5, #CC      ; Load $CC into V5
      $244: RND  V5, #DD      ; V5 = random() AND $DD
      $264: RND  V5, #79      ; V5 = random() AND $79
      ... and 17 more
    Compares sorted registers V[3, 7]: 1 instructions
      $216: SNE  V3, V7       ; Skip next instruction if V3 != V7
    Compares sorted registers V[5]: 18 instructions
      $22A: SE   V5, #44      ; Skip next instruction if V5 == $44
      $24C: SNE  V5, #6D      ; Skip next instruction if V5 != $6D
      $396: SNE  V5, #CF      ; Skip next instruction if V5 != $CF
      ... and 15 more
    Modifies sorted registers V[3]: 24 instructions
      $236: ADD  V3, #A8      ; Add $A8 to V3 (V3 = (V3 + $A8) & 0xFF)
      $254: RND  V3, #72      ; V3 = random() AND $72
      $388: ADD  V3, #8D      ; Add $8D to V3 (V3 = (V3 + $8D) & 0xFF)
      ... and 21 more
    Modifies sorted registers V[4]: 26 instructions
      $23A: RND  V4, #75      ; V4 = random() AND $75
      $2B8: LD   V4, #D8      ; Load $D8 into V4
      $46E: SHL  V4           ; V4 = (V4 << 1) & 0xFF, VF = MSB
      ... and 23 more
    Compares sorted registers V[2]: 17 instructions
      $240: SNE  V2, #C8      ; Skip next instruction if V2 != $C8
      $27A: SNE  V2, #77      ; Skip next instruction if V2 != $77
      $2CE: SE   V9, V2       ; Skip next instruction if V9 == V2
      ... and 14 more
    Register transfer involving V[2]: 1 instructions
      $26C: LD   [I], V2      ; Store V0-V2 at [I], then I += 3
    Compares sorted registers V[3]: 11 instructions
      $276: SE   V3, #38      ; Skip next instruction if V3 == $38
      $2D2: SE   V3, #C6      ; Skip next instruction if V3 == $C6
      $2E0: SNE  V3, #9E      ; Skip next instruction if V3 != $9E
      ... and 8 more
    Modifies sorted registers V[7]: 18 instructions
      $29C: RND  V7, #22      ; V7 = random() AND $22
      $2BA: RND  V7, #73      ; V7 = random() AND $73
      $372: ADD  V7, #12      ; Add $12 to V7 (V7 = (V7 + $12) & 0xFF)
      ... and 15 more
    Compares sorted registers V[4]: 23 instructions
      $2CC: SNE  V4, #38      ; Skip next instruction if V4 != $38
      $36C: SE   V4, #6E      ; Skip next instruction if V4 == $6E
      $3D2: SNE  V4, V9       ; Skip next instruction if V4 != V9
      ... and 20 more
    Modifies sorted registers V[2]: 21 instructions
      $2F6: RND  V2, #F0      ; V2 = random() AND $F0
      $3C4: RND  V2, #CA      ; V2 = random() AND $CA
      $418: LD   V2, #3D      ; Load $3D into V2
      ... and 18 more
    Arithmetic on sorted registers V[5]: 1 instructions
      $2FE: SUBN VE, V5       ; VE = (V5 - VE) & 0xFF, VF = NOT borrow
    Compares sorted registers V[6]: 15 instructions
      $354: SE   V6, #75      ; Skip next instruction if V6 == $75
      $444: SE   V6, #FD      ; Skip next instruction if V6 == $FD
      $6A0: SE   V6, #4E      ; Skip next instruction if V6 == $4E
      ... and 12 more
    Modifies sorted registers V[6]: 25 instructions
      $360: RND  V6, #70      ; V6 = random() AND $70
      $3AA: SUBN V6, VE       ; V6 = (VE - V6) & 0xFF, VF = NOT borrow
      $434: ADD  V6, #18      ; Add $18 to V6 (V6 = (V6 + $18) & 0xFF)
      ... and 22 more
    Compares sorted registers V[7]: 16 instructions
      $460: SNE  V7, #9D      ; Skip next instruction if V7 != $9D
      $48C: SE   V7, #2E      ; Skip next instruction if V7 == $2E
      $536: SE   V7, #35      ; Skip next instruction if V7 == $35
      ... and 13 more
    Arithmetic on sorted registers V[6]: 2 instructions
      $64C: SUBN V8, V6       ; V8 = (V6 - V8) & 0xFF, VF = NOT borrow
      $820: ADD  VD, V6       ; VD = (VD + V6) & 0xFF, VF = carry
    Arithmetic on sorted registers V[3]: 2 instructions
      $750: SUBN V8, V3       ; V8 = (V3 - V8) & 0xFF, VF = NOT borrow
      $888: SUBN V8, V3       ; V8 = (V3 - V8) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 3]: 1 instructions
      $95C: SE   V3, V2       ; Skip next instruction if V3 == V2
    Compares sorted registers V[3, 4]: 1 instructions
      $B0E: SE   V3, V4       ; Skip next instruction if V3 == V4
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $DBA: OR   V1, V3       ; V1 = V1 OR V3, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $E98: AND  VA, V4       ; VA = VA AND V4, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $F40: OR   VF, V6       ; VF = VF OR V6, VF = 0
    Compares sorted registers V[2, 5]: 1 instructions
      $F50: SNE  V5, V2       ; Skip next instruction if V5 != V2

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 477 (26.6%)
    LD: 231 (12.9%)
    JP: 225 (12.6%)
    ADD: 128 (7.1%)
    SE: 124 (6.9%)
    CALL: 119 (6.6%)
    NOP: 119 (6.6%)
    SNE: 110 (6.1%)
    DRW: 108 (6.0%)
    RND: 107 (6.0%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 715
  Based on: 249 sorting instructions + 233 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4113D01_V2-V7_L6_ASC_C123_564aacd1.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 115 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 207, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí207, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 123

CUDA EXECUTION STATISTICS:
  Total register operations: 6
  Register reads: 73
  Register writes: 110
  Register writes per cycle: 0.894

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 25 locations
       Addresses: ['$282', '$2FE', '$304', '$380', '$3BC', '$3E0', '$3F4', '$4AA']
       ... and 17 more
  V1: Modified at 25 locations
       Addresses: ['$254', '$3F4', '$4B4', '$5BC', '$69E', '$6EC', '$764', '$78C']
       ... and 17 more
  V2: Modified at 23 locations
       Addresses: ['$22A', '$3E8', '$3F4', '$498', '$6EE', '$6FC', '$71A', '$7AE']
       ... and 15 more
  V3: Modified at 33 locations
       Addresses: ['$29C', '$2E0', '$2E2', '$3E6', '$3EA', '$3F4', '$4D8', '$52E']
       ... and 25 more
  V4: Modified at 24 locations
       Addresses: ['$25E', '$2AA', '$3F4', '$57A', '$610', '$69A', '$762', '$772']
       ... and 16 more
  V5: Modified at 32 locations
       Addresses: ['$212', '$274', '$32C', '$402', '$41E', '$4B6', '$574', '$582']
       ... and 24 more
  V6: Modified at 24 locations
       Addresses: ['$292', '$294', '$358', '$43A', '$452', '$454', '$540', '$5A4']
       ... and 16 more
  V7: Modified at 24 locations
       Addresses: ['$300', '$35A', '$398', '$3FE', '$40E', '$5D8', '$6CE', '$6F8']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  223 control transfers detected:
    $240 ‚Üí $279
    $24C ‚Üí $1FC (LOOP)
    $250 ‚Üí $FED
    $266 ‚Üí $4A9
    $26E ‚Üí $CC9
    ... and 218 more transfers
  Potential sorting loops: 142 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  256 instructions identified as sorting-related:
    Compares sorted registers V[6]: 15 instructions
      $204: SE   V6, #62      ; Skip next instruction if V6 == $62
      $24A: SNE  V6, #6D      ; Skip next instruction if V6 != $6D
      $2B2: SE   V6, #37      ; Skip next instruction if V6 == $37
      ... and 12 more
    Modifies sorted registers V[5]: 32 instructions
      $212: LD   V5, #D7      ; Load $D7 into V5
      $274: LD   V5, #A1      ; Load $A1 into V5
      $32C: ADD  V5, #D9      ; Add $D9 to V5 (V5 = (V5 + $D9) & 0xFF)
      ... and 29 more
    Arithmetic on sorted registers V[5]: 1 instructions
      $218: SUBN VC, V5       ; VC = (V5 - VC) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[2]: 22 instructions
      $22A: LD   V2, #35      ; Load $35 into V2
      $3E8: RND  V2, #B3      ; V2 = random() AND $B3
      $498: ADD  V2, V7       ; V2 = (V2 + V7) & 0xFF, VF = carry
      ... and 19 more
    Compares sorted registers V[7]: 13 instructions
      $248: SNE  V7, #9D      ; Skip next instruction if V7 != $9D
      $2B4: SNE  V7, #E3      ; Skip next instruction if V7 != $E3
      $44A: SNE  V7, #25      ; Skip next instruction if V7 != $25
      ... and 10 more
    Modifies sorted registers V[4]: 23 instructions
      $25E: LD   V4, #87      ; Load $87 into V4
      $2AA: LD   V4, #73      ; Load $73 into V4
      $57A: RND  V4, #0A      ; V4 = random() AND $0A
      ... and 20 more
    Compares sorted registers V[5]: 6 instructions
      $28E: SE   V5, #CA      ; Skip next instruction if V5 == $CA
      $2CC: SE   V5, #4D      ; Skip next instruction if V5 == $4D
      $420: SE   V5, #85      ; Skip next instruction if V5 == $85
      ... and 3 more
    Modifies sorted registers V[6]: 24 instructions
      $292: RND  V6, #24      ; V6 = random() AND $24
      $294: ADD  V6, #6C      ; Add $6C to V6 (V6 = (V6 + $6C) & 0xFF)
      $358: ADD  V6, #1A      ; Add $1A to V6 (V6 = (V6 + $1A) & 0xFF)
      ... and 21 more
    Modifies sorted registers V[3]: 32 instructions
      $29C: ADD  V3, #1F      ; Add $1F to V3 (V3 = (V3 + $1F) & 0xFF)
      $2E0: ADD  V3, #BC      ; Add $BC to V3 (V3 = (V3 + $BC) & 0xFF)
      $2E2: XOR  V3, VD       ; V3 = V3 XOR VD, VF = 0
      ... and 29 more
    Compares sorted registers V[4]: 21 instructions
      $2F2: SNE  V4, #FD      ; Skip next instruction if V4 != $FD
      $42C: SNE  V4, #17      ; Skip next instruction if V4 != $17
      $63C: SNE  V4, #B9      ; Skip next instruction if V4 != $B9
      ... and 18 more
    Modifies sorted registers V[7]: 24 instructions
      $300: LD   V7, #35      ; Load $35 into V7
      $35A: SHL  V7           ; V7 = (V7 << 1) & 0xFF, VF = MSB
      $398: AND  V7, VC       ; V7 = V7 AND VC, VF = 0
      ... and 21 more
    Compares sorted registers V[2]: 14 instructions
      $31C: SNE  V2, #89      ; Skip next instruction if V2 != $89
      $512: SNE  V2, #F4      ; Skip next instruction if V2 != $F4
      $5B6: SE   V2, #F0      ; Skip next instruction if V2 == $F0
      ... and 11 more
    Compares sorted registers V[3]: 15 instructions
      $324: SNE  V3, #60      ; Skip next instruction if V3 != $60
      $326: SNE  V3, #18      ; Skip next instruction if V3 != $18
      $45C: SNE  V3, #63      ; Skip next instruction if V3 != $63
      ... and 12 more
    Register transfer involving V[4]: 1 instructions
      $39C: LD   DT, V4       ; Load V4 into delay timer
    Modifies sorted registers V[2, 3, 4]: 1 instructions
      $3F4: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5
    Arithmetic on sorted registers V[7]: 1 instructions
      $49A: SUBN VF, V7       ; VF = (V7 - VF) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $67C: XOR  VB, V3       ; VB = VB XOR V3, VF = 0
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $92C: XOR  VB, V5       ; VB = VB XOR V5, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $A64: XOR  VC, V6       ; VC = VC XOR V6, VF = 0
      $E38: OR   VE, V6       ; VE = VE OR V6, VF = 0
    Register transfer involving V[6]: 1 instructions
      $AB8: LD   V0, V6       ; Load V6 into V0
    Register transfer involving V[2]: 1 instructions
      $B12: LD   V9, V2       ; Load V2 into V9
    Register transfer involving V[5]: 1 instructions
      $C48: LD   VD, V5       ; Load V5 into VD
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $CE8: LD   [I], VD      ; Store V0-VD at [I], then I += 14
    Compares sorted registers V[3, 4]: 1 instructions
      $D02: SE   V3, V4       ; Skip next instruction if V3 == V4
    Arithmetic on sorted registers V[2]: 1 instructions
      $D3A: SUBN VA, V2       ; VA = (V2 - VA) & 0xFF, VF = NOT borrow
    Compares sorted registers V[5, 7]: 1 instructions
      $D98: SNE  V5, V7       ; Skip next instruction if V5 != V7

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 470 (26.2%)
    LD: 243 (13.6%)
    JP: 213 (11.9%)
    ADD: 129 (7.2%)
    NOP: 123 (6.9%)
    CALL: 119 (6.6%)
    RND: 115 (6.4%)
    SE: 114 (6.4%)
    SNE: 107 (6.0%)
    DRW: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 702
  Based on: 256 sorting instructions + 223 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4194D01_V2-V7_L6_ASC_C327_37f001e6.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 115 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 4, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí4, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 327

CUDA EXECUTION STATISTICS:
  Total register operations: 26
  Register reads: 180
  Register writes: 176
  Register writes per cycle: 0.538

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 32 locations
       Addresses: ['$22C', '$252', '$2AE', '$33A', '$422', '$424', '$428', '$42E']
       ... and 24 more
  V1: Modified at 22 locations
       Addresses: ['$20E', '$214', '$2D4', '$42E', '$44C', '$498', '$4A8', '$4DA']
       ... and 14 more
  V2: Modified at 24 locations
       Addresses: ['$25A', '$3FE', '$402', '$42E', '$436', '$46A', '$48E', '$65A']
       ... and 16 more
  V3: Modified at 23 locations
       Addresses: ['$28E', '$326', '$42E', '$6D4', '$70C', '$716', '$7B6', '$7F0']
       ... and 15 more
  V4: Modified at 19 locations
       Addresses: ['$2FC', '$302', '$34C', '$42E', '$4D0', '$4EE', '$63C', '$64E']
       ... and 11 more
  V5: Modified at 24 locations
       Addresses: ['$310', '$3B0', '$3EC', '$41A', '$41C', '$470', '$4B8', '$580']
       ... and 16 more
  V6: Modified at 23 locations
       Addresses: ['$208', '$220', '$27C', '$298', '$2B2', '$322', '$3EE', '$4AA']
       ... and 15 more
  V7: Modified at 26 locations
       Addresses: ['$238', '$290', '$2BA', '$2C4', '$2DE', '$388', '$492', '$552']
       ... and 18 more

CONTROL FLOW ANALYSIS:
  245 control transfers detected:
    $210 ‚Üí $6D8
    $21A ‚Üí $0B4 (LOOP)
    $222 ‚Üí $3FC
    $234 ‚Üí $34F
    $236 ‚Üí $91D
    ... and 240 more transfers
  Potential sorting loops: 149 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  229 instructions identified as sorting-related:
    Modifies sorted registers V[6]: 23 instructions
      $208: RND  V6, #B5      ; V6 = random() AND $B5
      $220: LD   V6, #11      ; Load $11 into V6
      $27C: RND  V6, #31      ; V6 = random() AND $31
      ... and 20 more
    Compares sorted registers V[7]: 13 instructions
      $216: SE   V7, #7F      ; Skip next instruction if V7 == $7F
      $24E: SE   V7, VF       ; Skip next instruction if V7 == VF
      $51C: SNE  V7, #86      ; Skip next instruction if V7 != $86
      ... and 10 more
    Modifies sorted registers V[7]: 26 instructions
      $238: LD   V7, #74      ; Load $74 into V7
      $290: LD   V7, #C4      ; Load $C4 into V7
      $2BA: ADD  V7, #C2      ; Add $C2 to V7 (V7 = (V7 + $C2) & 0xFF)
      ... and 23 more
    Modifies sorted registers V[2]: 23 instructions
      $25A: SHR  V2           ; V2 = V2 >> 1, VF = LSB
      $3FE: ADD  V2, #44      ; Add $44 to V2 (V2 = (V2 + $44) & 0xFF)
      $402: ADD  V2, #89      ; Add $89 to V2 (V2 = (V2 + $89) & 0xFF)
      ... and 20 more
    Compares sorted registers V[3]: 17 instructions
      $28C: SE   V3, #56      ; Skip next instruction if V3 == $56
      $340: SNE  V3, #66      ; Skip next instruction if V3 != $66
      $50E: SE   V3, #39      ; Skip next instruction if V3 == $39
      ... and 14 more
    Modifies sorted registers V[3]: 22 instructions
      $28E: LD   V3, #06      ; Load $06 into V3
      $326: RND  V3, #04      ; V3 = random() AND $04
      $6D4: SUBN V3, V2       ; V3 = (V2 - V3) & 0xFF, VF = NOT borrow
      ... and 19 more
    Compares sorted registers V[2]: 15 instructions
      $294: SNE  V2, #75      ; Skip next instruction if V2 != $75
      $3A6: SE   V2, #E9      ; Skip next instruction if V2 == $E9
      $3EA: SE   V2, #A5      ; Skip next instruction if V2 == $A5
      ... and 12 more
    Compares sorted registers V[4]: 13 instructions
      $2D2: SE   V4, #07      ; Skip next instruction if V4 == $07
      $352: SNE  V4, #95      ; Skip next instruction if V4 != $95
      $3A8: SE   V4, #F6      ; Skip next instruction if V4 == $F6
      ... and 10 more
    Modifies sorted registers V[4]: 18 instructions
      $2FC: ADD  V4, #74      ; Add $74 to V4 (V4 = (V4 + $74) & 0xFF)
      $302: AND  V4, V3       ; V4 = V4 AND V3, VF = 0
      $34C: XOR  V4, V0       ; V4 = V4 XOR V0, VF = 0
      ... and 15 more
    Modifies sorted registers V[5]: 24 instructions
      $310: LD   V5, #BE      ; Load $BE into V5
      $3B0: ADD  V5, #C4      ; Add $C4 to V5 (V5 = (V5 + $C4) & 0xFF)
      $3EC: OR   V5, V6       ; V5 = V5 OR V6, VF = 0
      ... and 21 more
    Compares sorted registers V[5]: 13 instructions
      $3AA: SE   V5, #62      ; Skip next instruction if V5 == $62
      $4C2: SE   V5, #CA      ; Skip next instruction if V5 == $CA
      $4F4: SNE  V5, #25      ; Skip next instruction if V5 != $25
      ... and 10 more
    Modifies sorted registers V[2, 3, 4]: 1 instructions
      $42E: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5
    Compares sorted registers V[3, 6]: 1 instructions
      $460: SNE  V6, V3       ; Skip next instruction if V6 != V3
    Compares sorted registers V[6]: 9 instructions
      $47E: SE   V6, #00      ; Skip next instruction if V6 == $00
      $70E: SNE  V6, #BE      ; Skip next instruction if V6 != $BE
      $8B0: SE   V6, #DA      ; Skip next instruction if V6 == $DA
      ... and 6 more
    Register transfer involving V[3]: 1 instructions
      $556: LD   VC, V3       ; Load V3 into VC
    Arithmetic on sorted registers V[2]: 3 instructions
      $73C: SUB  VB, V2       ; VB = (VB - V2) & 0xFF, VF = NOT borrow
      $A1E: SUB  VA, V2       ; VA = (VA - V2) & 0xFF, VF = NOT borrow
      $ED8: SUB  V0, V2       ; V0 = (V0 - V2) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 4]: 2 instructions
      $788: SE   V4, V2       ; Skip next instruction if V4 == V2
      $7C4: SNE  V4, V2       ; Skip next instruction if V4 != V2
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $7AC: LD   [I], VC      ; Store V0-VC at [I], then I += 13
    Compares sorted registers V[2, 7]: 1 instructions
      $988: SE   V2, V7       ; Skip next instruction if V2 == V7
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $9BA: AND  VC, V4       ; VC = VC AND V4, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $C4C: AND  VC, V7       ; VC = VC AND V7, VF = 0
    Register transfer involving V[4]: 1 instructions
      $E6C: LD   B, V4        ; Store BCD of V4 at [I], [I+1], [I+2]

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 476 (26.6%)
    JP: 260 (14.5%)
    LD: 229 (12.8%)
    NOP: 130 (7.3%)
    SE: 120 (6.7%)
    RND: 115 (6.4%)
    CALL: 112 (6.2%)
    ADD: 108 (6.0%)
    SNE: 104 (5.8%)
    DRW: 96 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 719
  Based on: 229 sorting instructions + 245 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4253D01_V0-V5_L6_ASC_C192_680d77b2.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [223, 224, 225, 226, 227, 228] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [223, 224, 225, 226, 227, 228] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 96 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [223, 224, 225, 226, 227, 228]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V0-V5
  Start position: V0
  End position: V5
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 224, 225, 226, 227, 228, 0, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí224, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí0, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 192

CUDA EXECUTION STATISTICS:
  Total register operations: 10
  Register reads: 95
  Register writes: 187
  Register writes per cycle: 0.974

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$226', '$270', '$35C', '$408', '$44C', '$6AA', '$6CC', '$7B4']
       ... and 15 more
  V1: Modified at 27 locations
       Addresses: ['$204', '$2BA', '$33A', '$466', '$46E', '$4F2', '$538', '$5FE']
       ... and 19 more
  V2: Modified at 24 locations
       Addresses: ['$242', '$25E', '$3CA', '$3FE', '$416', '$4AE', '$57C', '$5B4']
       ... and 16 more
  V3: Modified at 20 locations
       Addresses: ['$340', '$34E', '$48A', '$4A4', '$506', '$6A2', '$740', '$890']
       ... and 12 more
  V4: Modified at 24 locations
       Addresses: ['$252', '$374', '$386', '$402', '$42C', '$462', '$4FE', '$62E']
       ... and 16 more
  V5: Modified at 24 locations
       Addresses: ['$220', '$274', '$356', '$380', '$3B2', '$56A', '$60E', '$632']
       ... and 16 more
  V6: Modified at 13 locations
       Addresses: ['$2A6', '$314', '$3D4', '$490', '$59E', '$8D2', '$B60', '$BCA']
       ... and 5 more
  V7: Modified at 21 locations
       Addresses: ['$474', '$4C0', '$4D6', '$50E', '$52A', '$7E6', '$8F2', '$9A6']
       ... and 13 more

CONTROL FLOW ANALYSIS:
  228 control transfers detected:
    $208 ‚Üí $562
    $218 ‚Üí $6D2
    $22C ‚Üí $9F5
    $230 ‚Üí $C5B
    $250 ‚Üí $E81
    ... and 223 more transfers
  Potential sorting loops: 145 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  255 instructions identified as sorting-related:
    Modifies sorted registers V[1]: 27 instructions
      $204: RND  V1, #48      ; V1 = random() AND $48
      $2BA: RND  V1, #97      ; V1 = random() AND $97
      $33A: ADD  V1, #B4      ; Add $B4 to V1 (V1 = (V1 + $B4) & 0xFF)
      ... and 24 more
    Modifies sorted registers V[5]: 24 instructions
      $220: RND  V5, #C4      ; V5 = random() AND $C4
      $274: LD   V5, #1D      ; Load $1D into V5
      $356: RND  V5, #34      ; V5 = random() AND $34
      ... and 21 more
    Modifies sorted registers V[0]: 23 instructions
      $226: RND  V0, #77      ; V0 = random() AND $77
      $270: LD   V0, #18      ; Load $18 into V0
      $35C: RND  V0, #CB      ; V0 = random() AND $CB
      ... and 20 more
    Modifies sorted registers V[2]: 24 instructions
      $242: ADD  V2, V8       ; V2 = (V2 + V8) & 0xFF, VF = carry
      $25E: LD   V2, #DC      ; Load $DC into V2
      $3CA: ADD  V2, #0B      ; Add $0B to V2 (V2 = (V2 + $0B) & 0xFF)
      ... and 21 more
    Compares sorted registers V[2]: 24 instructions
      $246: SE   V2, #03      ; Skip next instruction if V2 == $03
      $300: SE   V2, #7F      ; Skip next instruction if V2 == $7F
      $31E: SE   V2, #6D      ; Skip next instruction if V2 == $6D
      ... and 21 more
    Compares sorted registers V[5]: 14 instructions
      $24C: SE   V5, #2B      ; Skip next instruction if V5 == $2B
      $266: SNE  V5, #EE      ; Skip next instruction if V5 != $EE
      $318: SNE  V5, #14      ; Skip next instruction if V5 != $14
      ... and 11 more
    Modifies sorted registers V[4]: 24 instructions
      $252: LD   V4, #96      ; Load $96 into V4
      $374: ADD  V4, #00      ; Add $00 to V4 (V4 = (V4 + $00) & 0xFF)
      $386: LD   V4, #EB      ; Load $EB into V4
      ... and 21 more
    Compares sorted registers V[4]: 25 instructions
      $26A: SE   V4, #FB      ; Skip next instruction if V4 == $FB
      $310: SNE  V4, #F5      ; Skip next instruction if V4 != $F5
      $34A: SNE  V4, #D6      ; Skip next instruction if V4 != $D6
      ... and 22 more
    Compares sorted registers V[0]: 13 instructions
      $278: SE   V0, #B7      ; Skip next instruction if V0 == $B7
      $5F6: SE   V0, #3A      ; Skip next instruction if V0 == $3A
      $6B0: SE   V0, #52      ; Skip next instruction if V0 == $52
      ... and 10 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $304: AND  VD, V2       ; VD = VD AND V2, VF = 0
    Modifies sorted registers V[3]: 20 instructions
      $340: ADD  V3, #1C      ; Add $1C to V3 (V3 = (V3 + $1C) & 0xFF)
      $34E: LD   V3, #9F      ; Load $9F into V3
      $48A: ADD  V3, #E4      ; Add $E4 to V3 (V3 = (V3 + $E4) & 0xFF)
      ... and 17 more
    Compares sorted registers V[1]: 10 instructions
      $364: SNE  V1, #D7      ; Skip next instruction if V1 != $D7
      $5C0: SNE  V1, #55      ; Skip next instruction if V1 != $55
      $602: SNE  V1, #BE      ; Skip next instruction if V1 != $BE
      ... and 7 more
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $388: OR   VF, V1       ; VF = VF OR V1, VF = 0
    Compares sorted registers V[2, 5]: 1 instructions
      $3A2: SE   V5, V2       ; Skip next instruction if V5 == V2
    Compares sorted registers V[3]: 14 instructions
      $456: SE   V3, #B3      ; Skip next instruction if V3 == $B3
      $5B6: SE   V3, #8B      ; Skip next instruction if V3 == $8B
      $800: SNE  V3, #37      ; Skip next instruction if V3 != $37
      ... and 11 more
    Arithmetic on sorted registers V[1]: 1 instructions
      $5FC: SUBN VA, V1       ; VA = (V1 - VA) & 0xFF, VF = NOT borrow
    Compares sorted registers V[0, 2]: 1 instructions
      $63C: SNE  V2, V0       ; Skip next instruction if V2 != V0
    Arithmetic on sorted registers V[2]: 2 instructions
      $99A: SUBN VB, V2       ; VB = (V2 - VB) & 0xFF, VF = NOT borrow
      $9B0: ADD  VC, V2       ; VC = (VC + V2) & 0xFF, VF = carry
    Compares sorted registers V[1, 5]: 1 instructions
      $A42: SNE  V5, V1       ; Skip next instruction if V5 != V1
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $AC4: OR   VE, V3       ; VE = VE OR V3, VF = 0
      $B02: XOR  VC, V3       ; VC = VC XOR V3, VF = 0
    Arithmetic on sorted registers V[5]: 1 instructions
      $C6C: SUB  VD, V5       ; VD = (VD - V5) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 2 instructions
      $D8A: SUBN V7, V3       ; V7 = (V3 - V7) & 0xFF, VF = NOT borrow
      $FB2: SUB  V7, V3       ; V7 = (V7 - V3) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 474 (26.5%)
    JP: 234 (13.1%)
    LD: 231 (12.9%)
    SNE: 140 (7.8%)
    SE: 121 (6.8%)
    NOP: 118 (6.6%)
    DRW: 112 (6.2%)
    CALL: 111 (6.2%)
    ADD: 102 (5.7%)
    RND: 96 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 711
  Based on: 255 sorting instructions + 228 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4307D01_V2-V7_L6_DES_C48_6785a76f.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 20.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.5% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 101 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 61, 9, 8, 7, 6, 5, 4]
  Changes: V1: 3‚Üí61, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 48

CUDA EXECUTION STATISTICS:
  Total register operations: 14
  Register reads: 30
  Register writes: 29
  Register writes per cycle: 0.604

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 32 locations
       Addresses: ['$27E', '$2F6', '$312', '$3D6', '$43A', '$4EC', '$524', '$566']
       ... and 24 more
  V1: Modified at 27 locations
       Addresses: ['$20E', '$234', '$2DC', '$418', '$45E', '$468', '$566', '$782']
       ... and 19 more
  V2: Modified at 28 locations
       Addresses: ['$200', '$364', '$520', '$566', '$56E', '$652', '$66C', '$6B6']
       ... and 20 more
  V3: Modified at 31 locations
       Addresses: ['$202', '$208', '$228', '$266', '$278', '$3DC', '$3E2', '$4F8']
       ... and 23 more
  V4: Modified at 24 locations
       Addresses: ['$29E', '$3A2', '$40E', '$566', '$5B6', '$5F8', '$7B4', '$838']
       ... and 16 more
  V5: Modified at 27 locations
       Addresses: ['$20C', '$272', '$2B4', '$40A', '$42E', '$46E', '$50A', '$5F2']
       ... and 19 more
  V6: Modified at 22 locations
       Addresses: ['$2B6', '$394', '$3A6', '$3BC', '$54E', '$552', '$5EC', '$618']
       ... and 14 more
  V7: Modified at 38 locations
       Addresses: ['$24E', '$276', '$27C', '$2C4', '$2DE', '$2F0', '$300', '$352']
       ... and 30 more

CONTROL FLOW ANALYSIS:
  223 control transfers detected:
    $212 ‚Üí $206 (LOOP)
    $218 ‚Üí $13B (LOOP)
    $220 ‚Üí $048 (LOOP)
    $22E ‚Üí $BFE
    $238 ‚Üí $E27
    ... and 218 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  277 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 27 instructions
      $200: RND  V2, #C9      ; V2 = random() AND $C9
      $364: SUBN V2, V4       ; V2 = (V4 - V2) & 0xFF, VF = NOT borrow
      $520: XOR  V2, VB       ; V2 = V2 XOR VB, VF = 0
      ... and 24 more
    Modifies sorted registers V[3]: 30 instructions
      $202: RND  V3, #13      ; V3 = random() AND $13
      $208: RND  V3, #18      ; V3 = random() AND $18
      $228: ADD  V3, #F2      ; Add $F2 to V3 (V3 = (V3 + $F2) & 0xFF)
      ... and 27 more
    Modifies sorted registers V[5]: 27 instructions
      $20C: RND  V5, #7F      ; V5 = random() AND $7F
      $272: RND  V5, #EF      ; V5 = random() AND $EF
      $2B4: LD   V5, #1B      ; Load $1B into V5
      ... and 24 more
    Compares sorted registers V[2]: 14 instructions
      $216: SNE  V2, #FF      ; Skip next instruction if V2 != $FF
      $24A: SNE  V2, #E9      ; Skip next instruction if V2 != $E9
      $3FA: SNE  V2, #65      ; Skip next instruction if V2 != $65
      ... and 11 more
    Modifies sorted registers V[7]: 38 instructions
      $24E: RND  V7, #02      ; V7 = random() AND $02
      $276: LD   V7, #F4      ; Load $F4 into V7
      $27C: ADD  V7, #D6      ; Add $D6 to V7 (V7 = (V7 + $D6) & 0xFF)
      ... and 35 more
    Modifies sorted registers V[4]: 23 instructions
      $29E: RND  V4, #1A      ; V4 = random() AND $1A
      $3A2: LD   V4, #06      ; Load $06 into V4
      $40E: RND  V4, #79      ; V4 = random() AND $79
      ... and 20 more
    Modifies sorted registers V[6]: 22 instructions
      $2B6: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      $394: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      $3A6: ADD  V6, #8F      ; Add $8F to V6 (V6 = (V6 + $8F) & 0xFF)
      ... and 19 more
    Compares sorted registers V[5]: 22 instructions
      $328: SE   V5, #18      ; Skip next instruction if V5 == $18
      $44C: SE   V5, #40      ; Skip next instruction if V5 == $40
      $4DE: SE   V5, #E2      ; Skip next instruction if V5 == $E2
      ... and 19 more
    Compares sorted registers V[4]: 13 instructions
      $344: SE   V4, #FA      ; Skip next instruction if V4 == $FA
      $414: SE   V4, #0F      ; Skip next instruction if V4 == $0F
      $578: SE   V4, #47      ; Skip next instruction if V4 == $47
      ... and 10 more
    Compares sorted registers V[6]: 22 instructions
      $398: SNE  V6, #72      ; Skip next instruction if V6 != $72
      $6A0: SNE  V6, #66      ; Skip next instruction if V6 != $66
      $6C2: SNE  V6, #01      ; Skip next instruction if V6 != $01
      ... and 19 more
    Compares sorted registers V[7]: 21 instructions
      $428: SNE  V7, #E4      ; Skip next instruction if V7 != $E4
      $476: SE   V7, #96      ; Skip next instruction if V7 == $96
      $5C0: SE   V7, #A9      ; Skip next instruction if V7 == $A9
      ... and 18 more
    Arithmetic on sorted registers V[6]: 2 instructions
      $436: SUBN VF, V6       ; VF = (V6 - VF) & 0xFF, VF = NOT borrow
      $826: SUB  VD, V6       ; VD = (VD - V6) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[2, 3, 4]: 1 instructions
      $566: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $586: OR   VC, V6       ; VC = VC OR V6, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $592: ADD  VD, V2       ; VD = (VD + V2) & 0xFF, VF = carry
    Compares sorted registers V[3]: 9 instructions
      $5AE: SNE  V3, #B5      ; Skip next instruction if V3 != $B5
      $642: SE   V3, #A0      ; Skip next instruction if V3 == $A0
      $6C6: SNE  V3, #E8      ; Skip next instruction if V3 != $E8
      ... and 6 more
    Compares sorted registers V[2, 5]: 2 instructions
      $7B0: SE   V2, V5       ; Skip next instruction if V2 == V5
      $A84: SNE  V2, V5       ; Skip next instruction if V2 != V5
    Compares sorted registers V[4, 6]: 1 instructions
      $EE6: SE   V6, V4       ; Skip next instruction if V6 == V4
    Register transfer involving V[2]: 1 instructions
      $FD2: LD   V1, V2       ; Load V2 into V1

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 467 (26.1%)
    JP: 241 (13.4%)
    LD: 213 (11.9%)
    ADD: 138 (7.7%)
    SNE: 133 (7.4%)
    SE: 125 (7.0%)
    NOP: 114 (6.4%)
    CALL: 108 (6.0%)
    DRW: 107 (6.0%)
    RND: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 723
  Based on: 277 sorting instructions + 223 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4400D01_V1-V6_L6_ASC_C408_772056b4.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [224, 225, 226, 227, 228, 229] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [224, 225, 226, 227, 228, 229] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 107 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [224, 225, 226, 227, 228, 229]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [221, 224, 225, 226, 227, 228, 229, 222]
  Changes: V0: 8‚Üí221, V1: 3‚Üí224, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí222
  ‚úì Correct initial test pattern detected
  Achievement cycle: 408

CUDA EXECUTION STATISTICS:
  Total register operations: 21
  Register reads: 220
  Register writes: 441
  Register writes per cycle: 1.081

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 20 locations
       Addresses: ['$476', '$4C2', '$506', '$540', '$614', '$64C', '$902', '$950']
       ... and 12 more
  V1: Modified at 23 locations
       Addresses: ['$2E4', '$328', '$364', '$39C', '$4AA', '$52E', '$558', '$776']
       ... and 15 more
  V2: Modified at 19 locations
       Addresses: ['$298', '$304', '$320', '$390', '$59E', '$61E', '$6C0', '$72E']
       ... and 11 more
  V3: Modified at 17 locations
       Addresses: ['$2F6', '$464', '$526', '$556', '$64A', '$658', '$682', '$720']
       ... and 9 more
  V4: Modified at 28 locations
       Addresses: ['$262', '$294', '$2AA', '$406', '$4E2', '$522', '$61A', '$6DE']
       ... and 20 more
  V5: Modified at 26 locations
       Addresses: ['$246', '$27A', '$292', '$300', '$35E', '$502', '$508', '$574']
       ... and 18 more
  V6: Modified at 29 locations
       Addresses: ['$376', '$398', '$3BA', '$3D8', '$460', '$496', '$520', '$5C8']
       ... and 21 more
  V7: Modified at 20 locations
       Addresses: ['$22A', '$2B8', '$370', '$69E', '$71C', '$79E', '$882', '$9C0']
       ... and 12 more

CONTROL FLOW ANALYSIS:
  219 control transfers detected:
    $208 ‚Üí $9A8
    $210 ‚Üí $D6E
    $232 ‚Üí $A7C
    $24A ‚Üí $BFF
    $254 ‚Üí $227 (LOOP)
    ... and 214 more transfers
  Potential sorting loops: 129 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  247 instructions identified as sorting-related:
    Compares sorted registers V[4]: 15 instructions
      $21E: SE   V4, #EA      ; Skip next instruction if V4 == $EA
      $5CC: SE   V4, #62      ; Skip next instruction if V4 == $62
      $5F0: SNE  V4, #2C      ; Skip next instruction if V4 != $2C
      ... and 12 more
    Modifies sorted registers V[5]: 26 instructions
      $246: RND  V5, #06      ; V5 = random() AND $06
      $27A: ADD  V5, #95      ; Add $95 to V5 (V5 = (V5 + $95) & 0xFF)
      $292: RND  V5, #02      ; V5 = random() AND $02
      ... and 23 more
    Compares sorted registers V[5]: 16 instructions
      $256: SNE  V5, #E8      ; Skip next instruction if V5 != $E8
      $288: SNE  V5, #CD      ; Skip next instruction if V5 != $CD
      $31C: SE   V5, #6B      ; Skip next instruction if V5 == $6B
      ... and 13 more
    Arithmetic on sorted registers V[3]: 2 instructions
      $258: ADD  VC, V3       ; VC = (VC + V3) & 0xFF, VF = carry
      $6A8: SUBN VF, V3       ; VF = (V3 - VF) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[4]: 28 instructions
      $262: ADD  V4, #95      ; Add $95 to V4 (V4 = (V4 + $95) & 0xFF)
      $294: RND  V4, #E3      ; V4 = random() AND $E3
      $2AA: ADD  V4, #F7      ; Add $F7 to V4 (V4 = (V4 + $F7) & 0xFF)
      ... and 25 more
    Compares sorted registers V[2]: 16 instructions
      $274: SNE  V2, #17      ; Skip next instruction if V2 != $17
      $478: SNE  V2, V2       ; Skip next instruction if V2 != V2
      $4D2: SE   V2, #9B      ; Skip next instruction if V2 == $9B
      ... and 13 more
    Modifies sorted registers V[2]: 19 instructions
      $298: RND  V2, #40      ; V2 = random() AND $40
      $304: ADD  V2, #D9      ; Add $D9 to V2 (V2 = (V2 + $D9) & 0xFF)
      $320: RND  V2, #F7      ; V2 = random() AND $F7
      ... and 16 more
    Compares sorted registers V[1]: 17 instructions
      $2A8: SE   V1, #87      ; Skip next instruction if V1 == $87
      $2D2: SNE  V9, V1       ; Skip next instruction if V9 != V1
      $3C0: SE   V1, #56      ; Skip next instruction if V1 == $56
      ... and 14 more
    Compares sorted registers V[3]: 10 instructions
      $2C2: SNE  VD, V3       ; Skip next instruction if VD != V3
      $2CE: SE   V3, #FB      ; Skip next instruction if V3 == $FB
      $316: SE   V3, #35      ; Skip next instruction if V3 == $35
      ... and 7 more
    Modifies sorted registers V[1]: 23 instructions
      $2E4: ADD  V1, #EF      ; Add $EF to V1 (V1 = (V1 + $EF) & 0xFF)
      $328: RND  V1, #AE      ; V1 = random() AND $AE
      $364: ADD  V1, #2A      ; Add $2A to V1 (V1 = (V1 + $2A) & 0xFF)
      ... and 20 more
    Compares sorted registers V[6]: 19 instructions
      $2E8: SNE  V6, #15      ; Skip next instruction if V6 != $15
      $45C: SE   V6, #BA      ; Skip next instruction if V6 == $BA
      $516: SE   V6, #89      ; Skip next instruction if V6 == $89
      ... and 16 more
    Modifies sorted registers V[3]: 17 instructions
      $2F6: LD   V3, #99      ; Load $99 into V3
      $464: ADD  V3, #A7      ; Add $A7 to V3 (V3 = (V3 + $A7) & 0xFF)
      $526: LD   V3, #01      ; Load $01 into V3
      ... and 14 more
    Arithmetic on sorted registers V[4]: 2 instructions
      $36E: ADD  V8, V4       ; V8 = (V8 + V4) & 0xFF, VF = carry
      $4AE: SUBN V8, V4       ; V8 = (V4 - V8) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[6]: 29 instructions
      $376: ADD  V6, #53      ; Add $53 to V6 (V6 = (V6 + $53) & 0xFF)
      $398: LD   V6, #39      ; Load $39 into V6
      $3BA: ADD  V6, #DE      ; Add $DE to V6 (V6 = (V6 + $DE) & 0xFF)
      ... and 26 more
    Register transfer involving V[2]: 1 instructions
      $3CA: LD   VD, V2       ; Load V2 into VD
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $3F6: AND  V9, V2       ; V9 = V9 AND V2, VF = 0
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $632: OR   V9, V1       ; V9 = V9 OR V1, VF = 0
    Register transfer involving V[5]: 2 instructions
      $6AA: LD   VE, V5       ; Load V5 into VE
      $FE4: LD   F, V5        ; I = font_address(V5 & 0xF) = 0x50 + (V5 & 0xF) * 5
    Logical operation on V[3] (sets VF=0 in CUDA): 3 instructions
      $730: OR   VD, V3       ; VD = VD OR V3, VF = 0
      $8AA: AND  VC, V3       ; VC = VC AND V3, VF = 0
      $CBE: OR   VA, V3       ; VA = VA OR V3, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 478 (26.7%)
    JP: 243 (13.6%)
    LD: 224 (12.5%)
    NOP: 131 (7.3%)
    SNE: 119 (6.6%)
    ADD: 113 (6.3%)
    CALL: 111 (6.2%)
    SE: 110 (6.1%)
    RND: 107 (6.0%)
    DRW: 105 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 685
  Based on: 247 sorting instructions + 219 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4727D01_V2-V7_L6_ASC_C138_0235f960.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Suspicious: 15.7% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 116 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [4, 244, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí4, V1: 3‚Üí244, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 138

CUDA EXECUTION STATISTICS:
  Total register operations: 10
  Register reads: 75
  Register writes: 99
  Register writes per cycle: 0.717

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$374', '$37E', '$380', '$3B2', '$3BA', '$418', '$420', '$43C']
       ... and 22 more
  V1: Modified at 26 locations
       Addresses: ['$284', '$294', '$356', '$3BE', '$3F0', '$46C', '$4A2', '$57A']
       ... and 18 more
  V2: Modified at 28 locations
       Addresses: ['$2F0', '$478', '$4C2', '$56E', '$582', '$5E2', '$68A', '$6D4']
       ... and 20 more
  V3: Modified at 25 locations
       Addresses: ['$4D4', '$4D6', '$578', '$5E8', '$5EC', '$638', '$680', '$6AC']
       ... and 17 more
  V4: Modified at 24 locations
       Addresses: ['$296', '$2C6', '$36C', '$384', '$3C8', '$406', '$4B8', '$6A4']
       ... and 16 more
  V5: Modified at 34 locations
       Addresses: ['$25C', '$27E', '$2E6', '$2EA', '$332', '$378', '$472', '$520']
       ... and 26 more
  V6: Modified at 38 locations
       Addresses: ['$212', '$25E', '$2AA', '$2B6', '$33A', '$354', '$388', '$38C']
       ... and 30 more
  V7: Modified at 29 locations
       Addresses: ['$252', '$2D4', '$32E', '$352', '$3CC', '$454', '$490', '$5CA']
       ... and 21 more

CONTROL FLOW ANALYSIS:
  212 control transfers detected:
    $20C ‚Üí $AEE
    $218 ‚Üí $F9E
    $222 ‚Üí $1E4 (LOOP)
    $240 ‚Üí $EC4
    $24C ‚Üí $635
    ... and 207 more transfers
  Potential sorting loops: 113 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  281 instructions identified as sorting-related:
    Compares sorted registers V[7]: 20 instructions
      $206: SE   V7, #26      ; Skip next instruction if V7 == $26
      $330: SNE  V7, #D9      ; Skip next instruction if V7 != $D9
      $46E: SNE  V7, #1E      ; Skip next instruction if V7 != $1E
      ... and 17 more
    Modifies sorted registers V[6]: 38 instructions
      $212: ADD  V6, V6       ; V6 = (V6 + V6) & 0xFF, VF = carry
      $25E: ADD  V6, #EA      ; Add $EA to V6 (V6 = (V6 + $EA) & 0xFF)
      $2AA: OR   V6, VA       ; V6 = V6 OR VA, VF = 0
      ... and 35 more
    Compares sorted registers V[2]: 11 instructions
      $24A: SE   V2, #F1      ; Skip next instruction if V2 == $F1
      $29A: SE   V2, #B4      ; Skip next instruction if V2 == $B4
      $2B4: SE   V2, #EA      ; Skip next instruction if V2 == $EA
      ... and 8 more
    Modifies sorted registers V[7]: 29 instructions
      $252: LD   V7, #FD      ; Load $FD into V7
      $2D4: ADD  V7, #E1      ; Add $E1 to V7 (V7 = (V7 + $E1) & 0xFF)
      $32E: LD   V7, #A6      ; Load $A6 into V7
      ... and 26 more
    Modifies sorted registers V[5]: 34 instructions
      $25C: LD   V5, #7F      ; Load $7F into V5
      $27E: RND  V5, #1F      ; V5 = random() AND $1F
      $2E6: RND  V5, #D9      ; V5 = random() AND $D9
      ... and 31 more
    Compares sorted registers V[6]: 16 instructions
      $27A: SNE  V6, #CF      ; Skip next instruction if V6 != $CF
      $34C: SNE  V6, #C2      ; Skip next instruction if V6 != $C2
      $35E: SNE  V9, V6       ; Skip next instruction if V9 != V6
      ... and 13 more
    Arithmetic on sorted registers V[6]: 3 instructions
      $284: SUBN V1, V6       ; V1 = (V6 - V1) & 0xFF, VF = NOT borrow
      $990: SUB  VB, V6       ; VB = (VB - V6) & 0xFF, VF = NOT borrow
      $AB4: SUB  V1, V6       ; V1 = (V1 - V6) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[4]: 24 instructions
      $296: ADD  V4, #77      ; Add $77 to V4 (V4 = (V4 + $77) & 0xFF)
      $2C6: XOR  V4, V2       ; V4 = V4 XOR V2, VF = 0
      $36C: ADD  V4, #2D      ; Add $2D to V4 (V4 = (V4 + $2D) & 0xFF)
      ... and 21 more
    Compares sorted registers V[5]: 16 instructions
      $2AE: SE   V5, #18      ; Skip next instruction if V5 == $18
      $37C: SNE  V5, #2D      ; Skip next instruction if V5 != $2D
      $414: SNE  V5, #8E      ; Skip next instruction if V5 != $8E
      ... and 13 more
    Register transfer involving V[2]: 1 instructions
      $2BA: LD   [I], V2      ; Store V0-V2 at [I], then I += 3
    Modifies sorted registers V[2]: 28 instructions
      $2F0: RND  V2, #5E      ; V2 = random() AND $5E
      $478: ADD  V2, #8C      ; Add $8C to V2 (V2 = (V2 + $8C) & 0xFF)
      $4C2: LD   V2, #7E      ; Load $7E into V2
      ... and 25 more
    Arithmetic on sorted registers V[7]: 1 instructions
      $2F8: SUBN VC, V7       ; VC = (V7 - VC) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3]: 16 instructions
      $340: SE   V3, #44      ; Skip next instruction if V3 == $44
      $3D0: SE   V3, #36      ; Skip next instruction if V3 == $36
      $53E: SNE  V3, #93      ; Skip next instruction if V3 != $93
      ... and 13 more
    Logical operation on V[4] (sets VF=0 in CUDA): 3 instructions
      $436: OR   VE, V4       ; VE = VE OR V4, VF = 0
      $4C6: AND  VD, V4       ; VD = VD AND V4, VF = 0
      $592: AND  VC, V4       ; VC = VC AND V4, VF = 0
    Modifies sorted registers V[3]: 25 instructions
      $4D4: LD   V3, #99      ; Load $99 into V3
      $4D6: RND  V3, #EA      ; V3 = random() AND $EA
      $578: RND  V3, #6E      ; V3 = random() AND $6E
      ... and 22 more
    Compares sorted registers V[4]: 12 instructions
      $502: SE   V4, #E9      ; Skip next instruction if V4 == $E9
      $56C: SE   V9, V4       ; Skip next instruction if V9 == V4
      $628: SE   VC, V4       ; Skip next instruction if VC == V4
      ... and 9 more
    Register transfer involving V[6]: 1 instructions
      $7BC: LD   VC, V6       ; Load V6 into VC
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $9DA: AND  VE, V5       ; VE = VE AND V5, VF = 0
    Arithmetic on sorted registers V[5]: 1 instructions
      $F3C: SUB  V8, V5       ; V8 = (V8 - V5) & 0xFF, VF = NOT borrow
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $F56: AND  VA, V6       ; VA = VA AND V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 486 (27.1%)
    JP: 226 (12.6%)
    LD: 226 (12.6%)
    ADD: 135 (7.5%)
    SE: 126 (7.0%)
    DRW: 118 (6.6%)
    RND: 116 (6.5%)
    SNE: 111 (6.2%)
    NOP: 105 (5.9%)
    CALL: 96 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 705
  Based on: 281 sorting instructions + 212 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B4912D01_V2-V7_L6_ASC_C144_e35931b3.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 98 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 207, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí207, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 144

CUDA EXECUTION STATISTICS:
  Total register operations: 15
  Register reads: 100
  Register writes: 181
  Register writes per cycle: 1.257

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 27 locations
       Addresses: ['$204', '$20E', '$224', '$34A', '$38E', '$508', '$548', '$594']
       ... and 19 more
  V1: Modified at 29 locations
       Addresses: ['$2BA', '$368', '$36C', '$46C', '$46E', '$498', '$4AE', '$528']
       ... and 21 more
  V2: Modified at 26 locations
       Addresses: ['$34C', '$3AA', '$3BA', '$3C2', '$3DC', '$5D6', '$60E', '$664']
       ... and 18 more
  V3: Modified at 25 locations
       Addresses: ['$306', '$350', '$406', '$484', '$4B8', '$4E8', '$6D4', '$77E']
       ... and 17 more
  V4: Modified at 30 locations
       Addresses: ['$2A6', '$2DC', '$2FE', '$302', '$308', '$30C', '$39C', '$49A']
       ... and 22 more
  V5: Modified at 20 locations
       Addresses: ['$244', '$26E', '$2E2', '$348', '$36A', '$3A2', '$41A', '$6E4']
       ... and 12 more
  V6: Modified at 20 locations
       Addresses: ['$20C', '$254', '$3D4', '$4A4', '$61A', '$6EC', '$72E', '$78A']
       ... and 12 more
  V7: Modified at 25 locations
       Addresses: ['$22E', '$2B4', '$364', '$370', '$442', '$64E', '$6BE', '$6CE']
       ... and 17 more

CONTROL FLOW ANALYSIS:
  231 control transfers detected:
    $228 ‚Üí $50D
    $22C ‚Üí $F43
    $230 ‚Üí $0A6 (LOOP)
    $23A ‚Üí $08A (LOOP)
    $23C ‚Üí $17D (LOOP)
    ... and 226 more transfers
  Potential sorting loops: 124 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  244 instructions identified as sorting-related:
    Compares sorted registers V[7]: 12 instructions
      $202: SE   V7, #12      ; Skip next instruction if V7 == $12
      $232: SE   V7, #08      ; Skip next instruction if V7 == $08
      $2B2: SNE  V7, #BE      ; Skip next instruction if V7 != $BE
      ... and 9 more
    Compares sorted registers V[5]: 12 instructions
      $206: SE   V5, #61      ; Skip next instruction if V5 == $61
      $8DC: SE   V5, #19      ; Skip next instruction if V5 == $19
      $9DA: SNE  V5, #8E      ; Skip next instruction if V5 != $8E
      ... and 9 more
    Modifies sorted registers V[6]: 20 instructions
      $20C: ADD  V6, #A0      ; Add $A0 to V6 (V6 = (V6 + $A0) & 0xFF)
      $254: RND  V6, #EB      ; V6 = random() AND $EB
      $3D4: RND  V6, #22      ; V6 = random() AND $22
      ... and 17 more
    Modifies sorted registers V[7]: 25 instructions
      $22E: RND  V7, #B7      ; V7 = random() AND $B7
      $2B4: AND  V7, V2       ; V7 = V7 AND V2, VF = 0
      $364: LD   V7, #0C      ; Load $0C into V7
      ... and 22 more
    Modifies sorted registers V[5]: 20 instructions
      $244: SUB  V5, VE       ; V5 = (V5 - VE) & 0xFF, VF = NOT borrow
      $26E: ADD  V5, #03      ; Add $03 to V5 (V5 = (V5 + $03) & 0xFF)
      $2E2: ADD  V5, #93      ; Add $93 to V5 (V5 = (V5 + $93) & 0xFF)
      ... and 17 more
    Compares sorted registers V[2]: 12 instructions
      $27A: SE   V2, #6A      ; Skip next instruction if V2 == $6A
      $2EE: SNE  V2, #85      ; Skip next instruction if V2 != $85
      $5F2: SNE  V2, #B0      ; Skip next instruction if V2 != $B0
      ... and 9 more
    Compares sorted registers V[3]: 11 instructions
      $288: SNE  V3, #96      ; Skip next instruction if V3 != $96
      $390: SE   V3, #47      ; Skip next instruction if V3 == $47
      $740: SE   V3, #D8      ; Skip next instruction if V3 == $D8
      ... and 8 more
    Modifies sorted registers V[4]: 30 instructions
      $2A6: RND  V4, #6F      ; V4 = random() AND $6F
      $2DC: LD   V4, #FF      ; Load $FF into V4
      $2FE: ADD  V4, #B1      ; Add $B1 to V4 (V4 = (V4 + $B1) & 0xFF)
      ... and 27 more
    Modifies sorted registers V[3]: 25 instructions
      $306: RND  V3, #3A      ; V3 = random() AND $3A
      $350: ADD  V3, #FB      ; Add $FB to V3 (V3 = (V3 + $FB) & 0xFF)
      $406: LD   V3, #27      ; Load $27 into V3
      ... and 22 more
    Modifies sorted registers V[2]: 26 instructions
      $34C: ADD  V2, #68      ; Add $68 to V2 (V2 = (V2 + $68) & 0xFF)
      $3AA: LD   V2, #47      ; Load $47 into V2
      $3BA: ADD  V2, V6       ; V2 = (V2 + V6) & 0xFF, VF = carry
      ... and 23 more
    Compares sorted registers V[6]: 14 instructions
      $3F2: SNE  V6, #6C      ; Skip next instruction if V6 != $6C
      $4A6: SE   V6, #24      ; Skip next instruction if V6 == $24
      $5BE: SE   V6, #D9      ; Skip next instruction if V6 == $D9
      ... and 11 more
    Register transfer involving V[5]: 1 instructions
      $482: LD   VA, V5       ; Load V5 into VA
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $528: AND  V1, V5       ; V1 = V1 AND V5, VF = 0
      $662: OR   V0, V5       ; V0 = V0 OR V5, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $54C: AND  V1, V7       ; V1 = V1 AND V7, VF = 0
    Arithmetic on sorted registers V[4]: 3 instructions
      $568: SUBN VB, V4       ; VB = (V4 - VB) & 0xFF, VF = NOT borrow
      $6A2: SUBN VE, V4       ; VE = (V4 - VE) & 0xFF, VF = NOT borrow
      $AE8: SUBN V9, V4       ; V9 = (V4 - V9) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4]: 17 instructions
      $56C: SNE  V4, #46      ; Skip next instruction if V4 != $46
      $7FA: SE   V4, #A6      ; Skip next instruction if V4 == $A6
      $83E: SNE  V4, #F5      ; Skip next instruction if V4 != $F5
      ... and 14 more
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $63A: AND  VF, V6       ; VF = VF AND V6, VF = 0
      $F7E: AND  VF, V6       ; VF = VF AND V6, VF = 0
    Compares sorted registers V[3, 4]: 1 instructions
      $63C: SE   V3, V4       ; Skip next instruction if V3 == V4
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $742: OR   V8, V2       ; V8 = V8 OR V2, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $748: OR   VF, V4       ; VF = VF OR V4, VF = 0
      $A44: XOR  V1, V4       ; V1 = V1 XOR V4, VF = 0
    Register transfer involving V[7]: 1 instructions
      $80E: LD   VF, V7       ; Load V7 into VF
    Arithmetic on sorted registers V[7]: 1 instructions
      $832: SUB  VD, V7       ; VD = (VD - V7) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 3 instructions
      $8AE: SUB  V9, V2       ; V9 = (V9 - V2) & 0xFF, VF = NOT borrow
      $A2E: ADD  VB, V2       ; VB = (VB + V2) & 0xFF, VF = carry
      $A52: ADD  VC, V2       ; VC = (VC + V2) & 0xFF, VF = carry
    Register transfer involving V[3]: 1 instructions
      $8C4: LD   V0, V3       ; Load V3 into V0
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $8DE: LD   [I], V7      ; Store V0-V7 at [I], then I += 8

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 472 (26.3%)
    LD: 244 (13.6%)
    JP: 233 (13.0%)
    DRW: 134 (7.5%)
    NOP: 120 (6.7%)
    CALL: 118 (6.6%)
    ADD: 115 (6.4%)
    SNE: 103 (5.7%)
    SE: 102 (5.7%)
    RND: 98 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 706
  Based on: 244 sorting instructions + 231 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B5027D01_V2-V7_L6_DES_C168_f86eebdb.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 131 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [65, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí65, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 168

CUDA EXECUTION STATISTICS:
  Total register operations: 4
  Register reads: 67
  Register writes: 53
  Register writes per cycle: 0.315

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 27 locations
       Addresses: ['$20A', '$230', '$252', '$356', '$3AA', '$3DE', '$4D4', '$514']
       ... and 19 more
  V1: Modified at 30 locations
       Addresses: ['$25E', '$344', '$368', '$37E', '$422', '$434', '$4AA', '$4FE']
       ... and 22 more
  V2: Modified at 22 locations
       Addresses: ['$202', '$258', '$2D8', '$2DE', '$2EE', '$4A2', '$5E6', '$5EA']
       ... and 14 more
  V3: Modified at 26 locations
       Addresses: ['$20C', '$3EA', '$410', '$412', '$426', '$432', '$490', '$4C0']
       ... and 18 more
  V4: Modified at 20 locations
       Addresses: ['$264', '$3BE', '$4E0', '$6B6', '$8D0', '$908', '$A58', '$A8A']
       ... and 12 more
  V5: Modified at 26 locations
       Addresses: ['$21A', '$2AE', '$31C', '$4F0', '$500', '$536', '$5EC', '$75A']
       ... and 18 more
  V6: Modified at 20 locations
       Addresses: ['$2B2', '$304', '$3F8', '$454', '$478', '$564', '$60C', '$672']
       ... and 12 more
  V7: Modified at 23 locations
       Addresses: ['$350', '$484', '$49E', '$57C', '$648', '$66C', '$6D0', '$7F4']
       ... and 15 more

CONTROL FLOW ANALYSIS:
  235 control transfers detected:
    $206 ‚Üí $29E
    $208 ‚Üí $B16
    $226 ‚Üí $992
    $238 ‚Üí $7E0
    $23C ‚Üí $0D5 (LOOP)
    ... and 230 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  251 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 22 instructions
      $202: ADD  V2, #0C      ; Add $0C to V2 (V2 = (V2 + $0C) & 0xFF)
      $258: ADD  V2, #0C      ; Add $0C to V2 (V2 = (V2 + $0C) & 0xFF)
      $2D8: LD   V2, #CB      ; Load $CB into V2
      ... and 19 more
    Register transfer involving V[6]: 1 instructions
      $204: LD   ST, V6       ; Load V6 into sound timer
    Modifies sorted registers V[3]: 26 instructions
      $20C: ADD  V3, #74      ; Add $74 to V3 (V3 = (V3 + $74) & 0xFF)
      $3EA: ADD  V3, #A9      ; Add $A9 to V3 (V3 = (V3 + $A9) & 0xFF)
      $410: ADD  V3, #55      ; Add $55 to V3 (V3 = (V3 + $55) & 0xFF)
      ... and 23 more
    Modifies sorted registers V[5]: 26 instructions
      $21A: ADD  V5, #D0      ; Add $D0 to V5 (V5 = (V5 + $D0) & 0xFF)
      $2AE: ADD  V5, #83      ; Add $83 to V5 (V5 = (V5 + $83) & 0xFF)
      $31C: SUBN V5, V7       ; V5 = (V7 - V5) & 0xFF, VF = NOT borrow
      ... and 23 more
    Compares sorted registers V[6]: 13 instructions
      $23E: SNE  V6, #62      ; Skip next instruction if V6 != $62
      $286: SE   V6, #74      ; Skip next instruction if V6 == $74
      $310: SNE  V6, #19      ; Skip next instruction if V6 != $19
      ... and 10 more
    Compares sorted registers V[5]: 16 instructions
      $250: SNE  V5, #28      ; Skip next instruction if V5 != $28
      $272: SE   V5, #FF      ; Skip next instruction if V5 == $FF
      $34E: SE   V5, #FB      ; Skip next instruction if V5 == $FB
      ... and 13 more
    Compares sorted registers V[2]: 17 instructions
      $25C: SE   V2, #87      ; Skip next instruction if V2 == $87
      $288: SNE  V2, #45      ; Skip next instruction if V2 != $45
      $2F0: SE   V2, #7A      ; Skip next instruction if V2 == $7A
      ... and 14 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $260: ADD  VA, V4       ; VA = (VA + V4) & 0xFF, VF = carry
    Modifies sorted registers V[4]: 20 instructions
      $264: ADD  V4, #58      ; Add $58 to V4 (V4 = (V4 + $58) & 0xFF)
      $3BE: RND  V4, #F6      ; V4 = random() AND $F6
      $4E0: LD   V4, #A1      ; Load $A1 into V4
      ... and 17 more
    Compares sorted registers V[4]: 20 instructions
      $29C: SNE  V4, #BB      ; Skip next instruction if V4 != $BB
      $3DC: SNE  V4, #B1      ; Skip next instruction if V4 != $B1
      $5BA: SNE  V4, #4E      ; Skip next instruction if V4 != $4E
      ... and 17 more
    Modifies sorted registers V[6]: 20 instructions
      $2B2: ADD  V6, #D4      ; Add $D4 to V6 (V6 = (V6 + $D4) & 0xFF)
      $304: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      $3F8: LD   V6, #57      ; Load $57 into V6
      ... and 17 more
    Modifies sorted registers V[7]: 23 instructions
      $350: RND  V7, #E4      ; V7 = random() AND $E4
      $484: LD   V7, #95      ; Load $95 into V7
      $49E: ADD  V7, #99      ; Add $99 to V7 (V7 = (V7 + $99) & 0xFF)
      ... and 20 more
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $356: AND  V0, V4       ; V0 = V0 AND V4, VF = 0
      $756: AND  V1, V4       ; V1 = V1 AND V4, VF = 0
    Compares sorted registers V[7]: 16 instructions
      $372: SNE  V7, #CF      ; Skip next instruction if V7 != $CF
      $438: SNE  V7, #B4      ; Skip next instruction if V7 != $B4
      $466: SE   V7, #CD      ; Skip next instruction if V7 == $CD
      ... and 13 more
    Compares sorted registers V[3]: 18 instructions
      $3E0: SE   V3, #D3      ; Skip next instruction if V3 == $D3
      $3FE: SNE  V3, #33      ; Skip next instruction if V3 != $33
      $442: SE   V3, V8       ; Skip next instruction if V3 == V8
      ... and 15 more
    Arithmetic on sorted registers V[2]: 2 instructions
      $59E: SUBN V0, V2       ; V0 = (V2 - V0) & 0xFF, VF = NOT borrow
      $B6E: SUBN VF, V2       ; VF = (V2 - VF) & 0xFF, VF = NOT borrow
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $850: LD   [I], VB      ; Store V0-VB at [I], then I += 12
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $9DC: OR   VE, V6       ; VE = VE OR V6, VF = 0
    Arithmetic on sorted registers V[5]: 2 instructions
      $AAE: SUBN VA, V5       ; VA = (V5 - VA) & 0xFF, VF = NOT borrow
      $B2C: SUB  VA, V5       ; VA = (VA - V5) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 1 instructions
      $ACC: ADD  VC, V3       ; VC = (VC + V3) & 0xFF, VF = carry
    Arithmetic on sorted registers V[6]: 1 instructions
      $AE6: SUB  V8, V6       ; V8 = (V8 - V6) & 0xFF, VF = NOT borrow
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $B3C: XOR  VF, V2       ; VF = VF XOR V2, VF = 0
    Compares sorted registers V[4, 5]: 1 instructions
      $F76: SNE  V4, V5       ; Skip next instruction if V4 != V5

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 464 (25.9%)
    LD: 222 (12.4%)
    JP: 217 (12.1%)
    ADD: 131 (7.3%)
    RND: 131 (7.3%)
    SE: 118 (6.6%)
    NOP: 117 (6.5%)
    SNE: 117 (6.5%)
    CALL: 115 (6.4%)
    DRW: 115 (6.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 721
  Based on: 251 sorting instructions + 235 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B5172D01_V2-V7_L6_DES_C243_c2bc532b.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 20.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 15.2% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 89 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [215, 237, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí215, V1: 3‚Üí237, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 243

CUDA EXECUTION STATISTICS:
  Total register operations: 12
  Register reads: 116
  Register writes: 139
  Register writes per cycle: 0.572

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 28 locations
       Addresses: ['$258', '$35E', '$36E', '$382', '$40A', '$4BA', '$5C0', '$6BE']
       ... and 20 more
  V1: Modified at 21 locations
       Addresses: ['$260', '$3C6', '$40E', '$450', '$4BC', '$5BE', '$648', '$650']
       ... and 13 more
  V2: Modified at 31 locations
       Addresses: ['$206', '$226', '$26A', '$2CA', '$478', '$486', '$5C6', '$5D4']
       ... and 23 more
  V3: Modified at 26 locations
       Addresses: ['$23E', '$35A', '$434', '$4F6', '$506', '$57E', '$61E', '$6AA']
       ... and 18 more
  V4: Modified at 20 locations
       Addresses: ['$278', '$43E', '$468', '$5FA', '$64C', '$71E', '$742', '$85E']
       ... and 12 more
  V5: Modified at 26 locations
       Addresses: ['$3DE', '$3E8', '$4A6', '$4E0', '$4FE', '$628', '$6A0', '$714']
       ... and 18 more
  V6: Modified at 31 locations
       Addresses: ['$2DC', '$2E8', '$31C', '$33A', '$3CE', '$4C0', '$5CA', '$6B0']
       ... and 23 more
  V7: Modified at 21 locations
       Addresses: ['$236', '$41C', '$4EA', '$542', '$63E', '$656', '$6B4', '$73A']
       ... and 13 more

CONTROL FLOW ANALYSIS:
  216 control transfers detected:
    $202 ‚Üí $E0E
    $20C ‚Üí $D27
    $246 ‚Üí $15F (LOOP)
    $24A ‚Üí $9A1
    $268 ‚Üí $406
    ... and 211 more transfers
  Potential sorting loops: 130 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  273 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 31 instructions
      $206: ADD  V2, #E4      ; Add $E4 to V2 (V2 = (V2 + $E4) & 0xFF)
      $226: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB
      $26A: ADD  V2, #24      ; Add $24 to V2 (V2 = (V2 + $24) & 0xFF)
      ... and 28 more
    Compares sorted registers V[2]: 14 instructions
      $218: SE   V2, #2B      ; Skip next instruction if V2 == $2B
      $34C: SE   V2, #9E      ; Skip next instruction if V2 == $9E
      $39A: SE   V2, #C4      ; Skip next instruction if V2 == $C4
      ... and 11 more
    Modifies sorted registers V[7]: 21 instructions
      $236: RND  V7, #22      ; V7 = random() AND $22
      $41C: RND  V7, #E4      ; V7 = random() AND $E4
      $4EA: LD   V7, #67      ; Load $67 into V7
      ... and 18 more
    Compares sorted registers V[7]: 19 instructions
      $23A: SE   V7, #EC      ; Skip next instruction if V7 == $EC
      $248: SE   V7, #2B      ; Skip next instruction if V7 == $2B
      $4DE: SNE  V7, #F3      ; Skip next instruction if V7 != $F3
      ... and 16 more
    Modifies sorted registers V[3]: 26 instructions
      $23E: LD   V3, #FF      ; Load $FF into V3
      $35A: LD   V3, #B9      ; Load $B9 into V3
      $434: XOR  V3, VF       ; V3 = V3 XOR VF, VF = 0
      ... and 23 more
    Modifies sorted registers V[4]: 20 instructions
      $278: LD   V4, #ED      ; Load $ED into V4
      $43E: RND  V4, #2B      ; V4 = random() AND $2B
      $468: LD   V4, #18      ; Load $18 into V4
      ... and 17 more
    Compares sorted registers V[2, 6]: 1 instructions
      $29E: SE   V2, V6       ; Skip next instruction if V2 == V6
    Arithmetic on sorted registers V[7]: 1 instructions
      $2A2: SUBN VD, V7       ; VD = (V7 - VD) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[6]: 31 instructions
      $2DC: SUB  V6, VB       ; V6 = (V6 - VB) & 0xFF, VF = NOT borrow
      $2E8: LD   V6, #0F      ; Load $0F into V6
      $31C: RND  V6, #AE      ; V6 = random() AND $AE
      ... and 28 more
    Compares sorted registers V[6]: 18 instructions
      $2F4: SE   V6, #90      ; Skip next instruction if V6 == $90
      $37C: SE   V6, #37      ; Skip next instruction if V6 == $37
      $3BC: SE   V6, #3F      ; Skip next instruction if V6 == $3F
      ... and 15 more
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $308: AND  VB, V3       ; VB = VB AND V3, VF = 0
    Compares sorted registers V[3]: 27 instructions
      $30A: SE   V3, #09      ; Skip next instruction if V3 == $09
      $34A: SNE  V3, #05      ; Skip next instruction if V3 != $05
      $402: SNE  V3, #2C      ; Skip next instruction if V3 != $2C
      ... and 24 more
    Arithmetic on sorted registers V[6]: 1 instructions
      $31E: SUB  VF, V6       ; VF = (VF - V6) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[5]: 1 instructions
      $3AA: ADD  I, V5        ; I = (I + V5) & 0xFFFF
    Modifies sorted registers V[5]: 26 instructions
      $3DE: ADD  V5, #DD      ; Add $DD to V5 (V5 = (V5 + $DD) & 0xFF)
      $3E8: LD   V5, #5B      ; Load $5B into V5
      $4A6: RND  V5, #1A      ; V5 = random() AND $1A
      ... and 23 more
    Arithmetic on sorted registers V[2]: 1 instructions
      $540: SUBN VE, V2       ; VE = (V2 - VE) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4]: 16 instructions
      $554: SNE  V4, #A5      ; Skip next instruction if V4 != $A5
      $56C: SE   V4, #AE      ; Skip next instruction if V4 == $AE
      $58E: SE   V4, VD       ; Skip next instruction if V4 == VD
      ... and 13 more
    Compares sorted registers V[6, 7]: 1 instructions
      $6D8: SNE  V7, V6       ; Skip next instruction if V7 != V6
    Compares sorted registers V[5]: 10 instructions
      $756: SE   V5, #12      ; Skip next instruction if V5 == $12
      $7CA: SE   V5, #D5      ; Skip next instruction if V5 == $D5
      $872: SE   V5, #56      ; Skip next instruction if V5 == $56
      ... and 7 more
    Register transfer involving V[3]: 2 instructions
      $810: LD   ST, V3       ; Load V3 into sound timer
      $A32: LD   VB, V3       ; Load V3 into VB
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $910: OR   V0, V7       ; V0 = V0 OR V7, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $C70: SUBN VD, V3       ; VD = (V3 - VD) & 0xFF, VF = NOT borrow
    Register transfer involving V[5]: 1 instructions
      $D0E: LD   V8, V5       ; Load V5 into V8
    Compares sorted registers V[2, 4]: 1 instructions
      $DD4: SE   V2, V4       ; Skip next instruction if V2 == V4
    Arithmetic on sorted registers V[4]: 1 instructions
      $E4E: SUBN V1, V4       ; V1 = (V4 - V1) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 487 (27.2%)
    LD: 247 (13.8%)
    JP: 225 (12.6%)
    ADD: 137 (7.6%)
    SE: 129 (7.2%)
    SNE: 119 (6.6%)
    DRW: 112 (6.2%)
    CALL: 103 (5.7%)
    NOP: 96 (5.4%)
    RND: 89 (5.0%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 705
  Based on: 273 sorting instructions + 216 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B5200D01_V2-V7_L6_ASC_C102_b1983b45.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 99 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 34, 225, 226, 227, 228, 229, 230]
  Changes: V1: 3‚Üí34, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 102

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 42
  Register writes: 73
  Register writes per cycle: 0.716

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 14 locations
       Addresses: ['$25E', '$446', '$4FA', '$588', '$7A4', '$80A', '$844', '$84C']
       ... and 6 more
  V1: Modified at 27 locations
       Addresses: ['$240', '$268', '$2DC', '$2EA', '$31E', '$398', '$44C', '$472']
       ... and 19 more
  V2: Modified at 19 locations
       Addresses: ['$20A', '$27C', '$2A2', '$44E', '$4E2', '$612', '$630', '$76A']
       ... and 11 more
  V3: Modified at 30 locations
       Addresses: ['$24C', '$2D0', '$2EE', '$316', '$358', '$3DE', '$42E', '$480']
       ... and 22 more
  V4: Modified at 32 locations
       Addresses: ['$2D2', '$2E2', '$392', '$3EA', '$430', '$4EC', '$4F0', '$53C']
       ... and 24 more
  V5: Modified at 23 locations
       Addresses: ['$220', '$272', '$286', '$2C8', '$404', '$434', '$590', '$5CE']
       ... and 15 more
  V6: Modified at 21 locations
       Addresses: ['$238', '$266', '$296', '$2A4', '$45E', '$5D8', '$5E2', '$67C']
       ... and 13 more
  V7: Modified at 16 locations
       Addresses: ['$386', '$396', '$486', '$568', '$634', '$640', '$73E', '$888']
       ... and 8 more

CONTROL FLOW ANALYSIS:
  234 control transfers detected:
    $208 ‚Üí $E1E
    $212 ‚Üí $FC2
    $216 ‚Üí $3C5
    $228 ‚Üí $008 (LOOP)
    $264 ‚Üí $66C
    ... and 229 more transfers
  Potential sorting loops: 146 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  249 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 19 instructions
      $20A: ADD  V2, #3E      ; Add $3E to V2 (V2 = (V2 + $3E) & 0xFF)
      $27C: RND  V2, #F8      ; V2 = random() AND $F8
      $2A2: SHR  V2           ; V2 = V2 >> 1, VF = LSB
      ... and 16 more
    Modifies sorted registers V[5]: 23 instructions
      $220: RND  V5, #5D      ; V5 = random() AND $5D
      $272: LD   V5, #BA      ; Load $BA into V5
      $286: LD   V5, #FB      ; Load $FB into V5
      ... and 20 more
    Modifies sorted registers V[6]: 21 instructions
      $238: ADD  V6, #1A      ; Add $1A to V6 (V6 = (V6 + $1A) & 0xFF)
      $266: ADD  V6, #58      ; Add $58 to V6 (V6 = (V6 + $58) & 0xFF)
      $296: RND  V6, #26      ; V6 = random() AND $26
      ... and 18 more
    Compares sorted registers V[5]: 13 instructions
      $244: SNE  V5, #7A      ; Skip next instruction if V5 != $7A
      $260: SE   V5, #03      ; Skip next instruction if V5 == $03
      $354: SE   V5, #A2      ; Skip next instruction if V5 == $A2
      ... and 10 more
    Compares sorted registers V[7]: 18 instructions
      $246: SNE  V7, VA       ; Skip next instruction if V7 != VA
      $3F0: SNE  V7, #46      ; Skip next instruction if V7 != $46
      $426: SE   V7, #B2      ; Skip next instruction if V7 == $B2
      ... and 15 more
    Modifies sorted registers V[3]: 30 instructions
      $24C: LD   V3, #CE      ; Load $CE into V3
      $2D0: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $2EE: LD   V3, #BA      ; Load $BA into V3
      ... and 27 more
    Arithmetic on sorted registers V[2]: 1 instructions
      $294: ADD  VE, V2       ; VE = (VE + V2) & 0xFF, VF = carry
    Modifies sorted registers V[4]: 32 instructions
      $2D2: ADD  V4, #77      ; Add $77 to V4 (V4 = (V4 + $77) & 0xFF)
      $2E2: LD   V4, #32      ; Load $32 into V4
      $392: RND  V4, #11      ; V4 = random() AND $11
      ... and 29 more
    Compares sorted registers V[4]: 15 instructions
      $2E6: SNE  V4, #98      ; Skip next instruction if V4 != $98
      $380: SNE  V4, #AC      ; Skip next instruction if V4 != $AC
      $3A2: SE   V4, VA       ; Skip next instruction if V4 == VA
      ... and 12 more
    Compares sorted registers V[2]: 25 instructions
      $328: SNE  V2, #4A      ; Skip next instruction if V2 != $4A
      $3A6: SNE  V2, #11      ; Skip next instruction if V2 != $11
      $482: SE   V2, #F9      ; Skip next instruction if V2 == $F9
      ... and 22 more
    Compares sorted registers V[6]: 11 instructions
      $344: SE   V6, #38      ; Skip next instruction if V6 == $38
      $376: SE   V6, #BC      ; Skip next instruction if V6 == $BC
      $3BA: SE   V6, #CF      ; Skip next instruction if V6 == $CF
      ... and 8 more
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $35C: LD   [I], V7      ; Store V0-V7 at [I], then I += 8
    Compares sorted registers V[3]: 17 instructions
      $37A: SNE  V3, V1       ; Skip next instruction if V3 != V1
      $3C6: SE   V3, #7B      ; Skip next instruction if V3 == $7B
      $62A: SNE  V3, #0A      ; Skip next instruction if V3 != $0A
      ... and 14 more
    Modifies sorted registers V[7]: 16 instructions
      $386: RND  V7, #1B      ; V7 = random() AND $1B
      $396: LD   V7, #0B      ; Load $0B into V7
      $486: RND  V7, #BA      ; V7 = random() AND $BA
      ... and 13 more
    Register transfer involving V[7]: 1 instructions
      $398: LD   V1, V7       ; Load V7 into V1
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $5E4: XOR  VB, V5       ; VB = VB XOR V5, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $844: OR   V0, V6       ; V0 = V0 OR V6, VF = 0
    Compares sorted registers V[4, 6]: 1 instructions
      $8A6: SE   V4, V6       ; Skip next instruction if V4 == V6
    Compares sorted registers V[4, 5]: 1 instructions
      $A48: SNE  V5, V4       ; Skip next instruction if V5 != V4
    Register transfer involving V[3]: 1 instructions
      $F5E: LD   VC, V3       ; Load V3 into VC
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $F88: OR   V8, V4       ; V8 = V8 OR V4, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 459 (25.6%)
    JP: 233 (13.0%)
    LD: 212 (11.8%)
    SE: 136 (7.6%)
    SNE: 131 (7.3%)
    DRW: 129 (7.2%)
    ADD: 120 (6.7%)
    CALL: 119 (6.6%)
    NOP: 111 (6.2%)
    RND: 99 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 717
  Based on: 249 sorting instructions + 234 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B5585D01_V2-V7_L6_ASC_C192_69e3c256.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 116 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 238, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí238, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 192

CUDA EXECUTION STATISTICS:
  Total register operations: 8
  Register reads: 99
  Register writes: 198
  Register writes per cycle: 1.031

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 21 locations
       Addresses: ['$2C8', '$344', '$466', '$500', '$504', '$598', '$5B8', '$600']
       ... and 13 more
  V1: Modified at 28 locations
       Addresses: ['$27C', '$29A', '$2EC', '$3A4', '$448', '$4E4', '$5B4', '$64C']
       ... and 20 more
  V2: Modified at 26 locations
       Addresses: ['$24A', '$296', '$386', '$3B4', '$4AE', '$510', '$5E6', '$604']
       ... and 18 more
  V3: Modified at 24 locations
       Addresses: ['$2D2', '$2F0', '$30A', '$316', '$3EA', '$490', '$5E0', '$6A4']
       ... and 16 more
  V4: Modified at 34 locations
       Addresses: ['$20A', '$352', '$354', '$35E', '$366', '$524', '$546', '$554']
       ... and 26 more
  V5: Modified at 25 locations
       Addresses: ['$2C4', '$37A', '$416', '$432', '$482', '$53A', '$654', '$68E']
       ... and 17 more
  V6: Modified at 29 locations
       Addresses: ['$328', '$422', '$464', '$4A4', '$4EC', '$518', '$624', '$714']
       ... and 21 more
  V7: Modified at 30 locations
       Addresses: ['$2AC', '$2C2', '$2F2', '$2FE', '$44E', '$4B2', '$4E0', '$50C']
       ... and 22 more

CONTROL FLOW ANALYSIS:
  229 control transfers detected:
    $20C ‚Üí $9C9
    $224 ‚Üí $871
    $228 ‚Üí $874
    $22E ‚Üí $58B
    $240 ‚Üí $9CC
    ... and 224 more transfers
  Potential sorting loops: 116 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  266 instructions identified as sorting-related:
    Modifies sorted registers V[4]: 34 instructions
      $20A: AND  V4, V5       ; V4 = V4 AND V5, VF = 0
      $352: LD   V4, #15      ; Load $15 into V4
      $354: LD   V4, V9       ; Load V9 into V4
      ... and 31 more
    Compares sorted registers V[4]: 18 instructions
      $23E: SE   V4, #BF      ; Skip next instruction if V4 == $BF
      $37E: SE   V4, #BA      ; Skip next instruction if V4 == $BA
      $4FA: SE   V4, #A3      ; Skip next instruction if V4 == $A3
      ... and 15 more
    Modifies sorted registers V[2]: 26 instructions
      $24A: SHR  V2           ; V2 = V2 >> 1, VF = LSB
      $296: RND  V2, #13      ; V2 = random() AND $13
      $386: RND  V2, #46      ; V2 = random() AND $46
      ... and 23 more
    Compares sorted registers V[2]: 18 instructions
      $24C: SE   V2, #72      ; Skip next instruction if V2 == $72
      $26A: SE   V2, #89      ; Skip next instruction if V2 == $89
      $3AE: SNE  V2, #DC      ; Skip next instruction if V2 != $DC
      ... and 15 more
    Compares sorted registers V[5]: 9 instructions
      $286: SNE  VF, V5       ; Skip next instruction if VF != V5
      $374: SE   V5, #BF      ; Skip next instruction if V5 == $BF
      $710: SNE  V5, #F8      ; Skip next instruction if V5 != $F8
      ... and 6 more
    Modifies sorted registers V[7]: 30 instructions
      $2AC: RND  V7, #0A      ; V7 = random() AND $0A
      $2C2: ADD  V7, #F6      ; Add $F6 to V7 (V7 = (V7 + $F6) & 0xFF)
      $2F2: ADD  V7, #3B      ; Add $3B to V7 (V7 = (V7 + $3B) & 0xFF)
      ... and 27 more
    Modifies sorted registers V[5]: 25 instructions
      $2C4: ADD  V5, #FA      ; Add $FA to V5 (V5 = (V5 + $FA) & 0xFF)
      $37A: LD   V5, #A2      ; Load $A2 into V5
      $416: LD   V5, #EC      ; Load $EC into V5
      ... and 22 more
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $2C6: AND  VB, V7       ; VB = VB AND V7, VF = 0
      $400: XOR  V8, V7       ; V8 = V8 XOR V7, VF = 0
    Modifies sorted registers V[3]: 24 instructions
      $2D2: LD   V3, #B4      ; Load $B4 into V3
      $2F0: ADD  V3, #55      ; Add $55 to V3 (V3 = (V3 + $55) & 0xFF)
      $30A: LD   V3, #9D      ; Load $9D into V3
      ... and 21 more
    Compares sorted registers V[3]: 11 instructions
      $31C: SE   V3, #6D      ; Skip next instruction if V3 == $6D
      $56C: SE   V3, #28      ; Skip next instruction if V3 == $28
      $662: SE   V3, #DD      ; Skip next instruction if V3 == $DD
      ... and 8 more
    Modifies sorted registers V[6]: 29 instructions
      $328: RND  V6, #69      ; V6 = random() AND $69
      $422: ADD  V6, #90      ; Add $90 to V6 (V6 = (V6 + $90) & 0xFF)
      $464: ADD  V6, VE       ; V6 = (V6 + VE) & 0xFF, VF = carry
      ... and 26 more
    Compares sorted registers V[6]: 14 instructions
      $36A: SE   V6, #BD      ; Skip next instruction if V6 == $BD
      $508: SNE  V6, #8F      ; Skip next instruction if V6 != $8F
      $5E8: SNE  V6, #11      ; Skip next instruction if V6 != $11
      ... and 11 more
    Compares sorted registers V[7]: 14 instructions
      $4E8: SE   V7, #EA      ; Skip next instruction if V7 == $EA
      $678: SNE  V7, #CB      ; Skip next instruction if V7 != $CB
      $6A0: SE   V7, #DF      ; Skip next instruction if V7 == $DF
      ... and 11 more
    Arithmetic on sorted registers V[2]: 2 instructions
      $512: ADD  VB, V2       ; VB = (VB + V2) & 0xFF, VF = carry
      $B82: SUBN VD, V2       ; VD = (V2 - VD) & 0xFF, VF = NOT borrow
    Register transfer involving V[7]: 1 instructions
      $566: LD   F, V7        ; I = font_address(V7 & 0xF) = 0x50 + (V7 & 0xF) * 5
    Register transfer involving V[6]: 1 instructions
      $5D4: LD   VB, V6       ; Load V6 into VB
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $5F0: AND  VC, V3       ; VC = VC AND V3, VF = 0
      $B3C: AND  V1, V3       ; V1 = V1 AND V3, VF = 0
    Register transfer involving V[5]: 1 instructions
      $6D8: LD   VD, V5       ; Load V5 into VD
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $702: XOR  VB, V6       ; VB = VB XOR V6, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $782: SUBN VD, V4       ; VD = (V4 - VD) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $80A: XOR  V0, V4       ; V0 = V0 XOR V4, VF = 0
    Arithmetic on sorted registers V[5]: 1 instructions
      $9D0: SUB  VD, V5       ; VD = (VD - V5) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 1 instructions
      $A50: ADD  VC, V3       ; VC = (VC + V3) & 0xFF, VF = carry

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 450 (25.1%)
    LD: 241 (13.4%)
    JP: 235 (13.1%)
    SNE: 122 (6.8%)
    ADD: 122 (6.8%)
    DRW: 120 (6.7%)
    NOP: 120 (6.7%)
    RND: 116 (6.5%)
    CALL: 114 (6.4%)
    SE: 108 (6.0%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 724
  Based on: 266 sorting instructions + 229 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B5621D01_V2-V7_L6_ASC_C84_13179762.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [154, 155, 156, 157, 158, 159] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [154, 155, 156, 157, 158, 159] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 105 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [154, 155, 156, 157, 158, 159]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [170, 6, 154, 155, 156, 157, 158, 159]
  Changes: V0: 8‚Üí170, V1: 3‚Üí6, V2: 6‚Üí154, V3: 1‚Üí155, V4: 7‚Üí156, V5: 2‚Üí157, V6: 5‚Üí158, V7: 4‚Üí159
  ‚úì Correct initial test pattern detected
  Achievement cycle: 84

CUDA EXECUTION STATISTICS:
  Total register operations: 2
  Register reads: 39
  Register writes: 35
  Register writes per cycle: 0.417

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 18 locations
       Addresses: ['$23C', '$408', '$430', '$4F6', '$51C', '$674', '$6A6', '$6B2']
       ... and 10 more
  V1: Modified at 26 locations
       Addresses: ['$2FE', '$3A8', '$3E2', '$44E', '$4D0', '$4F6', '$55C', '$6BC']
       ... and 18 more
  V2: Modified at 25 locations
       Addresses: ['$220', '$350', '$3C4', '$3F4', '$424', '$4F6', '$532', '$59C']
       ... and 17 more
  V3: Modified at 26 locations
       Addresses: ['$31A', '$43C', '$4E6', '$4F6', '$560', '$5D4', '$77A', '$7D8']
       ... and 18 more
  V4: Modified at 23 locations
       Addresses: ['$29E', '$2D4', '$2EA', '$37E', '$49E', '$4F6', '$562', '$5A8']
       ... and 15 more
  V5: Modified at 20 locations
       Addresses: ['$310', '$41A', '$41C', '$492', '$4F6', '$5F0', '$6A4', '$6B6']
       ... and 12 more
  V6: Modified at 24 locations
       Addresses: ['$28C', '$2C2', '$348', '$34C', '$39C', '$414', '$47A', '$4AA']
       ... and 16 more
  V7: Modified at 18 locations
       Addresses: ['$234', '$30E', '$3B0', '$4F6', '$57A', '$628', '$6D0', '$908']
       ... and 10 more

CONTROL FLOW ANALYSIS:
  265 control transfers detected:
    $21C ‚Üí $3FC
    $22E ‚Üí $B3F
    $23E ‚Üí $324
    $248 ‚Üí $AF4
    $24E ‚Üí $AF7
    ... and 260 more transfers
  Potential sorting loops: 154 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  256 instructions identified as sorting-related:
    Register transfer involving V[3]: 1 instructions
      $21A: LD   B, V3        ; Store BCD of V3 at [I], [I+1], [I+2]
    Modifies sorted registers V[2]: 23 instructions
      $220: ADD  V2, #05      ; Add $05 to V2 (V2 = (V2 + $05) & 0xFF)
      $350: LD   V2, #CA      ; Load $CA into V2
      $3C4: RND  V2, #14      ; V2 = random() AND $14
      ... and 20 more
    Arithmetic on sorted registers V[5]: 2 instructions
      $224: SUB  VB, V5       ; VB = (VB - V5) & 0xFF, VF = NOT borrow
      $62C: ADD  VB, V5       ; VB = (VB + V5) & 0xFF, VF = carry
    Modifies sorted registers V[7]: 17 instructions
      $234: LD   V7, #0B      ; Load $0B into V7
      $30E: RND  V7, #B1      ; V7 = random() AND $B1
      $3B0: SHL  V7           ; V7 = (V7 << 1) & 0xFF, VF = MSB
      ... and 14 more
    Compares sorted registers V[6]: 20 instructions
      $252: SNE  V6, VE       ; Skip next instruction if V6 != VE
      $4B6: SE   V6, #5A      ; Skip next instruction if V6 == $5A
      $4CA: SE   V6, #E6      ; Skip next instruction if V6 == $E6
      ... and 17 more
    Compares sorted registers V[4]: 15 instructions
      $254: SNE  V4, #2F      ; Skip next instruction if V4 != $2F
      $294: SE   V4, #57      ; Skip next instruction if V4 == $57
      $2D8: SNE  V4, #2A      ; Skip next instruction if V4 != $2A
      ... and 12 more
    Compares sorted registers V[5]: 18 instructions
      $25E: SNE  V5, #A8      ; Skip next instruction if V5 != $A8
      $2A8: SE   V5, #50      ; Skip next instruction if V5 == $50
      $4B8: SE   V5, #FE      ; Skip next instruction if V5 == $FE
      ... and 15 more
    Modifies sorted registers V[6]: 23 instructions
      $28C: OR   V6, VB       ; V6 = V6 OR VB, VF = 0
      $2C2: LD   V6, #41      ; Load $41 into V6
      $348: LD   V6, #E7      ; Load $E7 into V6
      ... and 20 more
    Modifies sorted registers V[4]: 21 instructions
      $29E: LD   V4, #B7      ; Load $B7 into V4
      $2D4: RND  V4, #2E      ; V4 = random() AND $2E
      $2EA: LD   V4, #78      ; Load $78 into V4
      ... and 18 more
    Arithmetic on sorted registers V[6]: 3 instructions
      $2EE: SUBN VD, V6       ; VD = (V6 - VD) & 0xFF, VF = NOT borrow
      $32C: SUB  V8, V6       ; V8 = (V8 - V6) & 0xFF, VF = NOT borrow
      $A8C: ADD  V1, V6       ; V1 = (V1 + V6) & 0xFF, VF = carry
    Compares sorted registers V[3, 6]: 1 instructions
      $2F8: SNE  V6, V3       ; Skip next instruction if V6 != V3
    Compares sorted registers V[2]: 15 instructions
      $30C: SNE  V2, #1F      ; Skip next instruction if V2 != $1F
      $392: SE   V2, #88      ; Skip next instruction if V2 == $88
      $45E: SE   V2, #62      ; Skip next instruction if V2 == $62
      ... and 12 more
    Modifies sorted registers V[5]: 18 instructions
      $310: ADD  V5, #8D      ; Add $8D to V5 (V5 = (V5 + $8D) & 0xFF)
      $41A: LD   V5, #88      ; Load $88 into V5
      $41C: XOR  V5, V8       ; V5 = V5 XOR V8, VF = 0
      ... and 15 more
    Modifies sorted registers V[3]: 24 instructions
      $31A: ADD  V3, #0C      ; Add $0C to V3 (V3 = (V3 + $0C) & 0xFF)
      $43C: LD   V3, #E0      ; Load $E0 into V3
      $4E6: ADD  V3, #78      ; Add $78 to V3 (V3 = (V3 + $78) & 0xFF)
      ... and 21 more
    Compares sorted registers V[3]: 17 instructions
      $342: SE   V3, #3D      ; Skip next instruction if V3 == $3D
      $35A: SNE  V3, #A8      ; Skip next instruction if V3 != $A8
      $470: SE   V3, #E6      ; Skip next instruction if V3 == $E6
      ... and 14 more
    Compares sorted registers V[2, 3]: 1 instructions
      $40A: SE   V3, V2       ; Skip next instruction if V3 == V2
    Arithmetic on sorted registers V[4]: 3 instructions
      $4A4: SUB  VC, V4       ; VC = (VC - V4) & 0xFF, VF = NOT borrow
      $712: ADD  VB, V4       ; VB = (VB + V4) & 0xFF, VF = carry
      $FDE: ADD  VA, V4       ; VA = (VA + V4) & 0xFF, VF = carry
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $4F6: LD   VE, [I]      ; Load V0-VE from [I], then I += 15
    Compares sorted registers V[7]: 22 instructions
      $57E: SNE  V7, #23      ; Skip next instruction if V7 != $23
      $5E2: SE   V7, #17      ; Skip next instruction if V7 == $17
      $6E6: SNE  V7, #56      ; Skip next instruction if V7 != $56
      ... and 19 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $71C: AND  VE, V2       ; VE = VE AND V2, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $78A: XOR  VC, V4       ; VC = VC XOR V4, VF = 0
      $D1E: AND  V9, V4       ; V9 = V9 AND V4, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $890: AND  VE, V7       ; VE = VE AND V7, VF = 0
      $BB2: XOR  VE, V7       ; VE = VE XOR V7, VF = 0
    Compares sorted registers V[6, 7]: 1 instructions
      $94A: SNE  V6, V7       ; Skip next instruction if V6 != V7
    Register transfer involving V[2]: 1 instructions
      $A08: LD   [I], V2      ; Store V0-V2 at [I], then I += 3
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $C1C: AND  VD, V5       ; VD = VD AND V5, VF = 0
    Modifies sorted registers V[2, 3, 4, 5]: 1 instructions
      $E76: LD   V5, [I]      ; Load V0-V5 from [I], then I += 6
    Arithmetic on sorted registers V[7]: 1 instructions
      $ECA: SUBN V0, V7       ; V0 = (V7 - V0) & 0xFF, VF = NOT borrow
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $F52: AND  VF, V6       ; VF = VF AND V6, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 472 (26.3%)
    JP: 233 (13.0%)
    LD: 190 (10.6%)
    CALL: 141 (7.9%)
    SE: 126 (7.0%)
    NOP: 123 (6.9%)
    DRW: 123 (6.9%)
    SNE: 123 (6.9%)
    ADD: 108 (6.0%)
    RND: 105 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 786
  Based on: 256 sorting instructions + 265 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B5626D01_V2-V7_L6_DES_C9_00654fa5.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Suspicious: 16.3% of instructions marked as sorting-related
    ‚ö†Ô∏è  Dominated by random generation: 105 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 9

CUDA EXECUTION STATISTICS:
  Total register operations: 2
  Register reads: 4
  Register writes: 7
  Register writes per cycle: 0.778

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 28 locations
       Addresses: ['$304', '$30C', '$42C', '$466', '$4D2', '$642', '$6BA', '$732']
       ... and 20 more
  V1: Modified at 26 locations
       Addresses: ['$2DE', '$3C4', '$4DA', '$5AE', '$5E8', '$62A', '$780', '$826']
       ... and 18 more
  V2: Modified at 32 locations
       Addresses: ['$32E', '$340', '$398', '$428', '$484', '$6BE', '$784', '$786']
       ... and 24 more
  V3: Modified at 22 locations
       Addresses: ['$206', '$238', '$338', '$3A8', '$3B0', '$480', '$548', '$6D4']
       ... and 14 more
  V4: Modified at 34 locations
       Addresses: ['$2AA', '$348', '$3B2', '$412', '$448', '$45C', '$4FA', '$54C']
       ... and 26 more
  V5: Modified at 23 locations
       Addresses: ['$200', '$2A6', '$2BA', '$31A', '$4CE', '$4D8', '$760', '$7DE']
       ... and 15 more
  V6: Modified at 28 locations
       Addresses: ['$364', '$3AC', '$42E', '$434', '$4EA', '$5BE', '$5C2', '$5DC']
       ... and 20 more
  V7: Modified at 33 locations
       Addresses: ['$262', '$26C', '$27E', '$2CC', '$384', '$416', '$4AA', '$500']
       ... and 25 more

CONTROL FLOW ANALYSIS:
  216 control transfers detected:
    $208 ‚Üí $AF5
    $20E ‚Üí $287
    $210 ‚Üí $268
    $232 ‚Üí $CF2
    $264 ‚Üí $5C9
    ... and 211 more transfers
  Potential sorting loops: 126 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  292 instructions identified as sorting-related:
    Modifies sorted registers V[5]: 23 instructions
      $200: RND  V5, #07      ; V5 = random() AND $07
      $2A6: RND  V5, #70      ; V5 = random() AND $70
      $2BA: RND  V5, #67      ; V5 = random() AND $67
      ... and 20 more
    Modifies sorted registers V[3]: 22 instructions
      $206: LD   V3, #F8      ; Load $F8 into V3
      $238: LD   V3, #10      ; Load $10 into V3
      $338: ADD  V3, #F0      ; Add $F0 to V3 (V3 = (V3 + $F0) & 0xFF)
      ... and 19 more
    Logical operation on V[6] (sets VF=0 in CUDA): 4 instructions
      $20C: AND  VD, V6       ; VD = VD AND V6, VF = 0
      $666: XOR  V8, V6       ; V8 = V8 XOR V6, VF = 0
      $766: AND  V8, V6       ; V8 = V8 AND V6, VF = 0
      ... and 1 more
    Compares sorted registers V[4]: 21 instructions
      $21C: SNE  V4, #67      ; Skip next instruction if V4 != $67
      $24C: SNE  V4, #92      ; Skip next instruction if V4 != $92
      $454: SNE  V4, #C2      ; Skip next instruction if V4 != $C2
      ... and 18 more
    Compares sorted registers V[3]: 26 instructions
      $234: SE   V3, #C9      ; Skip next instruction if V3 == $C9
      $29A: SE   V3, #D3      ; Skip next instruction if V3 == $D3
      $2F4: SNE  V3, #F9      ; Skip next instruction if V3 != $F9
      ... and 23 more
    Compares sorted registers V[5]: 17 instructions
      $23E: SE   V5, #29      ; Skip next instruction if V5 == $29
      $26E: SE   V5, #94      ; Skip next instruction if V5 == $94
      $280: SNE  V5, #B6      ; Skip next instruction if V5 != $B6
      ... and 14 more
    Compares sorted registers V[2]: 13 instructions
      $250: SE   V2, #A6      ; Skip next instruction if V2 == $A6
      $2B4: SNE  V2, #C7      ; Skip next instruction if V2 != $C7
      $432: SNE  V2, #7B      ; Skip next instruction if V2 != $7B
      ... and 10 more
    Modifies sorted registers V[7]: 33 instructions
      $262: RND  V7, #46      ; V7 = random() AND $46
      $26C: LD   V7, #56      ; Load $56 into V7
      $27E: RND  V7, #8D      ; V7 = random() AND $8D
      ... and 30 more
    Compares sorted registers V[6]: 17 instructions
      $274: SNE  V6, VF       ; Skip next instruction if V6 != VF
      $318: SE   V6, #11      ; Skip next instruction if V6 == $11
      $468: SE   V6, #BF      ; Skip next instruction if V6 == $BF
      ... and 14 more
    Modifies sorted registers V[4]: 34 instructions
      $2AA: RND  V4, #BF      ; V4 = random() AND $BF
      $348: SUB  V4, VC       ; V4 = (V4 - VC) & 0xFF, VF = NOT borrow
      $3B2: LD   V4, #4A      ; Load $4A into V4
      ... and 31 more
    Modifies sorted registers V[2]: 32 instructions
      $32E: ADD  V2, #18      ; Add $18 to V2 (V2 = (V2 + $18) & 0xFF)
      $340: AND  V2, V1       ; V2 = V2 AND V1, VF = 0
      $398: RND  V2, #B2      ; V2 = random() AND $B2
      ... and 29 more
    Modifies sorted registers V[6]: 28 instructions
      $364: RND  V6, #AB      ; V6 = random() AND $AB
      $3AC: LD   V6, #9D      ; Load $9D into V6
      $42E: RND  V6, #6F      ; V6 = random() AND $6F
      ... and 25 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $368: SUBN VA, V4       ; VA = (V4 - VA) & 0xFF, VF = NOT borrow
    Register transfer involving V[5]: 1 instructions
      $44C: LD   V9, V5       ; Load V5 into V9
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $4C6: OR   VD, V7       ; VD = VD OR V7, VF = 0
    Compares sorted registers V[7]: 12 instructions
      $694: SE   V7, #82      ; Skip next instruction if V7 == $82
      $762: SNE  V7, #D2      ; Skip next instruction if V7 != $D2
      $878: SNE  V7, #36      ; Skip next instruction if V7 != $36
      ... and 9 more
    Logical operation on V[2] (sets VF=0 in CUDA): 2 instructions
      $894: OR   VA, V2       ; VA = VA OR V2, VF = 0
      $A60: OR   V8, V2       ; V8 = V8 OR V2, VF = 0
    Register transfer involving V[6]: 1 instructions
      $990: LD   VF, V6       ; Load V6 into VF
    Arithmetic on sorted registers V[7]: 1 instructions
      $9A8: ADD  VE, V7       ; VE = (VE + V7) & 0xFF, VF = carry
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $9DC: XOR  V9, V4       ; V9 = V9 XOR V4, VF = 0
      $B74: OR   VD, V4       ; VD = VD OR V4, VF = 0
    Compares sorted registers V[3, 4]: 1 instructions
      $D88: SNE  V3, V4       ; Skip next instruction if V3 != V4

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 456 (25.4%)
    LD: 244 (13.6%)
    JP: 218 (12.2%)
    ADD: 133 (7.4%)
    SNE: 128 (7.1%)
    SE: 121 (6.8%)
    DRW: 118 (6.6%)
    NOP: 108 (6.0%)
    CALL: 106 (5.9%)
    RND: 105 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 724
  Based on: 292 sorting instructions + 216 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B5828D01_V2-V7_L6_DES_C81_53526130.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 105 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [195, 110, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí195, V1: 3‚Üí110, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 81

CUDA EXECUTION STATISTICS:
  Total register operations: 8
  Register reads: 41
  Register writes: 20
  Register writes per cycle: 0.247

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 22 locations
       Addresses: ['$24C', '$2EC', '$3E4', '$598', '$59A', '$71A', '$A1C', '$A74']
       ... and 14 more
  V1: Modified at 22 locations
       Addresses: ['$2B6', '$3A0', '$3C6', '$406', '$43A', '$4C2', '$520', '$56C']
       ... and 14 more
  V2: Modified at 21 locations
       Addresses: ['$492', '$56A', '$5AE', '$5E6', '$5EE', '$646', '$716', '$768']
       ... and 13 more
  V3: Modified at 38 locations
       Addresses: ['$200', '$214', '$310', '$328', '$440', '$48A', '$498', '$530']
       ... and 30 more
  V4: Modified at 29 locations
       Addresses: ['$262', '$2BA', '$370', '$4A2', '$4FE', '$51E', '$58E', '$5C8']
       ... and 21 more
  V5: Modified at 29 locations
       Addresses: ['$230', '$2F2', '$302', '$33A', '$442', '$452', '$51C', '$532']
       ... and 21 more
  V6: Modified at 31 locations
       Addresses: ['$238', '$2D0', '$39E', '$3FE', '$402', '$420', '$42E', '$49C']
       ... and 23 more
  V7: Modified at 16 locations
       Addresses: ['$268', '$336', '$54C', '$758', '$88E', '$9EA', '$A34', '$ACE']
       ... and 8 more

CONTROL FLOW ANALYSIS:
  206 control transfers detected:
    $20A ‚Üí $D1F
    $210 ‚Üí $F65
    $220 ‚Üí $4B9
    $23A ‚Üí $498
    $23C ‚Üí $954
    ... and 201 more transfers
  Potential sorting loops: 119 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  254 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 38 instructions
      $200: ADD  V3, #08      ; Add $08 to V3 (V3 = (V3 + $08) & 0xFF)
      $214: ADD  V3, #64      ; Add $64 to V3 (V3 = (V3 + $64) & 0xFF)
      $310: SUBN V3, VF       ; V3 = (VF - V3) & 0xFF, VF = NOT borrow
      ... and 35 more
    Compares sorted registers V[4, 7]: 1 instructions
      $206: SNE  V7, V4       ; Skip next instruction if V7 != V4
    Compares sorted registers V[3]: 17 instructions
      $21C: SNE  V3, #92      ; Skip next instruction if V3 != $92
      $326: SE   V3, VA       ; Skip next instruction if V3 == VA
      $4A0: SE   V3, #71      ; Skip next instruction if V3 == $71
      ... and 14 more
    Modifies sorted registers V[5]: 29 instructions
      $230: ADD  V5, #44      ; Add $44 to V5 (V5 = (V5 + $44) & 0xFF)
      $2F2: LD   V5, #4B      ; Load $4B into V5
      $302: LD   V5, #78      ; Load $78 into V5
      ... and 26 more
    Modifies sorted registers V[6]: 31 instructions
      $238: RND  V6, #92      ; V6 = random() AND $92
      $2D0: ADD  V6, #42      ; Add $42 to V6 (V6 = (V6 + $42) & 0xFF)
      $39E: RND  V6, #CC      ; V6 = random() AND $CC
      ... and 28 more
    Modifies sorted registers V[4]: 29 instructions
      $262: AND  V4, VF       ; V4 = V4 AND VF, VF = 0
      $2BA: ADD  V4, #8D      ; Add $8D to V4 (V4 = (V4 + $8D) & 0xFF)
      $370: ADD  V4, #0F      ; Add $0F to V4 (V4 = (V4 + $0F) & 0xFF)
      ... and 26 more
    Modifies sorted registers V[7]: 16 instructions
      $268: RND  V7, #F2      ; V7 = random() AND $F2
      $336: ADD  V7, #EF      ; Add $EF to V7 (V7 = (V7 + $EF) & 0xFF)
      $54C: ADD  V7, V9       ; V7 = (V7 + V9) & 0xFF, VF = carry
      ... and 13 more
    Compares sorted registers V[6]: 13 instructions
      $270: SNE  V6, #2C      ; Skip next instruction if V6 != $2C
      $28A: SE   V6, #85      ; Skip next instruction if V6 == $85
      $2F6: SE   V6, #30      ; Skip next instruction if V6 == $30
      ... and 10 more
    Compares sorted registers V[4]: 12 instructions
      $2D6: SE   V4, #BE      ; Skip next instruction if V4 == $BE
      $384: SNE  V4, #03      ; Skip next instruction if V4 != $03
      $448: SE   V4, #3A      ; Skip next instruction if V4 == $3A
      ... and 9 more
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $2EC: AND  V0, V5       ; V0 = V0 AND V5, VF = 0
    Compares sorted registers V[7]: 10 instructions
      $30A: SE   V7, #B9      ; Skip next instruction if V7 == $B9
      $554: SE   V7, #76      ; Skip next instruction if V7 == $76
      $5B4: SE   V7, #1F      ; Skip next instruction if V7 == $1F
      ... and 7 more
    Compares sorted registers V[2]: 10 instructions
      $320: SNE  V2, #76      ; Skip next instruction if V2 != $76
      $568: SNE  V2, #75      ; Skip next instruction if V2 != $75
      $7AE: SE   V2, #07      ; Skip next instruction if V2 == $07
      ... and 7 more
    Register transfer involving V[6]: 1 instructions
      $3E2: LD   B, V6        ; Store BCD of V6 at [I], [I+1], [I+2]
    Compares sorted registers V[5]: 13 instructions
      $404: SE   V5, #85      ; Skip next instruction if V5 == $85
      $4BC: SNE  V5, #95      ; Skip next instruction if V5 != $95
      $67C: SE   V5, #11      ; Skip next instruction if V5 == $11
      ... and 10 more
    Modifies sorted registers V[2]: 21 instructions
      $492: LD   V2, #FC      ; Load $FC into V2
      $56A: ADD  V2, #90      ; Add $90 to V2 (V2 = (V2 + $90) & 0xFF)
      $5AE: RND  V2, #D1      ; V2 = random() AND $D1
      ... and 18 more
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $4E0: AND  VE, V3       ; VE = VE AND V3, VF = 0
    Arithmetic on sorted registers V[4]: 1 instructions
      $672: ADD  VC, V4       ; VC = (VC + V4) & 0xFF, VF = carry
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $6F0: AND  V9, V2       ; V9 = V9 AND V2, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $728: ADD  VE, V2       ; VE = (VE + V2) & 0xFF, VF = carry
    Compares sorted registers V[6, 7]: 1 instructions
      $736: SE   V6, V7       ; Skip next instruction if V6 == V7
    Arithmetic on sorted registers V[7]: 1 instructions
      $A78: SUB  V9, V7       ; V9 = (V9 - V7) & 0xFF, VF = NOT borrow
    Register transfer involving V[5]: 2 instructions
      $AC0: LD   V8, V5       ; Load V5 into V8
      $F24: LD   VD, V5       ; Load V5 into VD
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $C50: OR   VB, V7       ; VB = VB OR V7, VF = 0
      $DDE: XOR  VC, V7       ; VC = VC XOR V7, VF = 0
    Register transfer involving V[7]: 1 instructions
      $F0C: LD   VF, V7       ; Load V7 into VF
    Register transfer involving V[4]: 1 instructions
      $FDC: LD   B, V4        ; Store BCD of V4 at [I], [I+1], [I+2]

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 502 (28.0%)
    JP: 223 (12.4%)
    LD: 214 (11.9%)
    ADD: 131 (7.3%)
    SE: 125 (7.0%)
    NOP: 122 (6.8%)
    DRW: 108 (6.0%)
    SNE: 106 (5.9%)
    RND: 105 (5.9%)
    CALL: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 666
  Based on: 254 sorting instructions + 206 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B6166D01_V2-V7_L6_DES_C27_4f8aa660.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 110 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 27

CUDA EXECUTION STATISTICS:
  Total register operations: 0
  Register reads: 12
  Register writes: 42
  Register writes per cycle: 1.556

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 27 locations
       Addresses: ['$2D8', '$38E', '$41C', '$528', '$69C', '$74A', '$752', '$7A6']
       ... and 19 more
  V1: Modified at 21 locations
       Addresses: ['$232', '$2FA', '$30A', '$70A', '$7B4', '$88A', '$8B2', '$8F0']
       ... and 13 more
  V2: Modified at 20 locations
       Addresses: ['$31A', '$4FA', '$4FE', '$57C', '$7E0', '$828', '$8B0', '$8C4']
       ... and 12 more
  V3: Modified at 34 locations
       Addresses: ['$224', '$33A', '$364', '$3CA', '$3F4', '$42C', '$4D0', '$5C6']
       ... and 26 more
  V4: Modified at 29 locations
       Addresses: ['$28E', '$2B8', '$2E2', '$348', '$370', '$416', '$444', '$558']
       ... and 21 more
  V5: Modified at 27 locations
       Addresses: ['$268', '$2A2', '$332', '$3C2', '$3D2', '$4D6', '$4FC', '$54E']
       ... and 19 more
  V6: Modified at 22 locations
       Addresses: ['$286', '$2EE', '$3AA', '$3BE', '$3D6', '$49A', '$610', '$674']
       ... and 14 more
  V7: Modified at 27 locations
       Addresses: ['$3A4', '$464', '$46E', '$4EE', '$514', '$51A', '$5C4', '$654']
       ... and 19 more

CONTROL FLOW ANALYSIS:
  224 control transfers detected:
    $206 ‚Üí $86E
    $212 ‚Üí $727
    $220 ‚Üí $A0D
    $23A ‚Üí $CD4
    $244 ‚Üí $4E5
    ... and 219 more transfers
  Potential sorting loops: 116 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  260 instructions identified as sorting-related:
    Modifies sorted registers V[3]: 34 instructions
      $224: ADD  V3, #E2      ; Add $E2 to V3 (V3 = (V3 + $E2) & 0xFF)
      $33A: ADD  V3, #70      ; Add $70 to V3 (V3 = (V3 + $70) & 0xFF)
      $364: LD   V3, #9D      ; Load $9D into V3
      ... and 31 more
    Compares sorted registers V[3]: 19 instructions
      $22A: SE   V3, #52      ; Skip next instruction if V3 == $52
      $234: SE   V3, #86      ; Skip next instruction if V3 == $86
      $2C8: SE   V3, #1F      ; Skip next instruction if V3 == $1F
      ... and 16 more
    Compares sorted registers V[5]: 11 instructions
      $24C: SE   V5, #01      ; Skip next instruction if V5 == $01
      $388: SE   V5, #F0      ; Skip next instruction if V5 == $F0
      $44A: SNE  V5, #6F      ; Skip next instruction if V5 != $6F
      ... and 8 more
    Compares sorted registers V[6]: 13 instructions
      $256: SE   V6, #90      ; Skip next instruction if V6 == $90
      $3E8: SE   V6, #2F      ; Skip next instruction if V6 == $2F
      $470: SNE  V6, #97      ; Skip next instruction if V6 != $97
      ... and 10 more
    Modifies sorted registers V[5]: 27 instructions
      $268: RND  V5, #AD      ; V5 = random() AND $AD
      $2A2: RND  V5, #43      ; V5 = random() AND $43
      $332: ADD  V5, #EB      ; Add $EB to V5 (V5 = (V5 + $EB) & 0xFF)
      ... and 24 more
    Modifies sorted registers V[6]: 22 instructions
      $286: ADD  V6, #22      ; Add $22 to V6 (V6 = (V6 + $22) & 0xFF)
      $2EE: LD   V6, #38      ; Load $38 into V6
      $3AA: RND  V6, #15      ; V6 = random() AND $15
      ... and 19 more
    Modifies sorted registers V[4]: 29 instructions
      $28E: ADD  V4, #20      ; Add $20 to V4 (V4 = (V4 + $20) & 0xFF)
      $2B8: LD   V4, #6D      ; Load $6D into V4
      $2E2: RND  V4, #25      ; V4 = random() AND $25
      ... and 26 more
    Compares sorted registers V[2]: 13 instructions
      $2C4: SNE  V2, #EA      ; Skip next instruction if V2 != $EA
      $2F0: SNE  V2, #8B      ; Skip next instruction if V2 != $8B
      $666: SNE  V2, #AA      ; Skip next instruction if V2 != $AA
      ... and 10 more
    Compares sorted registers V[4]: 19 instructions
      $2CC: SE   V4, #81      ; Skip next instruction if V4 == $81
      $312: SNE  V4, #8F      ; Skip next instruction if V4 != $8F
      $37A: SE   V4, #2F      ; Skip next instruction if V4 == $2F
      ... and 16 more
    Logical operation on V[3] (sets VF=0 in CUDA): 3 instructions
      $2D0: XOR  V8, V3       ; V8 = V8 XOR V3, VF = 0
      $378: AND  VF, V3       ; VF = VF AND V3, VF = 0
      $C9C: OR   V8, V3       ; V8 = V8 OR V3, VF = 0
    Compares sorted registers V[4, 6]: 1 instructions
      $304: SE   V4, V6       ; Skip next instruction if V4 == V6
    Modifies sorted registers V[2]: 20 instructions
      $31A: ADD  V2, VB       ; V2 = (V2 + VB) & 0xFF, VF = carry
      $4FA: RND  V2, #B4      ; V2 = random() AND $B4
      $4FE: LD   V2, #C0      ; Load $C0 into V2
      ... and 17 more
    Modifies sorted registers V[7]: 27 instructions
      $3A4: LD   V7, #99      ; Load $99 into V7
      $464: RND  V7, #D6      ; V7 = random() AND $D6
      $46E: LD   V7, #89      ; Load $89 into V7
      ... and 24 more
    Compares sorted registers V[7]: 14 instructions
      $43A: SNE  V7, #1A      ; Skip next instruction if V7 != $1A
      $614: SNE  V7, VA       ; Skip next instruction if V7 != VA
      $6C4: SNE  V7, #C7      ; Skip next instruction if V7 != $C7
      ... and 11 more
    Arithmetic on sorted registers V[3]: 2 instructions
      $4F2: SUBN V8, V3       ; V8 = (V3 - V8) & 0xFF, VF = NOT borrow
      $B16: SUB  V1, V3       ; V1 = (V1 - V3) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[7]: 1 instructions
      $568: ADD  I, V7        ; I = (I + V7) & 0xFFFF
    Arithmetic on sorted registers V[4]: 1 instructions
      $734: ADD  VB, V4       ; VB = (VB + V4) & 0xFF, VF = carry
    Arithmetic on sorted registers V[6]: 1 instructions
      $906: SUB  VA, V6       ; VA = (VA - V6) & 0xFF, VF = NOT borrow
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $A54: XOR  V0, V7       ; V0 = V0 XOR V7, VF = 0
    Arithmetic on sorted registers V[2]: 1 instructions
      $DC4: SUBN VA, V2       ; VA = (V2 - VA) & 0xFF, VF = NOT borrow
    Compares sorted registers V[2, 4]: 1 instructions
      $ED6: SE   V2, V4       ; Skip next instruction if V2 == V4

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 493 (27.5%)
    LD: 236 (13.2%)
    JP: 204 (11.4%)
    SNE: 124 (6.9%)
    CALL: 123 (6.9%)
    DRW: 122 (6.8%)
    SE: 118 (6.6%)
    ADD: 113 (6.3%)
    RND: 110 (6.1%)
    NOP: 95 (5.3%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 708
  Based on: 260 sorting instructions + 224 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1012D01_V2-V7_L6_ASC_C108_b5b4ade4.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 127 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 207, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí207, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 108

CUDA EXECUTION STATISTICS:
  Total register operations: 17
  Register reads: 87
  Register writes: 225
  Register writes per cycle: 2.083

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 24 locations
       Addresses: ['$226', '$28C', '$2C0', '$320', '$332', '$378', '$3EA', '$44A']
       ... and 16 more
  V1: Modified at 27 locations
       Addresses: ['$200', '$206', '$294', '$2B8', '$2E6', '$2EA', '$322', '$332']
       ... and 19 more
  V2: Modified at 28 locations
       Addresses: ['$332', '$37A', '$3E2', '$454', '$4AE', '$4B2', '$4B4', '$4F8']
       ... and 20 more
  V3: Modified at 20 locations
       Addresses: ['$218', '$21A', '$232', '$2C8', '$310', '$332', '$368', '$36E']
       ... and 12 more
  V4: Modified at 34 locations
       Addresses: ['$230', '$262', '$2A8', '$2D4', '$328', '$332', '$35E', '$384']
       ... and 26 more
  V5: Modified at 23 locations
       Addresses: ['$22A', '$324', '$332', '$388', '$3CA', '$49C', '$4C8', '$4DC']
       ... and 15 more
  V6: Modified at 23 locations
       Addresses: ['$332', '$3C4', '$404', '$426', '$470', '$478', '$496', '$54E']
       ... and 15 more
  V7: Modified at 28 locations
       Addresses: ['$332', '$38A', '$39E', '$3A0', '$3CE', '$444', '$4B0', '$540']
       ... and 20 more

CONTROL FLOW ANALYSIS:
  206 control transfers detected:
    $208 ‚Üí $180 (LOOP)
    $20C ‚Üí $62A
    $214 ‚Üí $6A5
    $224 ‚Üí $082 (LOOP)
    $23A ‚Üí $13B (LOOP)
    ... and 201 more transfers
  Potential sorting loops: 124 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  243 instructions identified as sorting-related:
    Arithmetic on sorted registers V[7]: 1 instructions
      $200: SUB  V1, V7       ; V1 = (V1 - V7) & 0xFF, VF = NOT borrow
    Compares sorted registers V[3]: 12 instructions
      $216: SE   V3, #9E      ; Skip next instruction if V3 == $9E
      $438: SNE  V3, #5F      ; Skip next instruction if V3 != $5F
      $4CE: SE   V3, #87      ; Skip next instruction if V3 == $87
      ... and 9 more
    Modifies sorted registers V[3]: 19 instructions
      $218: RND  V3, #79      ; V3 = random() AND $79
      $21A: LD   V3, #75      ; Load $75 into V3
      $232: AND  V3, VE       ; V3 = V3 AND VE, VF = 0
      ... and 16 more
    Compares sorted registers V[7]: 13 instructions
      $222: SNE  V7, #0E      ; Skip next instruction if V7 != $0E
      $278: SE   V7, #26      ; Skip next instruction if V7 == $26
      $34A: SE   V8, V7       ; Skip next instruction if V8 == V7
      ... and 10 more
    Compares sorted registers V[4]: 13 instructions
      $228: SNE  V4, #76      ; Skip next instruction if V4 != $76
      $3E6: SE   V4, #12      ; Skip next instruction if V4 == $12
      $410: SE   V4, #CE      ; Skip next instruction if V4 == $CE
      ... and 10 more
    Modifies sorted registers V[5]: 22 instructions
      $22A: RND  V5, #28      ; V5 = random() AND $28
      $324: RND  V5, #41      ; V5 = random() AND $41
      $388: RND  V5, #3F      ; V5 = random() AND $3F
      ... and 19 more
    Modifies sorted registers V[4]: 33 instructions
      $230: LD   V4, #22      ; Load $22 into V4
      $262: LD   V4, #AA      ; Load $AA into V4
      $2A8: XOR  V4, VA       ; V4 = V4 XOR VA, VF = 0
      ... and 30 more
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $332: LD   VF, [I]      ; Load V0-VF from [I], then I += 16
    Modifies sorted registers V[2]: 27 instructions
      $37A: RND  V2, #A0      ; V2 = random() AND $A0
      $3E2: RND  V2, #2D      ; V2 = random() AND $2D
      $454: LD   V2, #8D      ; Load $8D into V2
      ... and 24 more
    Modifies sorted registers V[7]: 27 instructions
      $38A: RND  V7, #5D      ; V7 = random() AND $5D
      $39E: ADD  V7, #9E      ; Add $9E to V7 (V7 = (V7 + $9E) & 0xFF)
      $3A0: ADD  V7, #27      ; Add $27 to V7 (V7 = (V7 + $27) & 0xFF)
      ... and 24 more
    Compares sorted registers V[5]: 14 instructions
      $3A2: SE   V5, #74      ; Skip next instruction if V5 == $74
      $44E: SE   V5, #D3      ; Skip next instruction if V5 == $D3
      $4A0: SE   V5, #82      ; Skip next instruction if V5 == $82
      ... and 11 more
    Modifies sorted registers V[6]: 22 instructions
      $3C4: RND  V6, #5B      ; V6 = random() AND $5B
      $404: LD   V6, #11      ; Load $11 into V6
      $426: RND  V6, #E1      ; V6 = random() AND $E1
      ... and 19 more
    Compares sorted registers V[2]: 16 instructions
      $432: SNE  V2, #15      ; Skip next instruction if V2 != $15
      $506: SNE  V2, #45      ; Skip next instruction if V2 != $45
      $584: SE   V2, #59      ; Skip next instruction if V2 == $59
      ... and 13 more
    Register transfer involving V[4]: 1 instructions
      $51C: LD   VD, V4       ; Load V4 into VD
    Logical operation on V[7] (sets VF=0 in CUDA): 2 instructions
      $59C: XOR  V1, V7       ; V1 = V1 XOR V7, VF = 0
      $F42: OR   VC, V7       ; VC = VC OR V7, VF = 0
    Register transfer involving V[7]: 1 instructions
      $622: LD   VE, V7       ; Load V7 into VE
    Compares sorted registers V[6]: 11 instructions
      $644: SNE  V6, #9F      ; Skip next instruction if V6 != $9F
      $64C: SNE  V6, #A4      ; Skip next instruction if V6 != $A4
      $866: SE   V6, #A3      ; Skip next instruction if V6 == $A3
      ... and 8 more
    Arithmetic on sorted registers V[6]: 2 instructions
      $6DA: SUBN VA, V6       ; VA = (V6 - VA) & 0xFF, VF = NOT borrow
      $FA2: SUBN VD, V6       ; VD = (V6 - VD) & 0xFF, VF = NOT borrow
    Register transfer involving V[2]: 1 instructions
      $878: LD   F, V2        ; I = font_address(V2 & 0xF) = 0x50 + (V2 & 0xF) * 5
    Arithmetic on sorted registers V[4]: 1 instructions
      $87E: SUBN V1, V4       ; V1 = (V4 - V1) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 1 instructions
      $8B2: ADD  VE, V2       ; VE = (VE + V2) & 0xFF, VF = carry
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $A62: OR   VB, V5       ; VB = VB OR V5, VF = 0
    Compares sorted registers V[3, 7]: 1 instructions
      $B7C: SE   V3, V7       ; Skip next instruction if V3 == V7
    Arithmetic on sorted registers V[5]: 1 instructions
      $ED6: ADD  V8, V5       ; V8 = (V8 + V5) & 0xFF, VF = carry

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 498 (27.8%)
    JP: 225 (12.6%)
    LD: 217 (12.1%)
    SE: 132 (7.4%)
    NOP: 128 (7.1%)
    RND: 127 (7.1%)
    DRW: 118 (6.6%)
    ADD: 102 (5.7%)
    SNE: 99 (5.5%)
    CALL: 98 (5.5%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 655
  Based on: 243 sorting instructions + 206 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1028D01_V0-V5_L6_DES_C9_48fb8ad7.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 129 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [8, 7, 6, 5, 4, 3]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V0-V5
  Start position: V0
  End position: V5
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 7, 6, 5, 4, 3, 5, 4]
  Changes: V1: 3‚Üí7, V3: 1‚Üí5, V4: 7‚Üí4, V5: 2‚Üí3
  ‚úì Correct initial test pattern detected
  Achievement cycle: 9

CUDA EXECUTION STATISTICS:
  Total register operations: 0
  Register reads: 3
  Register writes: 15
  Register writes per cycle: 1.667

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 26 locations
       Addresses: ['$210', '$224', '$26C', '$304', '$3CE', '$584', '$5DE', '$608']
       ... and 18 more
  V1: Modified at 22 locations
       Addresses: ['$210', '$21E', '$254', '$3B8', '$4B8', '$51A', '$638', '$68C']
       ... and 14 more
  V2: Modified at 38 locations
       Addresses: ['$210', '$218', '$330', '$3C4', '$568', '$570', '$5C0', '$5FE']
       ... and 30 more
  V3: Modified at 25 locations
       Addresses: ['$210', '$2D6', '$430', '$446', '$634', '$652', '$692', '$6DA']
       ... and 17 more
  V4: Modified at 30 locations
       Addresses: ['$210', '$30C', '$31E', '$3AE', '$458', '$4AE', '$4CA', '$5FC']
       ... and 22 more
  V5: Modified at 18 locations
       Addresses: ['$210', '$2D0', '$37A', '$394', '$3C6', '$59A', '$5E4', '$696']
       ... and 10 more
  V6: Modified at 31 locations
       Addresses: ['$210', '$222', '$25A', '$272', '$332', '$44C', '$456', '$470']
       ... and 23 more
  V7: Modified at 30 locations
       Addresses: ['$20E', '$210', '$268', '$302', '$408', '$4D8', '$556', '$740']
       ... and 22 more

CONTROL FLOW ANALYSIS:
  220 control transfers detected:
    $204 ‚Üí $206
    $228 ‚Üí $40E
    $22C ‚Üí $079 (LOOP)
    $232 ‚Üí $FEE
    $234 ‚Üí $9E6
    ... and 215 more transfers
  Potential sorting loops: 128 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  254 instructions identified as sorting-related:
    Compares sorted registers V[4]: 8 instructions
      $200: SE   V4, #6A      ; Skip next instruction if V4 == $6A
      $2A6: SE   V4, V4       ; Skip next instruction if V4 == V4
      $4FE: SE   V4, #60      ; Skip next instruction if V4 == $60
      ... and 5 more
    Modifies sorted registers V[0, 1, 2, 3, 4, 5]: 1 instructions
      $210: LD   VB, [I]      ; Load V0-VB from [I], then I += 12
    Modifies sorted registers V[2]: 37 instructions
      $218: AND  V2, V1       ; V2 = V2 AND V1, VF = 0
      $330: RND  V2, #EB      ; V2 = random() AND $EB
      $3C4: LD   V2, #C3      ; Load $C3 into V2
      ... and 34 more
    Modifies sorted registers V[1]: 21 instructions
      $21E: RND  V1, #04      ; V1 = random() AND $04
      $254: RND  V1, #CA      ; V1 = random() AND $CA
      $3B8: LD   V1, #BC      ; Load $BC into V1
      ... and 18 more
    Modifies sorted registers V[0]: 25 instructions
      $224: LD   V0, #CD      ; Load $CD into V0
      $26C: RND  V0, #14      ; V0 = random() AND $14
      $304: RND  V0, #9E      ; V0 = random() AND $9E
      ... and 22 more
    Compares sorted registers V[3]: 13 instructions
      $230: SNE  V3, #5C      ; Skip next instruction if V3 != $5C
      $6B0: SNE  V3, #9D      ; Skip next instruction if V3 != $9D
      $8BC: SNE  V3, #2D      ; Skip next instruction if V3 != $2D
      ... and 10 more
    Compares sorted registers V[2]: 14 instructions
      $282: SE   VA, V2       ; Skip next instruction if VA == V2
      $364: SE   V2, #DC      ; Skip next instruction if V2 == $DC
      $4A8: SE   V2, #13      ; Skip next instruction if V2 == $13
      ... and 11 more
    Compares sorted registers V[1]: 21 instructions
      $2B2: SNE  V1, #20      ; Skip next instruction if V1 != $20
      $328: SE   V1, #16      ; Skip next instruction if V1 == $16
      $368: SE   V1, #F9      ; Skip next instruction if V1 == $F9
      ... and 18 more
    Register transfer involving V[0, 1, 2, 3, 4, 5]: 2 instructions
      $2C0: LD   [I], V9      ; Store V0-V9 at [I], then I += 10
      $8E8: LD   [I], V9      ; Store V0-V9 at [I], then I += 10
    Modifies sorted registers V[5]: 17 instructions
      $2D0: ADD  V5, #34      ; Add $34 to V5 (V5 = (V5 + $34) & 0xFF)
      $37A: RND  V5, #C1      ; V5 = random() AND $C1
      $394: OR   V5, V0       ; V5 = V5 OR V0, VF = 0
      ... and 14 more
    Modifies sorted registers V[3]: 24 instructions
      $2D6: OR   V3, V1       ; V3 = V3 OR V1, VF = 0
      $430: LD   V3, #AF      ; Load $AF into V3
      $446: ADD  V3, #E8      ; Add $E8 to V3 (V3 = (V3 + $E8) & 0xFF)
      ... and 21 more
    Modifies sorted registers V[4]: 29 instructions
      $30C: LD   V4, #71      ; Load $71 into V4
      $31E: RND  V4, #B9      ; V4 = random() AND $B9
      $3AE: RND  V4, #4C      ; V4 = random() AND $4C
      ... and 26 more
    Compares sorted registers V[0]: 16 instructions
      $342: SE   V0, #78      ; Skip next instruction if V0 == $78
      $3A6: SNE  V0, #01      ; Skip next instruction if V0 != $01
      $3F6: SE   V0, #25      ; Skip next instruction if V0 == $25
      ... and 13 more
    Compares sorted registers V[5]: 13 instructions
      $402: SNE  V5, #7F      ; Skip next instruction if V5 != $7F
      $43E: SNE  V5, #63      ; Skip next instruction if V5 != $63
      $49A: SE   V5, #D7      ; Skip next instruction if V5 == $D7
      ... and 10 more
    Arithmetic on sorted registers V[1]: 4 instructions
      $42A: SUBN VC, V1       ; VC = (V1 - VC) & 0xFF, VF = NOT borrow
      $860: SUB  V7, V1       ; V7 = (V7 - V1) & 0xFF, VF = NOT borrow
      $CDC: SUBN VC, V1       ; VC = (V1 - VC) & 0xFF, VF = NOT borrow
      ... and 1 more
    Arithmetic on sorted registers V[2]: 2 instructions
      $564: SUBN VB, V2       ; VB = (V2 - VB) & 0xFF, VF = NOT borrow
      $F4A: SUBN V7, V2       ; V7 = (V2 - V7) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4, 5]: 1 instructions
      $A26: SE   V4, V5       ; Skip next instruction if V4 == V5
    Compares sorted registers V[0, 5]: 1 instructions
      $A70: SE   V0, V5       ; Skip next instruction if V0 == V5
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $D7C: OR   VD, V4       ; VD = VD OR V4, VF = 0
      $F8A: OR   VC, V4       ; VC = VC OR V4, VF = 0
    Register transfer involving V[2]: 2 instructions
      $F26: LD   VE, V2       ; Load V2 into VE
      $F42: LD   F, V2        ; I = font_address(V2 & 0xF) = 0x50 + (V2 & 0xF) * 5
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $F80: AND  V8, V5       ; V8 = V8 AND V5, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 459 (25.6%)
    LD: 241 (13.4%)
    JP: 222 (12.4%)
    ADD: 130 (7.3%)
    RND: 129 (7.2%)
    CALL: 126 (7.0%)
    SE: 117 (6.5%)
    NOP: 109 (6.1%)
    SNE: 106 (5.9%)
    DRW: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 694
  Based on: 254 sorting instructions + 220 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1133D01_V0-V5_L6_ASC_C219_0e1ef954.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [223, 224, 225, 226, 227, 228] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [223, 224, 225, 226, 227, 228] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 94 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [223, 224, 225, 226, 227, 228]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V0-V5
  Start position: V0
  End position: V5
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 224, 225, 226, 227, 228, 102, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí224, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí102, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 219

CUDA EXECUTION STATISTICS:
  Total register operations: 19
  Register reads: 140
  Register writes: 274
  Register writes per cycle: 1.251

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 31 locations
       Addresses: ['$340', '$38C', '$454', '$502', '$552', '$5FC', '$7EA', '$838']
       ... and 23 more
  V1: Modified at 15 locations
       Addresses: ['$328', '$338', '$412', '$646', '$876', '$92C', '$930', '$93C']
       ... and 7 more
  V2: Modified at 27 locations
       Addresses: ['$492', '$51E', '$5DC', '$634', '$678', '$6E4', '$786', '$7BC']
       ... and 19 more
  V3: Modified at 28 locations
       Addresses: ['$2D6', '$37A', '$39E', '$3B2', '$3F0', '$3F4', '$59A', '$5B8']
       ... and 20 more
  V4: Modified at 15 locations
       Addresses: ['$2CC', '$510', '$59E', '$654', '$6D0', '$724', '$732', '$8C4']
       ... and 7 more
  V5: Modified at 24 locations
       Addresses: ['$288', '$28C', '$2C2', '$2E4', '$306', '$30C', '$336', '$342']
       ... and 16 more
  V6: Modified at 32 locations
       Addresses: ['$20E', '$274', '$2C6', '$300', '$34A', '$3C4', '$400', '$43E']
       ... and 24 more
  V7: Modified at 21 locations
       Addresses: ['$248', '$286', '$394', '$45E', '$4FA', '$66E', '$6A8', '$6B2']
       ... and 13 more

CONTROL FLOW ANALYSIS:
  229 control transfers detected:
    $200 ‚Üí $B07
    $204 ‚Üí $2CA
    $208 ‚Üí $923
    $20C ‚Üí $FD5
    $226 ‚Üí $346
    ... and 224 more transfers
  Potential sorting loops: 134 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  254 instructions identified as sorting-related:
    Compares sorted registers V[2]: 13 instructions
      $220: SE   V2, #A4      ; Skip next instruction if V2 == $A4
      $308: SNE  V2, #DD      ; Skip next instruction if V2 != $DD
      $46C: SE   V2, #6E      ; Skip next instruction if V2 == $6E
      ... and 10 more
    Compares sorted registers V[4]: 23 instructions
      $22E: SE   V4, #C6      ; Skip next instruction if V4 == $C6
      $234: SE   V4, #7B      ; Skip next instruction if V4 == $7B
      $2A0: SE   V4, #07      ; Skip next instruction if V4 == $07
      ... and 20 more
    Compares sorted registers V[5]: 17 instructions
      $284: SNE  V5, #86      ; Skip next instruction if V5 != $86
      $3A2: SNE  V5, #E3      ; Skip next instruction if V5 != $E3
      $3AA: SE   V5, #3D      ; Skip next instruction if V5 == $3D
      ... and 14 more
    Modifies sorted registers V[5]: 24 instructions
      $288: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      $28C: ADD  V5, #B7      ; Add $B7 to V5 (V5 = (V5 + $B7) & 0xFF)
      $2C2: RND  V5, #DF      ; V5 = random() AND $DF
      ... and 21 more
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $2A6: XOR  VD, V1       ; VD = VD XOR V1, VF = 0
    Compares sorted registers V[0]: 16 instructions
      $2C4: SNE  V0, #9C      ; Skip next instruction if V0 != $9C
      $35C: SNE  V0, #8D      ; Skip next instruction if V0 != $8D
      $36A: SE   V0, #6B      ; Skip next instruction if V0 == $6B
      ... and 13 more
    Modifies sorted registers V[4]: 15 instructions
      $2CC: LD   V4, #ED      ; Load $ED into V4
      $510: OR   V4, V7       ; V4 = V4 OR V7, VF = 0
      $59E: AND  V4, VB       ; V4 = V4 AND VB, VF = 0
      ... and 12 more
    Modifies sorted registers V[3]: 28 instructions
      $2D6: AND  V3, V7       ; V3 = V3 AND V7, VF = 0
      $37A: RND  V3, #7D      ; V3 = random() AND $7D
      $39E: RND  V3, #8C      ; V3 = random() AND $8C
      ... and 25 more
    Modifies sorted registers V[1]: 15 instructions
      $328: ADD  V1, #45      ; Add $45 to V1 (V1 = (V1 + $45) & 0xFF)
      $338: SUB  V1, V3       ; V1 = (V1 - V3) & 0xFF, VF = NOT borrow
      $412: LD   V1, #15      ; Load $15 into V1
      ... and 12 more
    Compares sorted registers V[1]: 15 instructions
      $33E: SNE  V1, #22      ; Skip next instruction if V1 != $22
      $384: SNE  V1, #07      ; Skip next instruction if V1 != $07
      $434: SNE  V1, #9A      ; Skip next instruction if V1 != $9A
      ... and 12 more
    Modifies sorted registers V[0]: 31 instructions
      $340: LD   V0, #94      ; Load $94 into V0
      $38C: RND  V0, #44      ; V0 = random() AND $44
      $454: ADD  V0, #E0      ; Add $E0 to V0 (V0 = (V0 + $E0) & 0xFF)
      ... and 28 more
    Compares sorted registers V[3]: 13 instructions
      $3F2: SE   V3, #94      ; Skip next instruction if V3 == $94
      $548: SNE  V3, #8D      ; Skip next instruction if V3 != $8D
      $88E: SE   V3, #BE      ; Skip next instruction if V3 == $BE
      ... and 10 more
    Modifies sorted registers V[2]: 27 instructions
      $492: SUBN V2, VB       ; V2 = (VB - V2) & 0xFF, VF = NOT borrow
      $51E: XOR  V2, V7       ; V2 = V2 XOR V7, VF = 0
      $5DC: LD   V2, #D8      ; Load $D8 into V2
      ... and 24 more
    Arithmetic on sorted registers V[2]: 2 instructions
      $530: ADD  VC, V2       ; VC = (VC + V2) & 0xFF, VF = carry
      $D68: ADD  VC, V2       ; VC = (VC + V2) & 0xFF, VF = carry
    Arithmetic on sorted registers V[0]: 1 instructions
      $53C: SUBN V6, V0       ; V6 = (V0 - V6) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $590: XOR  V8, V3       ; V8 = V8 XOR V3, VF = 0
    Logical operation on V[0] (sets VF=0 in CUDA): 1 instructions
      $6E0: OR   V9, V0       ; V9 = V9 OR V0, VF = 0
    Register transfer involving V[1]: 2 instructions
      $87C: LD   VB, V1       ; Load V1 into VB
      $9E4: LD   B, V1        ; Store BCD of V1 at [I], [I+1], [I+2]
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $9B4: OR   VA, V4       ; VA = VA OR V4, VF = 0
      $CCE: OR   VC, V4       ; VC = VC OR V4, VF = 0
    Arithmetic on sorted registers V[5]: 3 instructions
      $BAA: SUB  VB, V5       ; VB = (VB - V5) & 0xFF, VF = NOT borrow
      $F0C: ADD  V6, V5       ; V6 = (V6 + V5) & 0xFF, VF = carry
      $F74: ADD  VD, V5       ; VD = (VD + V5) & 0xFF, VF = carry
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $D5C: OR   VB, V2       ; VB = VB OR V2, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $D66: SUB  VD, V3       ; VD = (VD - V3) & 0xFF, VF = NOT borrow
    Register transfer involving V[4]: 1 instructions
      $EBE: LD   ST, V4       ; Load V4 into sound timer
    Register transfer involving V[5]: 1 instructions
      $F96: LD   VD, V5       ; Load V5 into VD

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 519 (29.0%)
    JP: 250 (14.0%)
    LD: 212 (11.8%)
    SNE: 118 (6.6%)
    ADD: 116 (6.5%)
    NOP: 113 (6.3%)
    DRW: 107 (6.0%)
    SE: 106 (5.9%)
    CALL: 103 (5.7%)
    RND: 94 (5.2%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 712
  Based on: 254 sorting instructions + 229 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1161D01_V2-V7_L6_ASC_C792_6a6f5428.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 105 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 244, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí244, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 792

CUDA EXECUTION STATISTICS:
  Total register operations: 46
  Register reads: 441
  Register writes: 1088
  Register writes per cycle: 1.374

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$250', '$352', '$384', '$38A', '$5E6', '$7EE', '$89C', '$8FE']
       ... and 15 more
  V1: Modified at 30 locations
       Addresses: ['$236', '$322', '$3A8', '$414', '$42E', '$568', '$5A4', '$626']
       ... and 22 more
  V2: Modified at 34 locations
       Addresses: ['$20E', '$218', '$2EA', '$4D8', '$528', '$536', '$5F6', '$704']
       ... and 26 more
  V3: Modified at 26 locations
       Addresses: ['$280', '$49A', '$4C6', '$506', '$562', '$5D8', '$5EE', '$600']
       ... and 18 more
  V4: Modified at 31 locations
       Addresses: ['$3F0', '$44A', '$494', '$4CC', '$5AC', '$5FA', '$640', '$6AA']
       ... and 23 more
  V5: Modified at 23 locations
       Addresses: ['$256', '$318', '$36C', '$46A', '$49E', '$4AE', '$4C2', '$4DE']
       ... and 15 more
  V6: Modified at 21 locations
       Addresses: ['$210', '$2CA', '$2FA', '$34C', '$44E', '$45A', '$4C8', '$522']
       ... and 13 more
  V7: Modified at 20 locations
       Addresses: ['$2D2', '$360', '$3DE', '$40A', '$43C', '$4F2', '$616', '$672']
       ... and 12 more

CONTROL FLOW ANALYSIS:
  237 control transfers detected:
    $204 ‚Üí $DA0
    $20A ‚Üí $4A5
    $222 ‚Üí $A17
    $228 ‚Üí $3BC
    $246 ‚Üí $FF5
    ... and 232 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  251 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 33 instructions
      $20E: LD   V2, #6C      ; Load $6C into V2
      $218: LD   V2, #70      ; Load $70 into V2
      $2EA: ADD  V2, #CB      ; Add $CB to V2 (V2 = (V2 + $CB) & 0xFF)
      ... and 30 more
    Modifies sorted registers V[6]: 21 instructions
      $210: RND  V6, #63      ; V6 = random() AND $63
      $2CA: LD   V6, #8D      ; Load $8D into V6
      $2FA: ADD  V6, #83      ; Add $83 to V6 (V6 = (V6 + $83) & 0xFF)
      ... and 18 more
    Compares sorted registers V[6]: 14 instructions
      $230: SE   VB, V6       ; Skip next instruction if VB == V6
      $31C: SNE  V6, #41      ; Skip next instruction if V6 != $41
      $3FA: SNE  V6, #FF      ; Skip next instruction if V6 != $FF
      ... and 11 more
    Compares sorted registers V[5]: 14 instructions
      $244: SNE  V5, #00      ; Skip next instruction if V5 != $00
      $308: SE   V5, #F3      ; Skip next instruction if V5 == $F3
      $4D2: SE   V5, #DE      ; Skip next instruction if V5 == $DE
      ... and 11 more
    Modifies sorted registers V[5]: 23 instructions
      $256: LD   V5, #1E      ; Load $1E into V5
      $318: RND  V5, #0D      ; V5 = random() AND $0D
      $36C: LD   V5, #1D      ; Load $1D into V5
      ... and 20 more
    Compares sorted registers V[2]: 19 instructions
      $260: SNE  V2, #7F      ; Skip next instruction if V2 != $7F
      $298: SE   V2, #AE      ; Skip next instruction if V2 == $AE
      $5E0: SE   V2, #6F      ; Skip next instruction if V2 == $6F
      ... and 16 more
    Compares sorted registers V[4]: 10 instructions
      $274: SE   V4, #4B      ; Skip next instruction if V4 == $4B
      $5EA: SNE  V4, #19      ; Skip next instruction if V4 != $19
      $8EA: SNE  V4, #04      ; Skip next instruction if V4 != $04
      ... and 7 more
    Modifies sorted registers V[3]: 25 instructions
      $280: RND  V3, #C3      ; V3 = random() AND $C3
      $49A: LD   V3, #70      ; Load $70 into V3
      $4C6: SHR  V3           ; V3 = V3 >> 1, VF = LSB
      ... and 22 more
    Compares sorted registers V[3]: 13 instructions
      $2BA: SNE  V3, #AE      ; Skip next instruction if V3 != $AE
      $588: SNE  V3, #D2      ; Skip next instruction if V3 != $D2
      $5C0: SNE  V3, #BC      ; Skip next instruction if V3 != $BC
      ... and 10 more
    Modifies sorted registers V[7]: 20 instructions
      $2D2: OR   V7, VE       ; V7 = V7 OR VE, VF = 0
      $360: ADD  V7, #9B      ; Add $9B to V7 (V7 = (V7 + $9B) & 0xFF)
      $3DE: LD   V7, VC       ; Load VC into V7
      ... and 17 more
    Arithmetic on sorted registers V[7]: 1 instructions
      $328: SUBN VD, V7       ; VD = (V7 - VD) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[5]: 2 instructions
      $388: ADD  VD, V5       ; VD = (VD + V5) & 0xFF, VF = carry
      $BE0: SUB  VE, V5       ; VE = (VE - V5) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 3 instructions
      $390: XOR  VA, V4       ; VA = VA XOR V4, VF = 0
      $56C: AND  VB, V4       ; VB = VB AND V4, VF = 0
      $728: AND  VF, V4       ; VF = VF AND V4, VF = 0
    Modifies sorted registers V[4]: 31 instructions
      $3F0: RND  V4, #FE      ; V4 = random() AND $FE
      $44A: OR   V4, V0       ; V4 = V4 OR V0, VF = 0
      $494: LD   V4, #94      ; Load $94 into V4
      ... and 28 more
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $450: XOR  V9, V6       ; V9 = V9 XOR V6, VF = 0
      $DC8: XOR  V8, V6       ; V8 = V8 XOR V6, VF = 0
    Compares sorted registers V[7]: 15 instructions
      $4A2: SNE  V7, #65      ; Skip next instruction if V7 != $65
      $5BE: SE   V7, #4D      ; Skip next instruction if V7 == $4D
      $632: SNE  V7, #9F      ; Skip next instruction if V7 != $9F
      ... and 12 more
    Register transfer involving V[5]: 1 instructions
      $558: LD   VD, V5       ; Load V5 into VD
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $62C: XOR  VC, V7       ; VC = VC XOR V7, VF = 0
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $7CC: OR   VF, V2       ; VF = VF OR V2, VF = 0
    Modifies sorted registers V[2, 3]: 1 instructions
      $CDC: LD   V3, [I]      ; Load V0-V3 from [I], then I += 4
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $DCE: AND  VC, V5       ; VC = VC AND V5, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 500 (27.9%)
    JP: 242 (13.5%)
    LD: 240 (13.4%)
    SE: 124 (6.9%)
    ADD: 120 (6.7%)
    CALL: 114 (6.4%)
    SNE: 109 (6.1%)
    RND: 105 (5.9%)
    NOP: 98 (5.5%)
    DRW: 86 (4.8%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 725
  Based on: 251 sorting instructions + 237 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1168D01_V2-V7_L6_ASC_C102_3da69847.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 3 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [225, 226, 227, 228, 229, 230] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [225, 226, 227, 228, 229, 230] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 109 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [225, 226, 227, 228, 229, 230]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [223, 207, 225, 226, 227, 228, 229, 230]
  Changes: V0: 8‚Üí223, V1: 3‚Üí207, V2: 6‚Üí225, V3: 1‚Üí226, V4: 7‚Üí227, V5: 2‚Üí228, V6: 5‚Üí229, V7: 4‚Üí230
  ‚úì Correct initial test pattern detected
  Achievement cycle: 102

CUDA EXECUTION STATISTICS:
  Total register operations: 9
  Register reads: 64
  Register writes: 77
  Register writes per cycle: 0.755

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 26 locations
       Addresses: ['$228', '$31E', '$446', '$486', '$544', '$604', '$64E', '$65C']
       ... and 18 more
  V1: Modified at 16 locations
       Addresses: ['$2A4', '$4F6', '$524', '$530', '$69A', '$6BA', '$812', '$81C']
       ... and 8 more
  V2: Modified at 27 locations
       Addresses: ['$206', '$2C6', '$336', '$46C', '$476', '$4AE', '$4CE', '$554']
       ... and 19 more
  V3: Modified at 30 locations
       Addresses: ['$250', '$3E4', '$44C', '$478', '$55E', '$5B4', '$5BC', '$612']
       ... and 22 more
  V4: Modified at 30 locations
       Addresses: ['$2DC', '$32A', '$3D4', '$404', '$426', '$438', '$576', '$62C']
       ... and 22 more
  V5: Modified at 24 locations
       Addresses: ['$322', '$34C', '$39C', '$3A8', '$5B8', '$646', '$726', '$74E']
       ... and 16 more
  V6: Modified at 32 locations
       Addresses: ['$302', '$37A', '$39E', '$4DA', '$55A', '$55C', '$622', '$6B4']
       ... and 24 more
  V7: Modified at 19 locations
       Addresses: ['$236', '$260', '$33A', '$3E6', '$49E', '$4FE', '$682', '$6F6']
       ... and 11 more

CONTROL FLOW ANALYSIS:
  232 control transfers detected:
    $208 ‚Üí $FC9
    $20A ‚Üí $D02
    $238 ‚Üí $7B4
    $26A ‚Üí $621
    $27E ‚Üí $51E
    ... and 227 more transfers
  Potential sorting loops: 127 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  265 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 27 instructions
      $206: RND  V2, #FB      ; V2 = random() AND $FB
      $2C6: ADD  V2, #06      ; Add $06 to V2 (V2 = (V2 + $06) & 0xFF)
      $336: LD   V2, #0F      ; Load $0F into V2
      ... and 24 more
    Compares sorted registers V[2]: 12 instructions
      $20C: SE   V2, #BE      ; Skip next instruction if V2 == $BE
      $496: SNE  V2, #B6      ; Skip next instruction if V2 != $B6
      $49C: SNE  V2, #51      ; Skip next instruction if V2 != $51
      ... and 9 more
    Compares sorted registers V[4]: 14 instructions
      $230: SE   V4, #9C      ; Skip next instruction if V4 == $9C
      $232: SE   V4, #BF      ; Skip next instruction if V4 == $BF
      $254: SNE  V4, #FE      ; Skip next instruction if V4 != $FE
      ... and 11 more
    Modifies sorted registers V[7]: 19 instructions
      $236: SUB  V7, V0       ; V7 = (V7 - V0) & 0xFF, VF = NOT borrow
      $260: LD   V7, #5B      ; Load $5B into V7
      $33A: LD   V7, #E2      ; Load $E2 into V7
      ... and 16 more
    Compares sorted registers V[7]: 19 instructions
      $248: SE   V7, #ED      ; Skip next instruction if V7 == $ED
      $25C: SNE  V7, #36      ; Skip next instruction if V7 != $36
      $2E6: SNE  V7, #49      ; Skip next instruction if V7 != $49
      ... and 16 more
    Modifies sorted registers V[3]: 30 instructions
      $250: ADD  V3, #48      ; Add $48 to V3 (V3 = (V3 + $48) & 0xFF)
      $3E4: OR   V3, V3       ; V3 = V3 OR V3, VF = 0
      $44C: SHR  V3           ; V3 = V3 >> 1, VF = LSB
      ... and 27 more
    Compares sorted registers V[3]: 14 instructions
      $258: SE   V3, #F5      ; Skip next instruction if V3 == $F5
      $30C: SE   V3, #76      ; Skip next instruction if V3 == $76
      $32C: SNE  V3, #ED      ; Skip next instruction if V3 != $ED
      ... and 11 more
    Compares sorted registers V[6]: 14 instructions
      $274: SNE  V6, #62      ; Skip next instruction if V6 != $62
      $42E: SE   V9, V6       ; Skip next instruction if V9 == V6
      $4EE: SNE  V6, #90      ; Skip next instruction if V6 != $90
      ... and 11 more
    Register transfer involving V[7]: 1 instructions
      $2C4: LD   DT, V7       ; Load V7 into delay timer
    Modifies sorted registers V[4]: 30 instructions
      $2DC: ADD  V4, #A0      ; Add $A0 to V4 (V4 = (V4 + $A0) & 0xFF)
      $32A: ADD  V4, #66      ; Add $66 to V4 (V4 = (V4 + $66) & 0xFF)
      $3D4: ADD  V4, #E7      ; Add $E7 to V4 (V4 = (V4 + $E7) & 0xFF)
      ... and 27 more
    Modifies sorted registers V[6]: 32 instructions
      $302: ADD  V6, #FF      ; Add $FF to V6 (V6 = (V6 + $FF) & 0xFF)
      $37A: RND  V6, #E4      ; V6 = random() AND $E4
      $39E: RND  V6, #D2      ; V6 = random() AND $D2
      ... and 29 more
    Compares sorted registers V[5]: 13 instructions
      $316: SE   V5, #9D      ; Skip next instruction if V5 == $9D
      $3C6: SNE  V5, #97      ; Skip next instruction if V5 != $97
      $536: SNE  V5, #45      ; Skip next instruction if V5 != $45
      ... and 10 more
    Modifies sorted registers V[5]: 24 instructions
      $322: RND  V5, #FE      ; V5 = random() AND $FE
      $34C: LD   V5, #AD      ; Load $AD into V5
      $39C: LD   V5, #2B      ; Load $2B into V5
      ... and 21 more
    Register transfer involving V[3]: 2 instructions
      $492: LD   B, V3        ; Store BCD of V3 at [I], [I+1], [I+2]
      $A8C: LD   F, V3        ; I = font_address(V3 & 0xF) = 0x50 + (V3 & 0xF) * 5
    Arithmetic on sorted registers V[4]: 2 instructions
      $4F6: ADD  V1, V4       ; V1 = (V1 + V4) & 0xFF, VF = carry
      $8EC: SUB  VA, V4       ; VA = (VA - V4) & 0xFF, VF = NOT borrow
    Register transfer involving V[4]: 1 instructions
      $500: LD   VE, V4       ; Load V4 into VE
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $7C6: OR   V8, V3       ; V8 = V8 OR V3, VF = 0
    Arithmetic on sorted registers V[5]: 2 instructions
      $8BE: ADD  VC, V5       ; VC = (VC + V5) & 0xFF, VF = carry
      $AA8: SUBN VD, V5       ; VD = (V5 - VD) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $954: AND  V1, V4       ; V1 = V1 AND V4, VF = 0
    Compares sorted registers V[2, 5]: 1 instructions
      $C5E: SE   V2, V5       ; Skip next instruction if V2 == V5
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $C8E: OR   V0, V6       ; V0 = V0 OR V6, VF = 0
    Compares sorted registers V[3, 5]: 1 instructions
      $CB0: SNE  V3, V5       ; Skip next instruction if V3 != V5
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $D1C: OR   V0, V2       ; V0 = V0 OR V2, VF = 0
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $DF4: XOR  VF, V5       ; VF = VF XOR V5, VF = 0
    Register transfer involving V[6]: 1 instructions
      $E60: LD   VC, V6       ; Load V6 into VC
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $F4C: LD   [I], V7      ; Store V0-V7 at [I], then I += 8

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 444 (24.8%)
    LD: 254 (14.2%)
    JP: 230 (12.8%)
    SNE: 142 (7.9%)
    ADD: 131 (7.3%)
    NOP: 124 (6.9%)
    DRW: 111 (6.2%)
    RND: 109 (6.1%)
    CALL: 104 (5.8%)
    SE: 102 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 729
  Based on: 265 sorting instructions + 232 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1262D01_V2-V7_L6_DES_C147_fe1b21e9.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚úÖ CLASSIFICATION: GENUINE (Confidence: 40.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 register comparisons in sorted range
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 114 RND instructions

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [129, 137, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí129, V1: 3‚Üí137, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 147

CUDA EXECUTION STATISTICS:
  Total register operations: 13
  Register reads: 102
  Register writes: 167
  Register writes per cycle: 1.136

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 33 locations
       Addresses: ['$216', '$310', '$314', '$366', '$3A8', '$4D0', '$502', '$5B4']
       ... and 25 more
  V1: Modified at 30 locations
       Addresses: ['$2B8', '$2DE', '$35E', '$382', '$390', '$3AE', '$3CA', '$3FA']
       ... and 22 more
  V2: Modified at 26 locations
       Addresses: ['$202', '$28A', '$2DA', '$2E0', '$322', '$378', '$38C', '$39A']
       ... and 18 more
  V3: Modified at 21 locations
       Addresses: ['$3EC', '$3F2', '$426', '$542', '$5DC', '$68C', '$6C0', '$6E8']
       ... and 13 more
  V4: Modified at 24 locations
       Addresses: ['$246', '$326', '$438', '$51C', '$572', '$590', '$6E8', '$74C']
       ... and 16 more
  V5: Modified at 23 locations
       Addresses: ['$244', '$296', '$2D6', '$33C', '$3AA', '$4BA', '$4E0', '$538']
       ... and 15 more
  V6: Modified at 28 locations
       Addresses: ['$258', '$2FA', '$3CE', '$488', '$4F0', '$522', '$53C', '$56A']
       ... and 20 more
  V7: Modified at 17 locations
       Addresses: ['$338', '$3F0', '$40A', '$578', '$588', '$6C6', '$6E0', '$6E8']
       ... and 9 more

CONTROL FLOW ANALYSIS:
  225 control transfers detected:
    $206 ‚Üí $9DC
    $208 ‚Üí $FA4
    $224 ‚Üí $6B1
    $22E ‚Üí $0C1 (LOOP)
    $234 ‚Üí $32C
    ... and 220 more transfers
  Potential sorting loops: 138 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  237 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 25 instructions
      $202: SUBN V2, V4       ; V2 = (V4 - V2) & 0xFF, VF = NOT borrow
      $28A: SHL  V2           ; V2 = (V2 << 1) & 0xFF, VF = MSB
      $2DA: RND  V2, #0D      ; V2 = random() AND $0D
      ... and 22 more
    Compares sorted registers V[2]: 15 instructions
      $210: SE   V2, VE       ; Skip next instruction if V2 == VE
      $372: SNE  V2, #B9      ; Skip next instruction if V2 != $B9
      $39C: SNE  V2, #E3      ; Skip next instruction if V2 != $E3
      ... and 12 more
    Modifies sorted registers V[5]: 22 instructions
      $244: RND  V5, #14      ; V5 = random() AND $14
      $296: ADD  V5, #2C      ; Add $2C to V5 (V5 = (V5 + $2C) & 0xFF)
      $2D6: SHL  V5           ; V5 = (V5 << 1) & 0xFF, VF = MSB
      ... and 19 more
    Modifies sorted registers V[4]: 23 instructions
      $246: ADD  V4, #F9      ; Add $F9 to V4 (V4 = (V4 + $F9) & 0xFF)
      $326: ADD  V4, #89      ; Add $89 to V4 (V4 = (V4 + $89) & 0xFF)
      $438: SUB  V4, V9       ; V4 = (V4 - V9) & 0xFF, VF = NOT borrow
      ... and 20 more
    Compares sorted registers V[7]: 15 instructions
      $24E: SE   V7, #FA      ; Skip next instruction if V7 == $FA
      $356: SNE  V7, #AC      ; Skip next instruction if V7 != $AC
      $4FE: SE   V7, #2A      ; Skip next instruction if V7 == $2A
      ... and 12 more
    Modifies sorted registers V[6]: 27 instructions
      $258: RND  V6, #50      ; V6 = random() AND $50
      $2FA: ADD  V6, #02      ; Add $02 to V6 (V6 = (V6 + $02) & 0xFF)
      $3CE: ADD  V6, #6F      ; Add $6F to V6 (V6 = (V6 + $6F) & 0xFF)
      ... and 24 more
    Compares sorted registers V[3]: 20 instructions
      $27E: SE   V3, #46      ; Skip next instruction if V3 == $46
      $2CE: SNE  V3, #32      ; Skip next instruction if V3 != $32
      $586: SNE  V3, #83      ; Skip next instruction if V3 != $83
      ... and 17 more
    Register transfer involving V[6]: 2 instructions
      $2C6: LD   VA, V6       ; Load V6 into VA
      $F4A: LD   B, V6        ; Store BCD of V6 at [I], [I+1], [I+2]
    Arithmetic on sorted registers V[2]: 2 instructions
      $2EC: SUB  V9, V2       ; V9 = (V9 - V2) & 0xFF, VF = NOT borrow
      $32E: ADD  VD, V2       ; VD = (VD + V2) & 0xFF, VF = carry
    Compares sorted registers V[4]: 21 instructions
      $30A: SE   V4, #2C      ; Skip next instruction if V4 == $2C
      $32C: SE   V4, #88      ; Skip next instruction if V4 == $88
      $494: SNE  V4, #79      ; Skip next instruction if V4 != $79
      ... and 18 more
    Compares sorted registers V[5]: 7 instructions
      $30E: SNE  V5, #D5      ; Skip next instruction if V5 != $D5
      $3B6: SNE  V5, #4F      ; Skip next instruction if V5 != $4F
      $788: SNE  V5, #92      ; Skip next instruction if V5 != $92
      ... and 4 more
    Modifies sorted registers V[7]: 16 instructions
      $338: ADD  V7, VD       ; V7 = (V7 + VD) & 0xFF, VF = carry
      $3F0: RND  V7, #F0      ; V7 = random() AND $F0
      $40A: ADD  V7, #BC      ; Add $BC to V7 (V7 = (V7 + $BC) & 0xFF)
      ... and 13 more
    Modifies sorted registers V[3]: 20 instructions
      $3EC: RND  V3, #63      ; V3 = random() AND $63
      $3F2: LD   V3, #C6      ; Load $C6 into V3
      $426: RND  V3, #2E      ; V3 = random() AND $2E
      ... and 17 more
    Compares sorted registers V[6]: 11 instructions
      $430: SE   V6, #30      ; Skip next instruction if V6 == $30
      $44A: SE   V6, #07      ; Skip next instruction if V6 == $07
      $55C: SE   V6, #E1      ; Skip next instruction if V6 == $E1
      ... and 8 more
    Register transfer involving V[3]: 1 instructions
      $55A: LD   VD, V3       ; Load V3 into VD
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $596: XOR  VA, V3       ; VA = VA XOR V3, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $5B0: SUBN VA, V6       ; VA = (V6 - VA) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4, 7]: 2 instructions
      $63A: SE   V7, V4       ; Skip next instruction if V7 == V4
      $DD0: SNE  V4, V7       ; Skip next instruction if V4 != V7
    Arithmetic on sorted registers V[5]: 1 instructions
      $648: SUB  VE, V5       ; VE = (VE - V5) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[2, 3, 4, 5, 6, 7]: 1 instructions
      $6E8: LD   V8, [I]      ; Load V0-V8 from [I], then I += 9
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $850: LD   [I], V9      ; Store V0-V9 at [I], then I += 10
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $8FA: XOR  VB, V5       ; VB = VB XOR V5, VF = 0
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $D24: OR   VE, V2       ; VE = VE OR V2, VF = 0
    Compares sorted registers V[2, 7]: 1 instructions
      $EFE: SNE  V2, V7       ; Skip next instruction if V2 != V7

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 494 (27.6%)
    JP: 226 (12.6%)
    LD: 216 (12.1%)
    NOP: 125 (7.0%)
    SNE: 122 (6.8%)
    ADD: 121 (6.8%)
    SE: 118 (6.6%)
    RND: 114 (6.4%)
    CALL: 107 (6.0%)
    DRW: 92 (5.1%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 687
  Based on: 237 sorting instructions + 225 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1302D01_V1-V6_L6_ASC_C15_ae965413.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 5 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Perfect consecutive sequence [0, 1, 2, 3, 4, 5] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 117 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [0, 1, 2, 3, 4, 5]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [0, 0, 1, 2, 3, 4, 5, 161]
  Changes: V0: 8‚Üí0, V1: 3‚Üí0, V2: 6‚Üí1, V3: 1‚Üí2, V4: 7‚Üí3, V5: 2‚Üí4, V7: 4‚Üí161
  ‚úì Correct initial test pattern detected
  Achievement cycle: 15

CUDA EXECUTION STATISTICS:
  Total register operations: 1
  Register reads: 10
  Register writes: 15
  Register writes per cycle: 1.000

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 24 locations
       Addresses: ['$31E', '$58C', '$612', '$668', '$6D8', '$780', '$7CA', '$848']
       ... and 16 more
  V1: Modified at 26 locations
       Addresses: ['$25C', '$2BA', '$356', '$47E', '$4D4', '$4F2', '$540', '$5A6']
       ... and 18 more
  V2: Modified at 24 locations
       Addresses: ['$202', '$252', '$2F6', '$40A', '$452', '$502', '$6B4', '$700']
       ... and 16 more
  V3: Modified at 25 locations
       Addresses: ['$248', '$250', '$284', '$39C', '$534', '$5DC', '$6C0', '$710']
       ... and 17 more
  V4: Modified at 21 locations
       Addresses: ['$240', '$29C', '$2C0', '$2FE', '$348', '$372', '$3BC', '$62A']
       ... and 13 more
  V5: Modified at 28 locations
       Addresses: ['$210', '$24E', '$256', '$37A', '$404', '$48A', '$490', '$4E0']
       ... and 20 more
  V6: Modified at 21 locations
       Addresses: ['$280', '$2E6', '$322', '$3C6', '$436', '$45A', '$5B4', '$690']
       ... and 13 more
  V7: Modified at 23 locations
       Addresses: ['$298', '$2D2', '$2EE', '$32E', '$36A', '$458', '$486', '$5A2']
       ... and 15 more

CONTROL FLOW ANALYSIS:
  223 control transfers detected:
    $214 ‚Üí $999
    $218 ‚Üí $DC9
    $228 ‚Üí $3D2
    $232 ‚Üí $14F (LOOP)
    $236 ‚Üí $FBC
    ... and 218 more transfers
  Potential sorting loops: 137 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  243 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 24 instructions
      $202: SHR  V2           ; V2 = V2 >> 1, VF = LSB
      $252: RND  V2, #6D      ; V2 = random() AND $6D
      $2F6: RND  V2, #BF      ; V2 = random() AND $BF
      ... and 21 more
    Modifies sorted registers V[5]: 28 instructions
      $210: LD   V5, #93      ; Load $93 into V5
      $24E: ADD  V5, #F7      ; Add $F7 to V5 (V5 = (V5 + $F7) & 0xFF)
      $256: LD   V5, #F5      ; Load $F5 into V5
      ... and 25 more
    Modifies sorted registers V[4]: 21 instructions
      $240: ADD  V4, #D6      ; Add $D6 to V4 (V4 = (V4 + $D6) & 0xFF)
      $29C: RND  V4, #A6      ; V4 = random() AND $A6
      $2C0: ADD  V4, #F1      ; Add $F1 to V4 (V4 = (V4 + $F1) & 0xFF)
      ... and 18 more
    Modifies sorted registers V[3]: 25 instructions
      $248: LD   V3, #75      ; Load $75 into V3
      $250: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $284: LD   V3, #3C      ; Load $3C into V3
      ... and 22 more
    Modifies sorted registers V[1]: 26 instructions
      $25C: RND  V1, #1C      ; V1 = random() AND $1C
      $2BA: RND  V1, #BF      ; V1 = random() AND $BF
      $356: ADD  V1, #7D      ; Add $7D to V1 (V1 = (V1 + $7D) & 0xFF)
      ... and 23 more
    Modifies sorted registers V[6]: 21 instructions
      $280: RND  V6, #F7      ; V6 = random() AND $F7
      $2E6: ADD  V6, #74      ; Add $74 to V6 (V6 = (V6 + $74) & 0xFF)
      $322: SHL  V6           ; V6 = (V6 << 1) & 0xFF, VF = MSB
      ... and 18 more
    Compares sorted registers V[3]: 9 instructions
      $2A4: SNE  V3, #E6      ; Skip next instruction if V3 != $E6
      $3A8: SE   V3, V9       ; Skip next instruction if V3 == V9
      $782: SE   V3, #AA      ; Skip next instruction if V3 == $AA
      ... and 6 more
    Compares sorted registers V[1]: 15 instructions
      $2AC: SNE  V1, #17      ; Skip next instruction if V1 != $17
      $2D8: SNE  V1, #D0      ; Skip next instruction if V1 != $D0
      $550: SNE  V1, #85      ; Skip next instruction if V1 != $85
      ... and 12 more
    Compares sorted registers V[5]: 17 instructions
      $2D0: SNE  V5, #AC      ; Skip next instruction if V5 != $AC
      $3AE: SNE  VB, V5       ; Skip next instruction if VB != V5
      $5F8: SNE  V5, #F1      ; Skip next instruction if V5 != $F1
      ... and 14 more
    Compares sorted registers V[6]: 12 instructions
      $336: SNE  V6, #9D      ; Skip next instruction if V6 != $9D
      $3C2: SNE  V6, #ED      ; Skip next instruction if V6 != $ED
      $43E: SE   V6, #CA      ; Skip next instruction if V6 == $CA
      ... and 9 more
    Compares sorted registers V[4]: 18 instructions
      $338: SE   V4, #B2      ; Skip next instruction if V4 == $B2
      $3CC: SNE  V4, #FF      ; Skip next instruction if V4 != $FF
      $598: SNE  V4, #23      ; Skip next instruction if V4 != $23
      ... and 15 more
    Compares sorted registers V[2]: 11 instructions
      $41E: SNE  V2, #74      ; Skip next instruction if V2 != $74
      $47C: SNE  V2, #0F      ; Skip next instruction if V2 != $0F
      $7D6: SE   V2, VB       ; Skip next instruction if V2 == VB
      ... and 8 more
    Register transfer involving V[1]: 1 instructions
      $458: LD   V7, V1       ; Load V1 into V7
    Arithmetic on sorted registers V[6]: 1 instructions
      $668: ADD  V0, V6       ; V0 = (V0 + V6) & 0xFF, VF = carry
    Logical operation on V[6] (sets VF=0 in CUDA): 2 instructions
      $694: OR   VA, V6       ; VA = VA OR V6, VF = 0
      $EF4: AND  V9, V6       ; V9 = V9 AND V6, VF = 0
    Arithmetic on sorted registers V[3]: 4 instructions
      $79A: ADD  VD, V3       ; VD = (VD + V3) & 0xFF, VF = carry
      $AD8: ADD  VE, V3       ; VE = (VE + V3) & 0xFF, VF = carry
      $D04: SUB  VD, V3       ; VD = (VD - V3) & 0xFF, VF = NOT borrow
      ... and 1 more
    Arithmetic on sorted registers V[5]: 2 instructions
      $838: ADD  V7, V5       ; V7 = (V7 + V5) & 0xFF, VF = carry
      $AEE: SUB  VD, V5       ; VD = (VD - V5) & 0xFF, VF = NOT borrow
    Register transfer involving V[4]: 1 instructions
      $8E2: LD   F, V4        ; I = font_address(V4 & 0xF) = 0x50 + (V4 & 0xF) * 5
    Arithmetic on sorted registers V[2]: 2 instructions
      $9D0: SUBN VF, V2       ; VF = (V2 - VF) & 0xFF, VF = NOT borrow
      $DA2: SUBN V9, V2       ; V9 = (V2 - V9) & 0xFF, VF = NOT borrow
    Register transfer involving V[5]: 1 instructions
      $CA8: LD   V7, V5       ; Load V5 into V7
    Arithmetic on sorted registers V[1]: 1 instructions
      $CC0: SUBN V8, V1       ; V8 = (V1 - V8) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[4]: 1 instructions
      $F90: SUBN V0, V4       ; V0 = (V4 - V0) & 0xFF, VF = NOT borrow

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 479 (26.7%)
    LD: 235 (13.1%)
    JP: 213 (11.9%)
    SNE: 128 (7.1%)
    NOP: 127 (7.1%)
    ADD: 121 (6.8%)
    RND: 117 (6.5%)
    SE: 117 (6.5%)
    CALL: 116 (6.5%)
    DRW: 102 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 689
  Based on: 243 sorting instructions + 223 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1543D01_V2-V7_L6_DES_C2460_1325851e.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 102 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [6, 3, 9, 8, 7, 6, 5, 4]
  Changes: V0: 8‚Üí6, V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 2460

CUDA EXECUTION STATISTICS:
  Total register operations: 4
  Register reads: 202
  Register writes: 155
  Register writes per cycle: 0.063

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 26 locations
       Addresses: ['$2A4', '$338', '$342', '$38A', '$40A', '$41A', '$456', '$4D8']
       ... and 18 more
  V1: Modified at 29 locations
       Addresses: ['$21A', '$29E', '$324', '$348', '$35A', '$3F6', '$414', '$446']
       ... and 21 more
  V2: Modified at 20 locations
       Addresses: ['$22E', '$286', '$2D6', '$422', '$566', '$7C8', '$952', '$968']
       ... and 12 more
  V3: Modified at 31 locations
       Addresses: ['$2B4', '$390', '$3E4', '$412', '$4AA', '$4E8', '$4FE', '$51E']
       ... and 23 more
  V4: Modified at 24 locations
       Addresses: ['$236', '$2C4', '$2CA', '$2E8', '$2FC', '$332', '$374', '$3D6']
       ... and 16 more
  V5: Modified at 29 locations
       Addresses: ['$30E', '$39E', '$416', '$4D0', '$664', '$688', '$6DE', '$768']
       ... and 21 more
  V6: Modified at 19 locations
       Addresses: ['$27A', '$354', '$36E', '$396', '$3EE', '$4C0', '$502', '$534']
       ... and 11 more
  V7: Modified at 32 locations
       Addresses: ['$2C0', '$2E2', '$2E4', '$33E', '$344', '$34C', '$364', '$37A']
       ... and 24 more

CONTROL FLOW ANALYSIS:
  221 control transfers detected:
    $208 ‚Üí $15B (LOOP)
    $20A ‚Üí $6AC
    $220 ‚Üí $8E4
    $222 ‚Üí $415
    $226 ‚Üí $996
    ... and 216 more transfers
  Potential sorting loops: 124 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  254 instructions identified as sorting-related:
    Modifies sorted registers V[2]: 19 instructions
      $22E: ADD  V2, #1A      ; Add $1A to V2 (V2 = (V2 + $1A) & 0xFF)
      $286: RND  V2, #65      ; V2 = random() AND $65
      $2D6: ADD  V2, #6B      ; Add $6B to V2 (V2 = (V2 + $6B) & 0xFF)
      ... and 16 more
    Modifies sorted registers V[4]: 23 instructions
      $236: ADD  V4, #7C      ; Add $7C to V4 (V4 = (V4 + $7C) & 0xFF)
      $2C4: ADD  V4, #E0      ; Add $E0 to V4 (V4 = (V4 + $E0) & 0xFF)
      $2CA: RND  V4, #C0      ; V4 = random() AND $C0
      ... and 20 more
    Compares sorted registers V[7]: 17 instructions
      $250: SE   V7, #03      ; Skip next instruction if V7 == $03
      $2AC: SNE  V7, #F2      ; Skip next instruction if V7 != $F2
      $386: SNE  V7, #6D      ; Skip next instruction if V7 != $6D
      ... and 14 more
    Compares sorted registers V[4]: 11 instructions
      $252: SE   V4, #58      ; Skip next instruction if V4 == $58
      $276: SNE  V4, #50      ; Skip next instruction if V4 != $50
      $400: SNE  V4, #F6      ; Skip next instruction if V4 != $F6
      ... and 8 more
    Modifies sorted registers V[6]: 19 instructions
      $27A: RND  V6, #B9      ; V6 = random() AND $B9
      $354: RND  V6, #71      ; V6 = random() AND $71
      $36E: LD   V6, #98      ; Load $98 into V6
      ... and 16 more
    Compares sorted registers V[2]: 22 instructions
      $292: SNE  V2, #83      ; Skip next instruction if V2 != $83
      $58A: SE   V2, #82      ; Skip next instruction if V2 == $82
      $596: SNE  V2, #F4      ; Skip next instruction if V2 != $F4
      ... and 19 more
    Modifies sorted registers V[3]: 30 instructions
      $2B4: LD   V3, #0D      ; Load $0D into V3
      $390: LD   V3, V5       ; Load V5 into V3
      $3E4: RND  V3, #58      ; V3 = random() AND $58
      ... and 27 more
    Modifies sorted registers V[7]: 32 instructions
      $2C0: ADD  V7, #7E      ; Add $7E to V7 (V7 = (V7 + $7E) & 0xFF)
      $2E2: AND  V7, VD       ; V7 = V7 AND VD, VF = 0
      $2E4: RND  V7, #2E      ; V7 = random() AND $2E
      ... and 29 more
    Compares sorted registers V[3]: 12 instructions
      $2CC: SNE  V3, #80      ; Skip next instruction if V3 != $80
      $2EA: SE   V3, #ED      ; Skip next instruction if V3 == $ED
      $4AE: SNE  V3, #1C      ; Skip next instruction if V3 != $1C
      ... and 9 more
    Modifies sorted registers V[5]: 29 instructions
      $30E: LD   V5, #D3      ; Load $D3 into V5
      $39E: LD   V5, #51      ; Load $51 into V5
      $416: SHR  V5           ; V5 = V5 >> 1, VF = LSB
      ... and 26 more
    Compares sorted registers V[6]: 12 instructions
      $314: SE   V6, #88      ; Skip next instruction if V6 == $88
      $428: SE   V6, #C3      ; Skip next instruction if V6 == $C3
      $6FC: SNE  V6, #CC      ; Skip next instruction if V6 != $CC
      ... and 9 more
    Compares sorted registers V[5]: 12 instructions
      $3BA: SNE  V5, #C7      ; Skip next instruction if V5 != $C7
      $41C: SNE  V5, #22      ; Skip next instruction if V5 != $22
      $4CC: SE   V5, #61      ; Skip next instruction if V5 == $61
      ... and 9 more
    Logical operation on V[3] (sets VF=0 in CUDA): 2 instructions
      $3EC: AND  VD, V3       ; VD = VD AND V3, VF = 0
      $A10: AND  VE, V3       ; VE = VE AND V3, VF = 0
    Register transfer involving V[2]: 1 instructions
      $5A4: LD   DT, V2       ; Load V2 into delay timer
    Arithmetic on sorted registers V[2]: 3 instructions
      $5B4: ADD  VB, V2       ; VB = (VB + V2) & 0xFF, VF = carry
      $676: SUBN V9, V2       ; V9 = (V2 - V9) & 0xFF, VF = NOT borrow
      $962: ADD  V1, V2       ; V1 = (V1 + V2) & 0xFF, VF = carry
    Arithmetic on sorted registers V[3]: 3 instructions
      $838: SUB  VE, V3       ; VE = (VE - V3) & 0xFF, VF = NOT borrow
      $F30: SUB  V9, V3       ; V9 = (V9 - V3) & 0xFF, VF = NOT borrow
      $F7A: SUB  V0, V3       ; V0 = (V0 - V3) & 0xFF, VF = NOT borrow
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $88C: OR   V9, V7       ; V9 = V9 OR V7, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $8D0: SUB  V8, V6       ; V8 = (V8 - V6) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $A16: AND  VD, V4       ; VD = VD AND V4, VF = 0
      $BA0: OR   V1, V4       ; V1 = V1 OR V4, VF = 0
    Register transfer involving V[5]: 1 instructions
      $C0E: LD   V9, V5       ; Load V5 into V9
    Compares sorted registers V[2, 3]: 1 instructions
      $D72: SNE  V3, V2       ; Skip next instruction if V3 != V2
    Modifies sorted registers V[2, 3, 4]: 1 instructions
      $F72: LD   V4, [I]      ; Load V0-V4 from [I], then I += 5

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 473 (26.4%)
    JP: 237 (13.2%)
    LD: 225 (12.6%)
    ADD: 136 (7.6%)
    SNE: 131 (7.3%)
    NOP: 127 (7.1%)
    CALL: 111 (6.2%)
    DRW: 105 (5.9%)
    RND: 102 (5.7%)
    SE: 100 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 696
  Based on: 254 sorting instructions + 221 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B1991D01_V0-V5_L6_ASC_C144_f5238ee2.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [95, 96, 97, 98, 99, 100] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [95, 96, 97, 98, 99, 100] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 106 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [95, 96, 97, 98, 99, 100]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V0-V5
  Start position: V0
  End position: V5
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [95, 96, 97, 98, 99, 100, 0, 102]
  Changes: V0: 8‚Üí95, V1: 3‚Üí96, V2: 6‚Üí97, V3: 1‚Üí98, V4: 7‚Üí99, V5: 2‚Üí100, V6: 5‚Üí0, V7: 4‚Üí102
  ‚úì Correct initial test pattern detected
  Achievement cycle: 144

CUDA EXECUTION STATISTICS:
  Total register operations: 7
  Register reads: 82
  Register writes: 196
  Register writes per cycle: 1.361

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 23 locations
       Addresses: ['$240', '$286', '$298', '$2F6', '$312', '$3C2', '$672', '$6AE']
       ... and 15 more
  V1: Modified at 22 locations
       Addresses: ['$244', '$308', '$348', '$456', '$5EE', '$6DC', '$6F2', '$756']
       ... and 14 more
  V2: Modified at 24 locations
       Addresses: ['$220', '$362', '$3BC', '$47A', '$4A0', '$4B6', '$534', '$54A']
       ... and 16 more
  V3: Modified at 22 locations
       Addresses: ['$252', '$2E0', '$35A', '$458', '$55C', '$5A8', '$61C', '$72A']
       ... and 14 more
  V4: Modified at 17 locations
       Addresses: ['$2CC', '$2D8', '$370', '$4C0', '$6FC', '$860', '$878', '$9F4']
       ... and 9 more
  V5: Modified at 24 locations
       Addresses: ['$21A', '$3C8', '$404', '$41C', '$460', '$506', '$50A', '$522']
       ... and 16 more
  V6: Modified at 36 locations
       Addresses: ['$230', '$236', '$25A', '$266', '$28A', '$2B2', '$2D6', '$2F4']
       ... and 28 more
  V7: Modified at 22 locations
       Addresses: ['$250', '$264', '$296', '$2DC', '$364', '$524', '$562', '$5CC']
       ... and 14 more

CONTROL FLOW ANALYSIS:
  247 control transfers detected:
    $206 ‚Üí $C1E
    $216 ‚Üí $840
    $21E ‚Üí $469
    $22A ‚Üí $B35
    $23A ‚Üí $5B5
    ... and 242 more transfers
  Potential sorting loops: 138 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  219 instructions identified as sorting-related:
    Compares sorted registers V[0, 4]: 1 instructions
      $210: SE   V4, V0       ; Skip next instruction if V4 == V0
    Modifies sorted registers V[5]: 24 instructions
      $21A: RND  V5, #C3      ; V5 = random() AND $C3
      $3C8: LD   V5, #F1      ; Load $F1 into V5
      $404: RND  V5, #7A      ; V5 = random() AND $7A
      ... and 21 more
    Modifies sorted registers V[2]: 24 instructions
      $220: RND  V2, #83      ; V2 = random() AND $83
      $362: ADD  V2, #93      ; Add $93 to V2 (V2 = (V2 + $93) & 0xFF)
      $3BC: LD   V2, #0B      ; Load $0B into V2
      ... and 21 more
    Modifies sorted registers V[0]: 23 instructions
      $240: RND  V0, #52      ; V0 = random() AND $52
      $286: LD   V0, #36      ; Load $36 into V0
      $298: LD   V0, #BE      ; Load $BE into V0
      ... and 20 more
    Modifies sorted registers V[1]: 22 instructions
      $244: LD   V1, #33      ; Load $33 into V1
      $308: LD   V1, #35      ; Load $35 into V1
      $348: ADD  V1, #D5      ; Add $D5 to V1 (V1 = (V1 + $D5) & 0xFF)
      ... and 19 more
    Modifies sorted registers V[3]: 22 instructions
      $252: ADD  V3, #4A      ; Add $4A to V3 (V3 = (V3 + $4A) & 0xFF)
      $2E0: LD   V3, #8E      ; Load $8E into V3
      $35A: LD   V3, #48      ; Load $48 into V3
      ... and 19 more
    Arithmetic on sorted registers V[1]: 3 instructions
      $25A: ADD  V6, V1       ; V6 = (V6 + V1) & 0xFF, VF = carry
      $FC2: ADD  VB, V1       ; VB = (VB + V1) & 0xFF, VF = carry
      $FFA: SUBN VA, V1       ; VA = (V1 - VA) & 0xFF, VF = NOT borrow
    Modifies sorted registers V[4]: 17 instructions
      $2CC: ADD  V4, #30      ; Add $30 to V4 (V4 = (V4 + $30) & 0xFF)
      $2D8: ADD  V4, #BA      ; Add $BA to V4 (V4 = (V4 + $BA) & 0xFF)
      $370: RND  V4, #B0      ; V4 = random() AND $B0
      ... and 14 more
    Compares sorted registers V[4]: 9 instructions
      $302: SNE  V4, #24      ; Skip next instruction if V4 != $24
      $4AC: SE   V4, V8       ; Skip next instruction if V4 == V8
      $7B2: SE   V4, #AF      ; Skip next instruction if V4 == $AF
      ... and 6 more
    Compares sorted registers V[2]: 13 instructions
      $304: SE   V2, #BC      ; Skip next instruction if V2 == $BC
      $380: SE   V2, #B7      ; Skip next instruction if V2 == $B7
      $3B2: SE   V2, #91      ; Skip next instruction if V2 == $91
      ... and 10 more
    Compares sorted registers V[5]: 12 instructions
      $392: SE   V5, #A6      ; Skip next instruction if V5 == $A6
      $400: SE   V5, #23      ; Skip next instruction if V5 == $23
      $4D0: SNE  V5, #BE      ; Skip next instruction if V5 != $BE
      ... and 9 more
    Compares sorted registers V[3]: 16 instructions
      $3AE: SNE  V3, #03      ; Skip next instruction if V3 != $03
      $484: SNE  V3, #80      ; Skip next instruction if V3 != $80
      $5CE: SE   V3, #49      ; Skip next instruction if V3 == $49
      ... and 13 more
    Arithmetic on sorted registers V[2]: 1 instructions
      $3CE: ADD  VB, V2       ; VB = (VB + V2) & 0xFF, VF = carry
    Register transfer involving V[0, 1, 2, 3, 4, 5]: 1 instructions
      $40E: LD   [I], VD      ; Store V0-VD at [I], then I += 14
    Compares sorted registers V[0]: 14 instructions
      $4EE: SE   V0, #E8      ; Skip next instruction if V0 == $E8
      $58A: SE   V0, #2E      ; Skip next instruction if V0 == $2E
      $596: SNE  V0, #3A      ; Skip next instruction if V0 != $3A
      ... and 11 more
    Register transfer involving V[5]: 1 instructions
      $4F4: LD   VE, V5       ; Load V5 into VE
    Compares sorted registers V[1]: 10 instructions
      $5A4: SNE  V1, #C3      ; Skip next instruction if V1 != $C3
      $5D4: SE   V1, #D4      ; Skip next instruction if V1 == $D4
      $60E: SNE  V1, #61      ; Skip next instruction if V1 != $61
      ... and 7 more
    Arithmetic on sorted registers V[0]: 1 instructions
      $67C: ADD  V7, V0       ; V7 = (V7 + V0) & 0xFF, VF = carry
    Compares sorted registers V[1, 5]: 1 instructions
      $760: SE   V1, V5       ; Skip next instruction if V1 == V5
    Arithmetic on sorted registers V[5]: 1 instructions
      $B98: ADD  V8, V5       ; V8 = (V8 + V5) & 0xFF, VF = carry
    Arithmetic on sorted registers V[3]: 1 instructions
      $C1C: SUB  VA, V3       ; VA = (VA - V3) & 0xFF, VF = NOT borrow
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $D60: OR   VD, V4       ; VD = VD OR V4, VF = 0
      $DF0: OR   V8, V4       ; V8 = V8 OR V4, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 468 (26.1%)
    JP: 256 (14.3%)
    LD: 233 (13.0%)
    NOP: 123 (6.9%)
    CALL: 122 (6.8%)
    ADD: 117 (6.5%)
    SNE: 115 (6.4%)
    DRW: 107 (6.0%)
    RND: 106 (5.9%)
    SE: 105 (5.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 713
  Based on: 219 sorting instructions + 247 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2010D01_V1-V6_L6_ASC_C69_7cd3c4cb.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [96, 97, 98, 99, 100, 101] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [96, 97, 98, 99, 100, 101] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 108 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [96, 97, 98, 99, 100, 101]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V1-V6
  Start position: V1
  End position: V6
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [111, 96, 97, 98, 99, 100, 101, 4]
  Changes: V0: 8‚Üí111, V1: 3‚Üí96, V2: 6‚Üí97, V3: 1‚Üí98, V4: 7‚Üí99, V5: 2‚Üí100, V6: 5‚Üí101
  ‚úì Correct initial test pattern detected
  Achievement cycle: 69

CUDA EXECUTION STATISTICS:
  Total register operations: 12
  Register reads: 54
  Register writes: 31
  Register writes per cycle: 0.449

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 26 locations
       Addresses: ['$23C', '$292', '$2AC', '$2EA', '$306', '$490', '$528', '$52C']
       ... and 18 more
  V1: Modified at 26 locations
       Addresses: ['$2D0', '$3EA', '$400', '$452', '$4A6', '$578', '$586', '$664']
       ... and 18 more
  V2: Modified at 25 locations
       Addresses: ['$21A', '$21E', '$366', '$3E2', '$426', '$432', '$446', '$6F2']
       ... and 17 more
  V3: Modified at 23 locations
       Addresses: ['$214', '$2DC', '$35E', '$42E', '$4A8', '$4F6', '$660', '$7B0']
       ... and 15 more
  V4: Modified at 23 locations
       Addresses: ['$2BA', '$350', '$380', '$478', '$47E', '$4C0', '$50A', '$554']
       ... and 15 more
  V5: Modified at 22 locations
       Addresses: ['$2A6', '$460', '$4A0', '$52A', '$550', '$588', '$606', '$69E']
       ... and 14 more
  V6: Modified at 25 locations
       Addresses: ['$22C', '$2BE', '$2E4', '$384', '$468', '$47C', '$54A', '$5C4']
       ... and 17 more
  V7: Modified at 28 locations
       Addresses: ['$230', '$280', '$3D2', '$3F8', '$46E', '$556', '$600', '$676']
       ... and 20 more

CONTROL FLOW ANALYSIS:
  246 control transfers detected:
    $206 ‚Üí $088 (LOOP)
    $220 ‚Üí $9C6
    $238 ‚Üí $F9B
    $244 ‚Üí $8EB
    $246 ‚Üí $AB4
    ... and 241 more transfers
  Potential sorting loops: 140 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  252 instructions identified as sorting-related:
    Compares sorted registers V[1]: 9 instructions
      $210: SNE  V1, #36      ; Skip next instruction if V1 != $36
      $228: SNE  V1, #04      ; Skip next instruction if V1 != $04
      $612: SE   V1, #7D      ; Skip next instruction if V1 == $7D
      ... and 6 more
    Modifies sorted registers V[3]: 23 instructions
      $214: ADD  V3, #FA      ; Add $FA to V3 (V3 = (V3 + $FA) & 0xFF)
      $2DC: ADD  V3, #62      ; Add $62 to V3 (V3 = (V3 + $62) & 0xFF)
      $35E: LD   V3, #B1      ; Load $B1 into V3
      ... and 20 more
    Modifies sorted registers V[2]: 25 instructions
      $21A: RND  V2, #FC      ; V2 = random() AND $FC
      $21E: ADD  V2, #9C      ; Add $9C to V2 (V2 = (V2 + $9C) & 0xFF)
      $366: LD   V2, #EA      ; Load $EA into V2
      ... and 22 more
    Modifies sorted registers V[6]: 25 instructions
      $22C: RND  V6, #FA      ; V6 = random() AND $FA
      $2BE: LD   V6, #7E      ; Load $7E into V6
      $2E4: ADD  V6, #96      ; Add $96 to V6 (V6 = (V6 + $96) & 0xFF)
      ... and 22 more
    Compares sorted registers V[2]: 20 instructions
      $24A: SE   V2, #A1      ; Skip next instruction if V2 == $A1
      $284: SE   V2, #6C      ; Skip next instruction if V2 == $6C
      $334: SE   V2, #8F      ; Skip next instruction if V2 == $8F
      ... and 17 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $296: ADD  VB, V4       ; VB = (VB + V4) & 0xFF, VF = carry
    Modifies sorted registers V[5]: 22 instructions
      $2A6: ADD  V5, #33      ; Add $33 to V5 (V5 = (V5 + $33) & 0xFF)
      $460: ADD  V5, #E5      ; Add $E5 to V5 (V5 = (V5 + $E5) & 0xFF)
      $4A0: LD   V5, #18      ; Load $18 into V5
      ... and 19 more
    Modifies sorted registers V[4]: 23 instructions
      $2BA: RND  V4, #29      ; V4 = random() AND $29
      $350: LD   V4, VB       ; Load VB into V4
      $380: ADD  V4, #DD      ; Add $DD to V4 (V4 = (V4 + $DD) & 0xFF)
      ... and 20 more
    Modifies sorted registers V[1]: 26 instructions
      $2D0: ADD  V1, #5B      ; Add $5B to V1 (V1 = (V1 + $5B) & 0xFF)
      $3EA: RND  V1, #49      ; V1 = random() AND $49
      $400: ADD  V1, #CF      ; Add $CF to V1 (V1 = (V1 + $CF) & 0xFF)
      ... and 23 more
    Compares sorted registers V[4]: 18 instructions
      $2E0: SNE  V4, V8       ; Skip next instruction if V4 != V8
      $436: SNE  V4, #22      ; Skip next instruction if V4 != $22
      $4C6: SNE  V9, V4       ; Skip next instruction if V9 != V4
      ... and 15 more
    Compares sorted registers V[3]: 15 instructions
      $2E2: SNE  V3, VC       ; Skip next instruction if V3 != VC
      $2EE: SE   V3, #DD      ; Skip next instruction if V3 == $DD
      $4BA: SNE  V3, #5E      ; Skip next instruction if V3 != $5E
      ... and 12 more
    Compares sorted registers V[6]: 15 instructions
      $434: SE   V6, #68      ; Skip next instruction if V6 == $68
      $4E4: SNE  V6, #0C      ; Skip next instruction if V6 != $0C
      $576: SNE  V6, #80      ; Skip next instruction if V6 != $80
      ... and 12 more
    Arithmetic on sorted registers V[6]: 2 instructions
      $46E: SUB  V7, V6       ; V7 = (V7 - V6) & 0xFF, VF = NOT borrow
      $A52: SUB  V0, V6       ; V0 = (V0 - V6) & 0xFF, VF = NOT borrow
    Register transfer involving V[1]: 1 instructions
      $480: LD   VC, V1       ; Load V1 into VC
    Register transfer involving V[6]: 2 instructions
      $48C: LD   DT, V6       ; Load V6 into delay timer
      $754: LD   V9, V6       ; Load V6 into V9
    Compares sorted registers V[4, 6]: 1 instructions
      $4DE: SNE  V4, V6       ; Skip next instruction if V4 != V6
    Compares sorted registers V[5]: 15 instructions
      $4EE: SNE  V5, #5B      ; Skip next instruction if V5 != $5B
      $542: SNE  V5, #3C      ; Skip next instruction if V5 != $3C
      $584: SNE  V5, #F7      ; Skip next instruction if V5 != $F7
      ... and 12 more
    Compares sorted registers V[2, 6]: 1 instructions
      $5BE: SE   V2, V6       ; Skip next instruction if V2 == V6
    Logical operation on V[4] (sets VF=0 in CUDA): 3 instructions
      $76A: OR   VD, V4       ; VD = VD OR V4, VF = 0
      $9FC: AND  V0, V4       ; V0 = V0 AND V4, VF = 0
      $B46: XOR  VA, V4       ; VA = VA XOR V4, VF = 0
    Arithmetic on sorted registers V[3]: 1 instructions
      $8D2: SUBN VA, V3       ; VA = (V3 - VA) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[1]: 2 instructions
      $8E2: ADD  VF, V1       ; VF = (VF + V1) & 0xFF, VF = carry
      $EF2: ADD  V0, V1       ; V0 = (V0 + V1) & 0xFF, VF = carry
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $930: OR   VB, V6       ; VB = VB OR V6, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $95C: OR   VD, V3       ; VD = VD OR V3, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 464 (25.9%)
    JP: 249 (13.9%)
    LD: 218 (12.2%)
    SNE: 144 (8.0%)
    ADD: 138 (7.7%)
    CALL: 117 (6.5%)
    SE: 112 (6.2%)
    RND: 108 (6.0%)
    NOP: 107 (6.0%)
    DRW: 94 (5.2%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 744
  Based on: 252 sorting instructions + 246 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2312D01_V0-V5_L6_DES_C264_ea92e1a5.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [127, 126, 125, 124, 123, 122] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Dominated by random generation: 95 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [127, 126, 125, 124, 123, 122]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V0-V5
  Start position: V0
  End position: V5
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [127, 126, 125, 124, 123, 122, 125, 0]
  Changes: V0: 8‚Üí127, V1: 3‚Üí126, V2: 6‚Üí125, V3: 1‚Üí124, V4: 7‚Üí123, V5: 2‚Üí122, V6: 5‚Üí125, V7: 4‚Üí0
  ‚úì Correct initial test pattern detected
  Achievement cycle: 264

CUDA EXECUTION STATISTICS:
  Total register operations: 10
  Register reads: 148
  Register writes: 487
  Register writes per cycle: 1.845

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 21 locations
       Addresses: ['$2F0', '$39A', '$3DA', '$4D0', '$4F4', '$4FA', '$4FC', '$60E']
       ... and 13 more
  V1: Modified at 31 locations
       Addresses: ['$2E8', '$304', '$3F2', '$3FA', '$412', '$492', '$4B2', '$558']
       ... and 23 more
  V2: Modified at 25 locations
       Addresses: ['$260', '$31E', '$382', '$3F6', '$420', '$456', '$4CE', '$564']
       ... and 17 more
  V3: Modified at 22 locations
       Addresses: ['$266', '$4CC', '$516', '$56E', '$5DC', '$658', '$696', '$778']
       ... and 14 more
  V4: Modified at 20 locations
       Addresses: ['$30C', '$34A', '$3AC', '$5AE', '$664', '$666', '$7E0', '$7EA']
       ... and 12 more
  V5: Modified at 23 locations
       Addresses: ['$402', '$450', '$472', '$53E', '$684', '$686', '$6E4', '$78A']
       ... and 15 more
  V6: Modified at 25 locations
       Addresses: ['$25C', '$2BA', '$4AC', '$592', '$5C0', '$604', '$622', '$628']
       ... and 17 more
  V7: Modified at 21 locations
       Addresses: ['$214', '$318', '$5D0', '$700', '$802', '$8F8', '$942', '$A42']
       ... and 13 more

CONTROL FLOW ANALYSIS:
  240 control transfers detected:
    $204 ‚Üí $D9D
    $206 ‚Üí $D39
    $20C ‚Üí $0F3 (LOOP)
    $212 ‚Üí $42E
    $21A ‚Üí $8D5
    ... and 235 more transfers
  Potential sorting loops: 131 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  241 instructions identified as sorting-related:
    Compares sorted registers V[3]: 17 instructions
      $23A: SE   V3, #49      ; Skip next instruction if V3 == $49
      $398: SNE  V3, V9       ; Skip next instruction if V3 != V9
      $3E8: SE   V3, #1B      ; Skip next instruction if V3 == $1B
      ... and 14 more
    Compares sorted registers V[2]: 17 instructions
      $24A: SE   V2, #AD      ; Skip next instruction if V2 == $AD
      $26C: SE   V2, #62      ; Skip next instruction if V2 == $62
      $38A: SE   V2, #2D      ; Skip next instruction if V2 == $2D
      ... and 14 more
    Compares sorted registers V[0]: 7 instructions
      $25E: SE   V0, #40      ; Skip next instruction if V0 == $40
      $3BE: SNE  V0, #FA      ; Skip next instruction if V0 != $FA
      $454: SE   V0, #E6      ; Skip next instruction if V0 == $E6
      ... and 4 more
    Modifies sorted registers V[2]: 24 instructions
      $260: ADD  V2, #32      ; Add $32 to V2 (V2 = (V2 + $32) & 0xFF)
      $31E: RND  V2, #E2      ; V2 = random() AND $E2
      $382: RND  V2, #5D      ; V2 = random() AND $5D
      ... and 21 more
    Modifies sorted registers V[3]: 21 instructions
      $266: LD   V3, #99      ; Load $99 into V3
      $4CC: RND  V3, #52      ; V3 = random() AND $52
      $516: RND  V3, #92      ; V3 = random() AND $92
      ... and 18 more
    Compares sorted registers V[5]: 22 instructions
      $288: SE   V5, #F3      ; Skip next instruction if V5 == $F3
      $292: SE   V5, #71      ; Skip next instruction if V5 == $71
      $2A0: SE   V5, #54      ; Skip next instruction if V5 == $54
      ... and 19 more
    Compares sorted registers V[4]: 17 instructions
      $2BE: SNE  V4, #57      ; Skip next instruction if V4 != $57
      $406: SNE  V4, VF       ; Skip next instruction if V4 != VF
      $6C6: SE   V4, #72      ; Skip next instruction if V4 == $72
      ... and 14 more
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $2DE: AND  VE, V4       ; VE = VE AND V4, VF = 0
    Modifies sorted registers V[1]: 30 instructions
      $2E8: ADD  V1, #19      ; Add $19 to V1 (V1 = (V1 + $19) & 0xFF)
      $304: ADD  V1, #AA      ; Add $AA to V1 (V1 = (V1 + $AA) & 0xFF)
      $3F2: LD   V1, #12      ; Load $12 into V1
      ... and 27 more
    Modifies sorted registers V[0]: 20 instructions
      $2F0: ADD  V0, #CE      ; Add $CE to V0 (V0 = (V0 + $CE) & 0xFF)
      $39A: ADD  V0, #05      ; Add $05 to V0 (V0 = (V0 + $05) & 0xFF)
      $3DA: RND  V0, #0B      ; V0 = random() AND $0B
      ... and 17 more
    Modifies sorted registers V[4]: 19 instructions
      $30C: XOR  V4, V9       ; V4 = V4 XOR V9, VF = 0
      $34A: ADD  V4, #C5      ; Add $C5 to V4 (V4 = (V4 + $C5) & 0xFF)
      $3AC: LD   V4, #81      ; Load $81 into V4
      ... and 16 more
    Compares sorted registers V[1]: 13 instructions
      $328: SE   V1, #1A      ; Skip next instruction if V1 == $1A
      $480: SE   V1, #DF      ; Skip next instruction if V1 == $DF
      $4B0: SNE  V1, #CC      ; Skip next instruction if V1 != $CC
      ... and 10 more
    Modifies sorted registers V[5]: 22 instructions
      $402: AND  V5, VD       ; V5 = V5 AND VD, VF = 0
      $450: OR   V5, V3       ; V5 = V5 OR V3, VF = 0
      $472: RND  V5, #2A      ; V5 = random() AND $2A
      ... and 19 more
    Register transfer involving V[2]: 1 instructions
      $5D8: LD   VA, V2       ; Load V2 into VA
    Register transfer involving V[3]: 2 instructions
      $628: LD   V6, V3       ; Load V3 into V6
      $D70: LD   VB, V3       ; Load V3 into VB
    Modifies sorted registers V[0, 1, 2, 3, 4, 5]: 1 instructions
      $8F8: LD   V9, [I]      ; Load V0-V9 from [I], then I += 10
    Arithmetic on sorted registers V[5]: 1 instructions
      $942: ADD  V7, V5       ; V7 = (V7 + V5) & 0xFF, VF = carry
    Register transfer involving V[0]: 1 instructions
      $952: LD   V6, V0       ; Load V0 into V6
    Arithmetic on sorted registers V[2]: 1 instructions
      $9E8: SUB  VC, V2       ; VC = (VC - V2) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[3]: 1 instructions
      $ADE: SUB  V7, V3       ; V7 = (V7 - V3) & 0xFF, VF = NOT borrow
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $B90: OR   V8, V5       ; V8 = V8 OR V5, VF = 0
    Arithmetic on sorted registers V[1]: 1 instructions
      $EF6: SUB  V6, V1       ; V6 = (V6 - V1) & 0xFF, VF = NOT borrow
    Logical operation on V[1] (sets VF=0 in CUDA): 1 instructions
      $EFE: OR   V8, V1       ; V8 = V8 OR V1, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 497 (27.7%)
    LD: 227 (12.7%)
    JP: 225 (12.6%)
    SE: 125 (7.0%)
    SNE: 125 (7.0%)
    CALL: 123 (6.9%)
    ADD: 118 (6.6%)
    DRW: 107 (6.0%)
    NOP: 106 (5.9%)
    RND: 95 (5.3%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 721
  Based on: 241 sorting instructions + 240 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B2881D01_V2-V7_L6_ASC_C162_4fb04d45.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [97, 98, 99, 100, 101, 102] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [97, 98, 99, 100, 101, 102] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 108 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [97, 98, 99, 100, 101, 102]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [6, 176, 97, 98, 99, 100, 101, 102]
  Changes: V0: 8‚Üí6, V1: 3‚Üí176, V2: 6‚Üí97, V3: 1‚Üí98, V4: 7‚Üí99, V5: 2‚Üí100, V6: 5‚Üí101, V7: 4‚Üí102
  ‚úì Correct initial test pattern detected
  Achievement cycle: 162

CUDA EXECUTION STATISTICS:
  Total register operations: 12
  Register reads: 92
  Register writes: 108
  Register writes per cycle: 0.667

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 21 locations
       Addresses: ['$266', '$28A', '$2AA', '$310', '$454', '$49E', '$624', '$692']
       ... and 13 more
  V1: Modified at 20 locations
       Addresses: ['$37C', '$3B2', '$442', '$474', '$5D6', '$5EA', '$74A', '$78C']
       ... and 12 more
  V2: Modified at 23 locations
       Addresses: ['$37A', '$39A', '$500', '$6B2', '$730', '$82E', '$832', '$850']
       ... and 15 more
  V3: Modified at 24 locations
       Addresses: ['$226', '$258', '$2E0', '$396', '$42E', '$47E', '$486', '$4CE']
       ... and 16 more
  V4: Modified at 28 locations
       Addresses: ['$2DA', '$4DC', '$584', '$5AA', '$5B8', '$63A', '$650', '$658']
       ... and 20 more
  V5: Modified at 29 locations
       Addresses: ['$40E', '$444', '$49A', '$518', '$59C', '$5B6', '$5CE', '$5D0']
       ... and 21 more
  V6: Modified at 24 locations
       Addresses: ['$370', '$3FC', '$414', '$5A8', '$6A6', '$6C8', '$720', '$756']
       ... and 16 more
  V7: Modified at 24 locations
       Addresses: ['$228', '$356', '$386', '$464', '$4CC', '$4F0', '$550', '$564']
       ... and 16 more

CONTROL FLOW ANALYSIS:
  223 control transfers detected:
    $206 ‚Üí $A73
    $222 ‚Üí $525
    $23A ‚Üí $065 (LOOP)
    $260 ‚Üí $DFB
    $264 ‚Üí $BD8
    ... and 218 more transfers
  Potential sorting loops: 132 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  265 instructions identified as sorting-related:
    Compares sorted registers V[4]: 19 instructions
      $220: SE   V4, #C5      ; Skip next instruction if V4 == $C5
      $26A: SE   V4, #82      ; Skip next instruction if V4 == $82
      $36C: SE   V4, #79      ; Skip next instruction if V4 == $79
      ... and 16 more
    Modifies sorted registers V[3]: 24 instructions
      $226: LD   V3, #4B      ; Load $4B into V3
      $258: RND  V3, #ED      ; V3 = random() AND $ED
      $2E0: ADD  V3, #E8      ; Add $E8 to V3 (V3 = (V3 + $E8) & 0xFF)
      ... and 21 more
    Modifies sorted registers V[7]: 24 instructions
      $228: LD   V7, #A4      ; Load $A4 into V7
      $356: RND  V7, #F6      ; V7 = random() AND $F6
      $386: SHR  V7           ; V7 = V7 >> 1, VF = LSB
      ... and 21 more
    Compares sorted registers V[3]: 14 instructions
      $246: SNE  V3, #A6      ; Skip next instruction if V3 != $A6
      $2E8: SNE  V3, #69      ; Skip next instruction if V3 != $69
      $582: SE   V3, #DB      ; Skip next instruction if V3 == $DB
      ... and 11 more
    Compares sorted registers V[6]: 17 instructions
      $248: SNE  V6, #08      ; Skip next instruction if V6 != $08
      $268: SE   V6, #69      ; Skip next instruction if V6 == $69
      $412: SE   V6, #5B      ; Skip next instruction if V6 == $5B
      ... and 14 more
    Modifies sorted registers V[4]: 28 instructions
      $2DA: LD   V4, #1E      ; Load $1E into V4
      $4DC: RND  V4, #C2      ; V4 = random() AND $C2
      $584: ADD  V4, #47      ; Add $47 to V4 (V4 = (V4 + $47) & 0xFF)
      ... and 25 more
    Compares sorted registers V[2]: 23 instructions
      $304: SNE  V2, #20      ; Skip next instruction if V2 != $20
      $3E2: SNE  V2, #FC      ; Skip next instruction if V2 != $FC
      $528: SNE  V2, #D2      ; Skip next instruction if V2 != $D2
      ... and 20 more
    Modifies sorted registers V[6]: 24 instructions
      $370: LD   V6, #90      ; Load $90 into V6
      $3FC: RND  V6, #6B      ; V6 = random() AND $6B
      $414: LD   V6, #34      ; Load $34 into V6
      ... and 21 more
    Modifies sorted registers V[2]: 23 instructions
      $37A: LD   V2, #9C      ; Load $9C into V2
      $39A: RND  V2, #FB      ; V2 = random() AND $FB
      $500: RND  V2, #3C      ; V2 = random() AND $3C
      ... and 20 more
    Compares sorted registers V[5]: 13 instructions
      $3A4: SNE  V5, #B7      ; Skip next instruction if V5 != $B7
      $7B0: SNE  V5, #0F      ; Skip next instruction if V5 != $0F
      $7BC: SNE  V5, #E5      ; Skip next instruction if V5 != $E5
      ... and 10 more
    Modifies sorted registers V[5]: 29 instructions
      $40E: RND  V5, #DD      ; V5 = random() AND $DD
      $444: LD   V5, #9B      ; Load $9B into V5
      $49A: ADD  V5, V6       ; V5 = (V5 + V6) & 0xFF, VF = carry
      ... and 26 more
    Compares sorted registers V[7]: 17 instructions
      $418: SE   V7, #7D      ; Skip next instruction if V7 == $7D
      $4C0: SE   V7, #47      ; Skip next instruction if V7 == $47
      $5A0: SNE  V7, #C2      ; Skip next instruction if V7 != $C2
      ... and 14 more
    Register transfer involving V[3]: 1 instructions
      $512: LD   F, V3        ; I = font_address(V3 & 0xF) = 0x50 + (V3 & 0xF) * 5
    Logical operation on V[3] (sets VF=0 in CUDA): 3 instructions
      $78E: OR   VC, V3       ; VC = VC OR V3, VF = 0
      $C94: AND  VA, V3       ; VA = VA AND V3, VF = 0
      $EE4: AND  V1, V3       ; V1 = V1 AND V3, VF = 0
    Compares sorted registers V[4, 6]: 1 instructions
      $8E4: SE   V4, V6       ; Skip next instruction if V4 == V6
    Arithmetic on sorted registers V[2]: 1 instructions
      $90C: SUBN V0, V2       ; V0 = (V2 - V0) & 0xFF, VF = NOT borrow
    Compares sorted registers V[4, 5]: 1 instructions
      $AB6: SE   V5, V4       ; Skip next instruction if V5 == V4
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $C3E: XOR  VE, V7       ; VE = VE XOR V7, VF = 0
    Compares sorted registers V[5, 7]: 1 instructions
      $CB8: SE   V5, V7       ; Skip next instruction if V5 == V7
    Compares sorted registers V[2, 5]: 1 instructions
      $FFA: SE   V5, V2       ; Skip next instruction if V5 == V2

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 485 (27.1%)
    LD: 244 (13.6%)
    JP: 209 (11.7%)
    SE: 128 (7.1%)
    CALL: 126 (7.0%)
    ADD: 119 (6.6%)
    DRW: 116 (6.5%)
    SNE: 115 (6.4%)
    RND: 108 (6.0%)
    NOP: 101 (5.6%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 711
  Based on: 265 sorting instructions + 223 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3304D01_V2-V7_L6_ASC_C342_6b3b9ec5.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [97, 98, 99, 100, 101, 102] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [97, 98, 99, 100, 101, 102] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 138 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [97, 98, 99, 100, 101, 102]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [113, 246, 97, 98, 99, 100, 101, 102]
  Changes: V0: 8‚Üí113, V1: 3‚Üí246, V2: 6‚Üí97, V3: 1‚Üí98, V4: 7‚Üí99, V5: 2‚Üí100, V6: 5‚Üí101, V7: 4‚Üí102
  ‚úì Correct initial test pattern detected
  Achievement cycle: 342

CUDA EXECUTION STATISTICS:
  Total register operations: 18
  Register reads: 213
  Register writes: 454
  Register writes per cycle: 1.327

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 28 locations
       Addresses: ['$308', '$30E', '$3EA', '$4E2', '$5D0', '$5F6', '$73A', '$8A0']
       ... and 20 more
  V1: Modified at 27 locations
       Addresses: ['$464', '$46A', '$4B6', '$60E', '$61C', '$6BC', '$6C0', '$700']
       ... and 19 more
  V2: Modified at 24 locations
       Addresses: ['$208', '$280', '$294', '$2DC', '$3A0', '$3C4', '$4CA', '$646']
       ... and 16 more
  V3: Modified at 30 locations
       Addresses: ['$228', '$2A8', '$52E', '$532', '$542', '$54E', '$5CC', '$626']
       ... and 22 more
  V4: Modified at 21 locations
       Addresses: ['$202', '$3B8', '$404', '$492', '$4BE', '$4DC', '$522', '$592']
       ... and 13 more
  V5: Modified at 21 locations
       Addresses: ['$234', '$310', '$3A4', '$476', '$4E6', '$4F4', '$51A', '$5D4']
       ... and 13 more
  V6: Modified at 24 locations
       Addresses: ['$266', '$2A2', '$3F8', '$43A', '$4E8', '$50C', '$676', '$6B8']
       ... and 16 more
  V7: Modified at 29 locations
       Addresses: ['$20C', '$222', '$23E', '$25E', '$2F0', '$362', '$378', '$37E']
       ... and 21 more

CONTROL FLOW ANALYSIS:
  206 control transfers detected:
    $200 ‚Üí $51C
    $20E ‚Üí $959
    $210 ‚Üí $398
    $24E ‚Üí $54A
    $264 ‚Üí $504
    ... and 201 more transfers
  Potential sorting loops: 120 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  247 instructions identified as sorting-related:
    Modifies sorted registers V[4]: 21 instructions
      $202: LD   V4, #63      ; Load $63 into V4
      $3B8: RND  V4, #A4      ; V4 = random() AND $A4
      $404: SUB  V4, V8       ; V4 = (V4 - V8) & 0xFF, VF = NOT borrow
      ... and 18 more
    Modifies sorted registers V[2]: 24 instructions
      $208: LD   V2, #79      ; Load $79 into V2
      $280: ADD  V2, #FA      ; Add $FA to V2 (V2 = (V2 + $FA) & 0xFF)
      $294: LD   V2, #35      ; Load $35 into V2
      ... and 21 more
    Modifies sorted registers V[7]: 29 instructions
      $20C: RND  V7, #DF      ; V7 = random() AND $DF
      $222: ADD  V7, #28      ; Add $28 to V7 (V7 = (V7 + $28) & 0xFF)
      $23E: LD   V7, #12      ; Load $12 into V7
      ... and 26 more
    Modifies sorted registers V[3]: 30 instructions
      $228: LD   V3, #02      ; Load $02 into V3
      $2A8: LD   V3, #10      ; Load $10 into V3
      $52E: RND  V3, #97      ; V3 = random() AND $97
      ... and 27 more
    Modifies sorted registers V[5]: 21 instructions
      $234: LD   V5, VA       ; Load VA into V5
      $310: ADD  V5, #EB      ; Add $EB to V5 (V5 = (V5 + $EB) & 0xFF)
      $3A4: LD   V5, #B3      ; Load $B3 into V5
      ... and 18 more
    Compares sorted registers V[3]: 18 instructions
      $260: SE   V3, #EB      ; Skip next instruction if V3 == $EB
      $2B8: SE   V3, #B3      ; Skip next instruction if V3 == $B3
      $598: SNE  V3, #1F      ; Skip next instruction if V3 != $1F
      ... and 15 more
    Modifies sorted registers V[6]: 24 instructions
      $266: RND  V6, #14      ; V6 = random() AND $14
      $2A2: AND  V6, V3       ; V6 = V6 AND V3, VF = 0
      $3F8: LD   V6, #E3      ; Load $E3 into V6
      ... and 21 more
    Compares sorted registers V[2]: 14 instructions
      $2E8: SE   V2, #0C      ; Skip next instruction if V2 == $0C
      $31E: SNE  V2, #56      ; Skip next instruction if V2 != $56
      $514: SE   V2, #96      ; Skip next instruction if V2 == $96
      ... and 11 more
    Compares sorted registers V[6]: 16 instructions
      $34C: SE   V6, #19      ; Skip next instruction if V6 == $19
      $494: SE   V6, #59      ; Skip next instruction if V6 == $59
      $612: SE   V6, #07      ; Skip next instruction if V6 == $07
      ... and 13 more
    Logical operation on V[5] (sets VF=0 in CUDA): 2 instructions
      $478: XOR  V9, V5       ; V9 = V9 XOR V5, VF = 0
      $B10: OR   V0, V5       ; V0 = V0 OR V5, VF = 0
    Logical operation on V[4] (sets VF=0 in CUDA): 1 instructions
      $496: AND  V8, V4       ; V8 = V8 AND V4, VF = 0
    Compares sorted registers V[5]: 11 instructions
      $4B2: SNE  V5, #1D      ; Skip next instruction if V5 != $1D
      $4BA: SNE  V5, #9B      ; Skip next instruction if V5 != $9B
      $89A: SE   VA, V5       ; Skip next instruction if VA == V5
      ... and 8 more
    Compares sorted registers V[4]: 19 instructions
      $4F0: SE   V4, #3F      ; Skip next instruction if V4 == $3F
      $516: SNE  V4, #FD      ; Skip next instruction if V4 != $FD
      $58E: SNE  V4, #02      ; Skip next instruction if V4 != $02
      ... and 16 more
    Register transfer involving V[3]: 2 instructions
      $53E: LD   VF, V3       ; Load V3 into VF
      $FFE: LD   V0, V3       ; Load V3 into V0
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $570: XOR  VD, V3       ; VD = VD XOR V3, VF = 0
    Arithmetic on sorted registers V[5]: 2 instructions
      $70A: SUBN V9, V5       ; V9 = (V5 - V9) & 0xFF, VF = NOT borrow
      $C32: SUBN V1, V5       ; V1 = (V5 - V1) & 0xFF, VF = NOT borrow
    Compares sorted registers V[7]: 9 instructions
      $832: SE   V7, #A3      ; Skip next instruction if V7 == $A3
      $8AE: SE   V7, #BE      ; Skip next instruction if V7 == $BE
      $970: SE   V7, #A3      ; Skip next instruction if V7 == $A3
      ... and 6 more
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $E50: OR   VD, V2       ; VD = VD OR V2, VF = 0
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $F4E: AND  V9, V6       ; V9 = V9 AND V6, VF = 0
    Arithmetic on sorted registers V[6]: 1 instructions
      $FEE: ADD  I, V6        ; I = (I + V6) & 0xFFFF

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 451 (25.2%)
    LD: 228 (12.7%)
    JP: 226 (12.6%)
    RND: 138 (7.7%)
    DRW: 126 (7.0%)
    NOP: 125 (7.0%)
    SNE: 125 (7.0%)
    SE: 124 (6.9%)
    ADD: 103 (5.7%)
    CALL: 88 (4.9%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 659
  Based on: 247 sorting instructions + 206 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3451D01_V2-V7_L6_DES_C150_a80d372c.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 102 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 150

CUDA EXECUTION STATISTICS:
  Total register operations: 4
  Register reads: 45
  Register writes: 110
  Register writes per cycle: 0.733

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 26 locations
       Addresses: ['$292', '$2B8', '$2CC', '$33C', '$352', '$488', '$5B0', '$652']
       ... and 18 more
  V1: Modified at 26 locations
       Addresses: ['$252', '$26A', '$2CE', '$3F2', '$47E', '$4F4', '$5A6', '$676']
       ... and 18 more
  V2: Modified at 24 locations
       Addresses: ['$286', '$2AC', '$2F4', '$376', '$3C2', '$468', '$478', '$5CE']
       ... and 16 more
  V3: Modified at 28 locations
       Addresses: ['$2BE', '$2D8', '$2EC', '$314', '$32E', '$394', '$42C', '$448']
       ... and 20 more
  V4: Modified at 19 locations
       Addresses: ['$23C', '$268', '$282', '$4DC', '$502', '$5DC', '$630', '$66E']
       ... and 11 more
  V5: Modified at 22 locations
       Addresses: ['$21E', '$324', '$500', '$508', '$5DE', '$61E', '$728', '$89A']
       ... and 14 more
  V6: Modified at 23 locations
       Addresses: ['$2B2', '$432', '$454', '$4EE', '$590', '$5C4', '$5E8', '$73A']
       ... and 15 more
  V7: Modified at 22 locations
       Addresses: ['$372', '$386', '$572', '$5A8', '$606', '$65A', '$6B4', '$708']
       ... and 14 more

CONTROL FLOW ANALYSIS:
  218 control transfers detected:
    $212 ‚Üí $5E4
    $244 ‚Üí $A11
    $24A ‚Üí $B64
    $274 ‚Üí $3E2
    $288 ‚Üí $A37
    ... and 213 more transfers
  Potential sorting loops: 128 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  233 instructions identified as sorting-related:
    Modifies sorted registers V[5]: 22 instructions
      $21E: ADD  V5, #CF      ; Add $CF to V5 (V5 = (V5 + $CF) & 0xFF)
      $324: AND  V5, V0       ; V5 = V5 AND V0, VF = 0
      $500: LD   V5, #52      ; Load $52 into V5
      ... and 19 more
    Compares sorted registers V[5]: 18 instructions
      $22A: SNE  VB, V5       ; Skip next instruction if VB != V5
      $236: SNE  V5, #30      ; Skip next instruction if V5 != $30
      $2D6: SNE  V5, #72      ; Skip next instruction if V5 != $72
      ... and 15 more
    Modifies sorted registers V[4]: 19 instructions
      $23C: ADD  V4, #A7      ; Add $A7 to V4 (V4 = (V4 + $A7) & 0xFF)
      $268: LD   V4, #B9      ; Load $B9 into V4
      $282: LD   V4, VF       ; Load VF into V4
      ... and 16 more
    Compares sorted registers V[7]: 16 instructions
      $25C: SNE  V7, #ED      ; Skip next instruction if V7 != $ED
      $260: SNE  V7, #86      ; Skip next instruction if V7 != $86
      $26C: SE   V7, #01      ; Skip next instruction if V7 == $01
      ... and 13 more
    Modifies sorted registers V[2]: 24 instructions
      $286: LD   V2, #03      ; Load $03 into V2
      $2AC: LD   V2, V3       ; Load V3 into V2
      $2F4: LD   V2, #8D      ; Load $8D into V2
      ... and 21 more
    Modifies sorted registers V[6]: 23 instructions
      $2B2: ADD  V6, #D8      ; Add $D8 to V6 (V6 = (V6 + $D8) & 0xFF)
      $432: XOR  V6, V4       ; V6 = V6 XOR V4, VF = 0
      $454: ADD  V6, #42      ; Add $42 to V6 (V6 = (V6 + $42) & 0xFF)
      ... and 20 more
    Modifies sorted registers V[3]: 28 instructions
      $2BE: RND  V3, #C5      ; V3 = random() AND $C5
      $2D8: RND  V3, #48      ; V3 = random() AND $48
      $2EC: SUB  V3, VC       ; V3 = (V3 - VC) & 0xFF, VF = NOT borrow
      ... and 25 more
    Compares sorted registers V[2]: 11 instructions
      $2CA: SE   V2, #61      ; Skip next instruction if V2 == $61
      $4AA: SNE  V2, #D1      ; Skip next instruction if V2 != $D1
      $4EA: SE   V2, #DD      ; Skip next instruction if V2 == $DD
      ... and 8 more
    Compares sorted registers V[6]: 9 instructions
      $322: SE   V6, #FC      ; Skip next instruction if V6 == $FC
      $63A: SE   V6, #4A      ; Skip next instruction if V6 == $4A
      $696: SE   V6, #24      ; Skip next instruction if V6 == $24
      ... and 6 more
    Compares sorted registers V[2, 4]: 1 instructions
      $358: SNE  V2, V4       ; Skip next instruction if V2 != V4
    Modifies sorted registers V[7]: 22 instructions
      $372: ADD  V7, #C0      ; Add $C0 to V7 (V7 = (V7 + $C0) & 0xFF)
      $386: LD   V7, #19      ; Load $19 into V7
      $572: ADD  V7, #F4      ; Add $F4 to V7 (V7 = (V7 + $F4) & 0xFF)
      ... and 19 more
    Compares sorted registers V[3]: 12 instructions
      $380: SE   V3, #E4      ; Skip next instruction if V3 == $E4
      $3C8: SE   V3, #F5      ; Skip next instruction if V3 == $F5
      $3EA: SNE  V3, #E4      ; Skip next instruction if V3 != $E4
      ... and 9 more
    Compares sorted registers V[4]: 15 instructions
      $3D2: SE   V4, #0D      ; Skip next instruction if V4 == $0D
      $4B0: SNE  V4, #93      ; Skip next instruction if V4 != $93
      $550: SE   V4, #0B      ; Skip next instruction if V4 == $0B
      ... and 12 more
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $680: AND  VD, V4       ; VD = VD AND V4, VF = 0
      $BF6: AND  VD, V4       ; VD = VD AND V4, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $69C: OR   VE, V3       ; VE = VE OR V3, VF = 0
    Compares sorted registers V[3, 6]: 1 instructions
      $726: SNE  V3, V6       ; Skip next instruction if V3 != V6
    Arithmetic on sorted registers V[6]: 3 instructions
      $8F2: SUB  V8, V6       ; V8 = (V8 - V6) & 0xFF, VF = NOT borrow
      $DA6: ADD  VA, V6       ; VA = (VA + V6) & 0xFF, VF = carry
      $EE0: SUBN VC, V6       ; VC = (V6 - VC) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[2]: 1 instructions
      $A2E: SUBN VC, V2       ; VC = (V2 - VC) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[5]: 1 instructions
      $A6C: SUB  V1, V5       ; V1 = (V1 - V5) & 0xFF, VF = NOT borrow
    Arithmetic on sorted registers V[7]: 1 instructions
      $C3C: SUBN V0, V7       ; V0 = (V7 - V0) & 0xFF, VF = NOT borrow
    Logical operation on V[6] (sets VF=0 in CUDA): 1 instructions
      $E1C: AND  V8, V6       ; V8 = V8 AND V6, VF = 0
    Register transfer involving V[7]: 1 instructions
      $EA0: LD   VF, V7       ; Load V7 into VF
    Register transfer involving V[5]: 1 instructions
      $F0E: LD   V0, V5       ; Load V5 into V0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 487 (27.2%)
    LD: 234 (13.1%)
    JP: 211 (11.8%)
    SE: 130 (7.3%)
    ADD: 125 (7.0%)
    DRW: 116 (6.5%)
    SNE: 114 (6.4%)
    NOP: 111 (6.2%)
    RND: 102 (5.7%)
    CALL: 102 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 669
  Based on: 233 sorting instructions + 218 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3493D01_V2-V7_L6_ASC_C744_ebced0d2.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: COINCIDENTAL (Confidence: 0.0%)
  Evidence for genuine sorting:
    ‚úì Found 4 register comparisons in sorted range
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Sorted values [97, 98, 99, 100, 101, 102] completely unrelated to initial pattern [8, 3, 6, 1, 7, 2, 5, 4]
    ‚ö†Ô∏è  Perfect consecutive sequence [97, 98, 99, 100, 101, 102] with no initial pattern involvement
    ‚ö†Ô∏è  Dominated by random generation: 118 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [97, 98, 99, 100, 101, 102]
  Length: 6 consecutive elements
  Direction: ascending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [95, 215, 97, 98, 99, 100, 101, 102]
  Changes: V0: 8‚Üí95, V1: 3‚Üí215, V2: 6‚Üí97, V3: 1‚Üí98, V4: 7‚Üí99, V5: 2‚Üí100, V6: 5‚Üí101, V7: 4‚Üí102
  ‚úì Correct initial test pattern detected
  Achievement cycle: 744

CUDA EXECUTION STATISTICS:
  Total register operations: 48
  Register reads: 445
  Register writes: 882
  Register writes per cycle: 1.185

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 37 locations
       Addresses: ['$218', '$25C', '$2CE', '$336', '$392', '$3AC', '$406', '$436']
       ... and 29 more
  V1: Modified at 21 locations
       Addresses: ['$2B8', '$328', '$36C', '$3C8', '$3E8', '$47A', '$652', '$6B2']
       ... and 13 more
  V2: Modified at 17 locations
       Addresses: ['$23C', '$31E', '$382', '$7A6', '$884', '$99E', '$A54', '$A90']
       ... and 9 more
  V3: Modified at 27 locations
       Addresses: ['$306', '$318', '$31A', '$432', '$45C', '$54A', '$580', '$608']
       ... and 19 more
  V4: Modified at 23 locations
       Addresses: ['$27E', '$304', '$364', '$36A', '$388', '$4E6', '$4F4', '$528']
       ... and 15 more
  V5: Modified at 19 locations
       Addresses: ['$222', '$24C', '$4B0', '$54E', '$598', '$760', '$78E', '$862']
       ... and 11 more
  V6: Modified at 17 locations
       Addresses: ['$240', '$2C6', '$3D2', '$468', '$4BE', '$4CA', '$59C', '$736']
       ... and 9 more
  V7: Modified at 20 locations
       Addresses: ['$22E', '$242', '$270', '$35A', '$4AA', '$558', '$73C', '$7B2']
       ... and 12 more

CONTROL FLOW ANALYSIS:
  205 control transfers detected:
    $208 ‚Üí $7CA
    $212 ‚Üí $1CB (LOOP)
    $226 ‚Üí $DD6
    $228 ‚Üí $AC1
    $24E ‚Üí $030 (LOOP)
    ... and 200 more transfers
  Potential sorting loops: 106 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  225 instructions identified as sorting-related:
    Modifies sorted registers V[5]: 19 instructions
      $222: ADD  V5, #5C      ; Add $5C to V5 (V5 = (V5 + $5C) & 0xFF)
      $24C: SHR  V5           ; V5 = V5 >> 1, VF = LSB
      $4B0: RND  V5, #C5      ; V5 = random() AND $C5
      ... and 16 more
    Modifies sorted registers V[7]: 20 instructions
      $22E: ADD  V7, V4       ; V7 = (V7 + V4) & 0xFF, VF = carry
      $242: ADD  V7, #14      ; Add $14 to V7 (V7 = (V7 + $14) & 0xFF)
      $270: RND  V7, #5A      ; V7 = random() AND $5A
      ... and 17 more
    Compares sorted registers V[3]: 12 instructions
      $234: SNE  V3, #CC      ; Skip next instruction if V3 != $CC
      $614: SNE  V3, V1       ; Skip next instruction if V3 != V1
      $636: SNE  V3, #C9      ; Skip next instruction if V3 != $C9
      ... and 9 more
    Modifies sorted registers V[2]: 17 instructions
      $23C: RND  V2, #65      ; V2 = random() AND $65
      $31E: LD   V2, #09      ; Load $09 into V2
      $382: SUBN V2, VA       ; V2 = (VA - V2) & 0xFF, VF = NOT borrow
      ... and 14 more
    Modifies sorted registers V[6]: 17 instructions
      $240: RND  V6, #0B      ; V6 = random() AND $0B
      $2C6: RND  V6, #04      ; V6 = random() AND $04
      $3D2: LD   V6, #C1      ; Load $C1 into V6
      ... and 14 more
    Compares sorted registers V[4]: 12 instructions
      $274: SNE  V4, #B1      ; Skip next instruction if V4 != $B1
      $3B8: SE   V4, #3F      ; Skip next instruction if V4 == $3F
      $3C6: SE   V4, #8E      ; Skip next instruction if V4 == $8E
      ... and 9 more
    Modifies sorted registers V[4]: 23 instructions
      $27E: SHL  V4           ; V4 = (V4 << 1) & 0xFF, VF = MSB
      $304: XOR  V4, V0       ; V4 = V4 XOR V0, VF = 0
      $364: ADD  V4, #AD      ; Add $AD to V4 (V4 = (V4 + $AD) & 0xFF)
      ... and 20 more
    Compares sorted registers V[7]: 15 instructions
      $2C0: SE   V7, #FB      ; Skip next instruction if V7 == $FB
      $30C: SNE  V7, #73      ; Skip next instruction if V7 != $73
      $448: SNE  V7, #F9      ; Skip next instruction if V7 != $F9
      ... and 12 more
    Compares sorted registers V[2]: 12 instructions
      $2F4: SE   V2, V1       ; Skip next instruction if V2 == V1
      $31C: SNE  V2, #61      ; Skip next instruction if V2 != $61
      $3AE: SE   V2, #8B      ; Skip next instruction if V2 == $8B
      ... and 9 more
    Modifies sorted registers V[3]: 27 instructions
      $306: LD   V3, #03      ; Load $03 into V3
      $318: SHL  V3           ; V3 = (V3 << 1) & 0xFF, VF = MSB
      $31A: RND  V3, #1D      ; V3 = random() AND $1D
      ... and 24 more
    Compares sorted registers V[3, 4]: 1 instructions
      $39E: SE   V4, V3       ; Skip next instruction if V4 == V3
    Arithmetic on sorted registers V[2]: 1 instructions
      $47A: SUBN V1, V2       ; V1 = (V2 - V1) & 0xFF, VF = NOT borrow
    Logical operation on V[3] (sets VF=0 in CUDA): 1 instructions
      $484: XOR  V8, V3       ; V8 = V8 XOR V3, VF = 0
    Compares sorted registers V[6]: 21 instructions
      $4B6: SNE  V6, #AC      ; Skip next instruction if V6 != $AC
      $4C0: SE   V6, #5E      ; Skip next instruction if V6 == $5E
      $4DC: SE   V6, #77      ; Skip next instruction if V6 == $77
      ... and 18 more
    Arithmetic on sorted registers V[3]: 2 instructions
      $578: SUB  VF, V3       ; VF = (VF - V3) & 0xFF, VF = NOT borrow
      $DE0: SUBN V8, V3       ; V8 = (V3 - V8) & 0xFF, VF = NOT borrow
    Compares sorted registers V[5]: 12 instructions
      $57C: SNE  V5, #25      ; Skip next instruction if V5 != $25
      $5E6: SE   V5, #5E      ; Skip next instruction if V5 == $5E
      $732: SE   V5, #AD      ; Skip next instruction if V5 == $AD
      ... and 9 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $6DC: SUB  V1, V4       ; V1 = (V1 - V4) & 0xFF, VF = NOT borrow
    Register transfer involving V[6]: 1 instructions
      $7AC: LD   ST, V6       ; Load V6 into sound timer
    Arithmetic on sorted registers V[6]: 2 instructions
      $9E2: SUB  VB, V6       ; VB = (VB - V6) & 0xFF, VF = NOT borrow
      $C08: SUB  V8, V6       ; V8 = (V8 - V6) & 0xFF, VF = NOT borrow
    Compares sorted registers V[5, 7]: 2 instructions
      $9EE: SNE  V7, V5       ; Skip next instruction if V7 != V5
      $AD0: SNE  V7, V5       ; Skip next instruction if V7 != V5
    Register transfer involving V[2, 3, 4, 5, 6, 7]: 1 instructions
      $A1E: LD   [I], VF      ; Store V0-VF at [I], then I += 16
    Arithmetic on sorted registers V[5]: 2 instructions
      $B56: SUB  V0, V5       ; V0 = (V0 - V5) & 0xFF, VF = NOT borrow
      $CD2: SUBN V0, V5       ; V0 = (V5 - V0) & 0xFF, VF = NOT borrow
    Logical operation on V[7] (sets VF=0 in CUDA): 3 instructions
      $BBE: OR   VF, V7       ; VF = VF OR V7, VF = 0
      $C7A: OR   VB, V7       ; VB = VB OR V7, VF = 0
      $FAE: XOR  V9, V7       ; V9 = V9 XOR V7, VF = 0
    Compares sorted registers V[3, 7]: 1 instructions
      $F8C: SE   V7, V3       ; Skip next instruction if V7 == V3

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 517 (28.9%)
    LD: 225 (12.6%)
    JP: 216 (12.1%)
    SE: 125 (7.0%)
    RND: 118 (6.6%)
    DRW: 113 (6.3%)
    NOP: 110 (6.1%)
    SNE: 106 (5.9%)
    ADD: 104 (5.8%)
    CALL: 102 (5.7%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 635
  Based on: 225 sorting instructions + 205 control flows

=== SORTING ROM ANALYSIS: LONGPARTIAL_B3612D01_V2-V7_L6_DES_C423_3df276a2.ch8 ===

üîç SORTING AUTHENTICITY ASSESSMENT:
  ‚ùå CLASSIFICATION: LIKELY_COINCIDENTAL (Confidence: 10.0%)
  Evidence for genuine sorting:
    ‚úì Found 6 values preserved from initial state
  Red flags against genuine sorting:
    ‚ö†Ô∏è  Dominated by random generation: 101 RND instructions

‚ö†Ô∏è  WARNING: This appears to be COINCIDENTAL consecutive values, NOT genuine sorting!
   The initial test pattern [8,3,6,1,7,2,5,4] was likely overwritten with random consecutive numbers.

SORTING ACHIEVEMENT:
  Sorted sequence: [9, 8, 7, 6, 5, 4]
  Length: 6 consecutive elements
  Direction: descending
  Register range: V2-V7
  Start position: V2
  End position: V7
  Initial state: [8, 3, 6, 1, 7, 2, 5, 4]
  Final state:   [8, 3, 9, 8, 7, 6, 5, 4]
  Changes: V2: 6‚Üí9, V3: 1‚Üí8, V5: 2‚Üí6
  ‚úì Correct initial test pattern detected
  Achievement cycle: 423

CUDA EXECUTION STATISTICS:
  Total register operations: 3
  Register reads: 84
  Register writes: 152
  Register writes per cycle: 0.359

REGISTER MODIFICATIONS (V0-V7 focus):
  V0: Modified at 30 locations
       Addresses: ['$252', '$3F6', '$44E', '$45A', '$4CE', '$4FC', '$500', '$586']
       ... and 22 more
  V1: Modified at 28 locations
       Addresses: ['$238', '$3AE', '$3B4', '$446', '$468', '$4B2', '$4E6', '$630']
       ... and 20 more
  V2: Modified at 18 locations
       Addresses: ['$28E', '$3B0', '$3D6', '$46A', '$518', '$6BC', '$780', '$7D8']
       ... and 10 more
  V3: Modified at 28 locations
       Addresses: ['$34C', '$3BA', '$49E', '$53C', '$560', '$610', '$74A', '$756']
       ... and 20 more
  V4: Modified at 24 locations
       Addresses: ['$21E', '$246', '$284', '$290', '$2EC', '$338', '$3DA', '$444']
       ... and 16 more
  V5: Modified at 16 locations
       Addresses: ['$2FE', '$306', '$316', '$330', '$36A', '$3D4', '$5AA', '$5F2']
       ... and 8 more
  V6: Modified at 25 locations
       Addresses: ['$21A', '$3A6', '$456', '$53E', '$5BC', '$5FE', '$66E', '$686']
       ... and 17 more
  V7: Modified at 22 locations
       Addresses: ['$360', '$376', '$3B8', '$406', '$48A', '$4A0', '$4BC', '$554']
       ... and 14 more

CONTROL FLOW ANALYSIS:
  241 control transfers detected:
    $202 ‚Üí $2EE
    $224 ‚Üí $F50
    $226 ‚Üí $5B9
    $22C ‚Üí $B16
    $236 ‚Üí $A97
    ... and 236 more transfers
  Potential sorting loops: 140 backward jumps detected

SORTING-RELATED INSTRUCTIONS:
  236 instructions identified as sorting-related:
    Compares sorted registers V[7]: 20 instructions
      $214: SNE  V7, #0A      ; Skip next instruction if V7 != $0A
      $294: SNE  V7, #59      ; Skip next instruction if V7 != $59
      $2C2: SE   V7, #C3      ; Skip next instruction if V7 == $C3
      ... and 17 more
    Modifies sorted registers V[6]: 25 instructions
      $21A: LD   V6, #06      ; Load $06 into V6
      $3A6: RND  V6, #EB      ; V6 = random() AND $EB
      $456: ADD  V6, #E2      ; Add $E2 to V6 (V6 = (V6 + $E2) & 0xFF)
      ... and 22 more
    Modifies sorted registers V[4]: 24 instructions
      $21E: LD   V4, #0C      ; Load $0C into V4
      $246: LD   V4, #99      ; Load $99 into V4
      $284: ADD  V4, #17      ; Add $17 to V4 (V4 = (V4 + $17) & 0xFF)
      ... and 21 more
    Arithmetic on sorted registers V[4]: 1 instructions
      $228: SUB  VB, V4       ; VB = (VB - V4) & 0xFF, VF = NOT borrow
    Compares sorted registers V[5]: 11 instructions
      $258: SE   V5, V0       ; Skip next instruction if V5 == V0
      $3AC: SE   V5, #60      ; Skip next instruction if V5 == $60
      $44A: SE   V5, #16      ; Skip next instruction if V5 == $16
      ... and 8 more
    Compares sorted registers V[3]: 13 instructions
      $26E: SNE  V3, #5F      ; Skip next instruction if V3 != $5F
      $3F8: SNE  V3, #02      ; Skip next instruction if V3 != $02
      $4DE: SE   V3, #93      ; Skip next instruction if V3 == $93
      ... and 10 more
    Modifies sorted registers V[2]: 18 instructions
      $28E: RND  V2, #31      ; V2 = random() AND $31
      $3B0: RND  V2, #82      ; V2 = random() AND $82
      $3D6: LD   V2, #5A      ; Load $5A into V2
      ... and 15 more
    Compares sorted registers V[4]: 17 instructions
      $2A8: SE   V4, #DF      ; Skip next instruction if V4 == $DF
      $2BC: SE   V4, #3D      ; Skip next instruction if V4 == $3D
      $348: SE   V4, #AA      ; Skip next instruction if V4 == $AA
      ... and 14 more
    Modifies sorted registers V[5]: 16 instructions
      $2FE: LD   V5, #22      ; Load $22 into V5
      $306: RND  V5, #D6      ; V5 = random() AND $D6
      $316: LD   V5, V9       ; Load V9 into V5
      ... and 13 more
    Arithmetic on sorted registers V[3]: 3 instructions
      $32E: SUB  VA, V3       ; VA = (VA - V3) & 0xFF, VF = NOT borrow
      $8E0: ADD  V1, V3       ; V1 = (V1 + V3) & 0xFF, VF = carry
      $E42: ADD  VC, V3       ; VC = (VC + V3) & 0xFF, VF = carry
    Modifies sorted registers V[3]: 28 instructions
      $34C: RND  V3, #32      ; V3 = random() AND $32
      $3BA: RND  V3, #44      ; V3 = random() AND $44
      $49E: LD   V3, V6       ; Load V6 into V3
      ... and 25 more
    Compares sorted registers V[2]: 14 instructions
      $352: SNE  V2, #CB      ; Skip next instruction if V2 != $CB
      $3EE: SE   V2, #51      ; Skip next instruction if V2 == $51
      $4AE: SE   V2, #1C      ; Skip next instruction if V2 == $1C
      ... and 11 more
    Modifies sorted registers V[7]: 22 instructions
      $360: RND  V7, #09      ; V7 = random() AND $09
      $376: LD   V7, #83      ; Load $83 into V7
      $3B8: LD   V7, #1F      ; Load $1F into V7
      ... and 19 more
    Arithmetic on sorted registers V[7]: 2 instructions
      $396: SUBN VE, V7       ; VE = (V7 - VE) & 0xFF, VF = NOT borrow
      $976: SUBN VB, V7       ; VB = (V7 - VB) & 0xFF, VF = NOT borrow
    Compares sorted registers V[6]: 10 instructions
      $3A2: SE   V6, #B2      ; Skip next instruction if V6 == $B2
      $454: SE   V6, #C3      ; Skip next instruction if V6 == $C3
      $544: SE   V6, #08      ; Skip next instruction if V6 == $08
      ... and 7 more
    Register transfer involving V[2, 3, 4]: 1 instructions
      $3B2: LD   [I], V4      ; Store V0-V4 at [I], then I += 5
    Logical operation on V[4] (sets VF=0 in CUDA): 2 instructions
      $4DA: OR   VE, V4       ; VE = VE OR V4, VF = 0
      $BDA: AND  VA, V4       ; VA = VA AND V4, VF = 0
    Logical operation on V[5] (sets VF=0 in CUDA): 1 instructions
      $500: AND  V0, V5       ; V0 = V0 AND V5, VF = 0
    Logical operation on V[7] (sets VF=0 in CUDA): 1 instructions
      $7FC: AND  VA, V7       ; VA = VA AND V7, VF = 0
    Logical operation on V[3] (sets VF=0 in CUDA): 3 instructions
      $81E: AND  V1, V3       ; V1 = V1 AND V3, VF = 0
      $DEE: AND  VA, V3       ; VA = VA AND V3, VF = 0
      $E9C: XOR  VB, V3       ; VB = VB XOR V3, VF = 0
    Compares sorted registers V[6, 7]: 1 instructions
      $CE2: SNE  V6, V7       ; Skip next instruction if V6 != V7
    Register transfer involving V[4]: 1 instructions
      $CE4: LD   VB, V4       ; Load V4 into VB
    Register transfer involving V[2]: 1 instructions
      $E88: LD   V1, V2       ; Load V2 into V1
    Logical operation on V[2] (sets VF=0 in CUDA): 1 instructions
      $FA4: XOR  VA, V2       ; VA = VA XOR V2, VF = 0

CODE STRUCTURE ANALYSIS:
  Total instructions: 1792
  ROM size: 3584 bytes
  Code density: 100.0% of possible instruction slots
  Instruction distribution:
    UNKNOWN: 472 (26.3%)
    JP: 234 (13.1%)
    LD: 227 (12.7%)
    SE: 138 (7.7%)
    DRW: 122 (6.8%)
    NOP: 122 (6.8%)
    CALL: 121 (6.8%)
    ADD: 110 (6.1%)
    RND: 101 (5.6%)
    SNE: 97 (5.4%)

CUDA KERNEL BEHAVIORAL NOTES:
  ‚ö†Ô∏è  Contains OR/AND/XOR ops (CUDA sets VF=0, differs from standard CHIP-8)
  üìù Contains bulk register ops (F55/F65 increment I register)
  üî¢ Contains arithmetic ops (8-bit wraparound in CUDA)

SORTING COMPLEXITY ASSESSMENT: COMPLEX
  Complexity score: 718
  Based on: 236 sorting instructions + 241 control flows

=== OVERALL ANALYSIS SUMMARY ===

Total ROMs analyzed: 84

Sorting length distribution:
  6-element sorts: 84

Sorting direction distribution:
  descending: 40
  ascending: 44

AUTHENTICITY ANALYSIS:
  Genuine sorting algorithms: 11
  Coincidental consecutive values: 73
  Genuine sorting rate: 13.1%

Classification breakdown:
  COINCIDENTAL: 38
  GENUINE: 11
  LIKELY_COINCIDENTAL: 35

Code complexity:
  Average instructions per ROM: 1792.0
  Average sorting-related instructions: 255.8

Most common sorting sequences:
  [9, 8, 7, 6, 5, 4]: 38 occurrences (11 genuine)
  [46, 47, 48, 49, 50, 51]: 14 occurrences (all coincidental)
  [225, 226, 227, 228, 229, 230]: 11 occurrences (all coincidental)
  [0, 1, 2, 3, 4, 5]: 5 occurrences (all coincidental)
  [97, 98, 99, 100, 101, 102]: 3 occurrences (all coincidental)
  [47, 48, 49, 50, 51, 52]: 2 occurrences (all coincidental)
  [223, 224, 225, 226, 227, 228]: 2 occurrences (all coincidental)
  [45, 46, 47, 48, 49, 50]: 1 occurrences (all coincidental)
  [176, 177, 178, 179, 180, 181]: 1 occurrences (all coincidental)
  [3, 4, 5, 6, 7, 8]: 1 occurrences (all coincidental)